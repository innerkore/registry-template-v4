{
  "name": "footer",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/footer.tsx)",
  "dependencies": [
    "lucide-react"
  ],
  "files": [
    {
      "path": "/components/blocks/footer.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\ninterface Icon {\n  package: \"lucide\";\n  name: string; // known lucide react icon-name only\n  type: \"icon\";\n  className: string; // tailwind classes for styling\n}\n\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\ninterface LinkProps {\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  className?: string;\n  rel?: string;\n}\n\ninterface SocialLink {\n  name: string;\n  link: LinkProps;\n}\n\ninterface FooterLink {\n  name: string;\n  icon?: Icon;\n  link: LinkProps;\n}\n\ninterface FooterColumn {\n  title: string;\n  links: FooterLink[];\n}\n\ninterface Brand {\n  name: string;\n  description: string;\n  link: LinkProps;\n}\n\nexport interface FooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  brand: Brand;\n  socialLinks: SocialLink[];\n  columns: FooterColumn[];\n  copyright?: string;\n  backgroundImage?: ImageProps;\n  backgroundColor?: string;\n}\n\nexport const Footer = React.forwardRef<HTMLDivElement, FooterProps>(\n  (\n    {\n      className,\n      brand,\n      socialLinks,\n      columns,\n      copyright,\n      backgroundImage,\n      backgroundColor,\n      style,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\"relative pt-24\", className)}\n        style={{ ...style, ...(backgroundColor ? { backgroundColor } : {}) }}\n        {...props}\n      >\n        {backgroundImage ? (\n          <Image\n            {...backgroundImage}\n            className={cn(\n              \"absolute inset-0 -z-10 object-cover\",\n              backgroundImage.className\n            )}\n          />\n        ) : null}\n\n        <div className=\"max-w-screen-xl mx-auto px-4 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-12\">\n            <div className=\"lg:col-span-4\">\n              <Link\n                href={brand.link.href}\n                className={cn(\"text-xl font-semibold\", brand.link.className)}\n                target={brand.link.target}\n                rel={brand.link.rel}\n              >\n                {brand.name}\n              </Link>\n              <p className=\"text-sm text-foreground/60\">{brand.description}</p>\n\n              <p className=\"text-sm font-light text-foreground/55 mt-3.5\">\n                {socialLinks.map((item, index) => (\n                  <React.Fragment key={item.name}>\n                    <Link\n                      href={item.link.href}\n                      className={cn(\n                        \"hover:text-foreground/90\",\n                        item.link.className\n                      )}\n                      target={item.link.target}\n                      rel={item.link.rel}\n                    >\n                      {item.name}\n                    </Link>\n                    {index < socialLinks.length - 1 && \" \u2022 \"}\n                  </React.Fragment>\n                ))}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-2 mt-16 md:grid-cols-3 lg:col-span-8 lg:justify-items-end lg:mt-0\">\n              {columns.map(({ title, links }) => (\n                <div key={title} className=\"last:mt-12 md:last:mt-0\">\n                  <h3 className=\"text-sm font-semibold\">{title}</h3>\n                  <ul className=\"mt-4 space-y-2.5\">\n                    {links.map(({ name, icon, link }) => (\n                      <li key={name}>\n                        <Link\n                          href={link.href}\n                          className={cn(\n                            \"text-sm transition-all text-foreground/60 hover:text-foreground/90 group\",\n                            link.className\n                          )}\n                          target={link.target}\n                          rel={link.rel}\n                        >\n                          {icon ? (\n                            <DynamicIcon\n                              name={icon.name}\n                              className={cn(\n                                \"inline stroke-2 h-4 mr-1.5 transition-all stroke-foreground/60 group-hover:stroke-foreground/90\",\n                                icon.className\n                              )}\n                            />\n                          ) : null}\n                          {name}\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {copyright ? (\n            <div className=\"mt-20 border-t pt-6 pb-8\">\n              <p className=\"text-xs text-foreground/55\">{copyright}</p>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n);\n\nFooter.displayName = \"Footer\";\n\nexport default Footer;\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/RayMethula/footer",
    "component_name": "Footer",
    "component_path": "/components/blocks/footer.tsx",
    "props": "FooterProps",
    "props_path": "/components/blocks/footer.tsx",
    "original_file": "/components/blocks/footer.tsx",
    "transformed_at": "2025-09-21T21:22:38.715480",
    "category": "footer",
    "tags": [
      "trust-building",
      "navigation-element",
      "responsive-mobile",
      "container-bound",
      "minimalist"
    ],
    "variations": []
  }
}