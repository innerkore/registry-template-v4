{
  "name": "Modern Background Paths",
  "type": "registry:component",
  "description": "TypeScript component (transformed from src/components/ui/modern-background-paths.tsx)",
  "title": "Modern Background Paths",
  "files": [
    {
      "path": "src/components/ui/modern-background-paths.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"@/components/Link\";\nimport Image from \"@/components/Image\";\n\n// Image interface per project guidelines\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface EnhancedBackgroundPathsProps {\n  title: string;\n  subtitle: string;\n  ctaLabel: string;\n  ctaHref: string;\n  ctaIcon?: string; // Optional extra visible symbol for CTA (e.g., \"\u2192\")\n  patternNames: [string, string, string, string]; // Display names for 4 patterns in order\n  currentPatternLabel: string; // e.g., \"Current Pattern:\"\n  backgroundImage?: ImageProps; // Optional full-bleed background image\n  backgroundColor?: string; // Optional CSS color value for wrapper background\n}\n\nfunction GeometricPaths(): JSX.Element {\n  const gridSize = 40;\n  const paths: { id: string; d: string; delay: number }[] = [];\n\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 12; y++) {\n      if (Math.random() > 0.7) {\n        paths.push({\n          id: `grid-${x}-${y}`,\n          d: `M${x * gridSize},${y * gridSize} L${(x + 1) * gridSize},${y * gridSize} L${(x + 1) * gridSize},${(y + 1) * gridSize} L${x * gridSize},${(y + 1) * gridSize} Z`,\n          delay: Math.random() * 5,\n        });\n      }\n    }\n  }\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-20\" viewBox=\"0 0 800 480\" aria-hidden>\n      {paths.map((path) => (\n        <motion.path\n          key={path.id}\n          d={path.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"1\"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{ pathLength: [0, 1, 0], opacity: [0, 0.6, 0], scale: [1, 1.05, 1] }}\n          transition={{ duration: 8, delay: path.delay, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nfunction FlowPaths(): JSX.Element {\n  const flowPaths = Array.from({ length: 12 }, (_, i) => {\n    const amplitude = 50 + i * 10;\n    const frequency = 0.01 + i * 0.002; // retained for conceptual clarity, not directly used in path\n    const offset = i * 60;\n\n    return {\n      id: `flow-${i}`,\n      d: `M-100,${200 + offset} Q200,${200 + offset - amplitude} 500,${200 + offset} T900,${200 + offset}`,\n      strokeWidth: 1 + i * 0.3,\n      opacity: 0.1 + i * 0.05,\n      delay: i * 0.8,\n    };\n  });\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-30\" viewBox=\"0 0 800 800\" aria-hidden>\n      {flowPaths.map((path) => (\n        <motion.path\n          key={path.id}\n          d={path.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={path.strokeWidth}\n          strokeLinecap=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: [0, 1, 0.8, 0], opacity: [0, path.opacity, path.opacity * 0.7, 0] }}\n          transition={{ duration: 15, delay: path.delay, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nfunction NeuralPaths(): JSX.Element {\n  const nodes = Array.from({ length: 50 }, (_, i) => ({\n    x: Math.random() * 800,\n    y: Math.random() * 600,\n    id: `node-${i}`,\n  }));\n\n  const connections: { id: string; d: string; delay: number }[] = [];\n  nodes.forEach((node, i) => {\n    const nearbyNodes = nodes.filter((other, j) => {\n      if (i === j) return false;\n      const distance = Math.sqrt(Math.pow(node.x - other.x, 2) + Math.pow(node.y - other.y, 2));\n      return distance < 120 && Math.random() > 0.6;\n    });\n\n    nearbyNodes.forEach((target) => {\n      connections.push({ id: `conn-${i}-${target.id}`, d: `M${node.x},${node.y} L${target.x},${target.y}`, delay: Math.random() * 10 });\n    });\n  });\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-15\" viewBox=\"0 0 800 600\" aria-hidden>\n      {connections.map((conn) => (\n        <motion.path\n          key={conn.id}\n          d={conn.d}\n          stroke=\"currentColor\"\n          strokeWidth=\"0.5\"\n          fill=\"none\"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{ pathLength: [0, 1, 0], opacity: [0, 0.8, 0] }}\n          transition={{ duration: 6, delay: conn.delay, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n      {nodes.map((node) => (\n        <motion.circle\n          key={node.id}\n          cx={node.x}\n          cy={node.y}\n          r=\"2\"\n          fill=\"currentColor\"\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: [0, 1, 1.2, 1], opacity: [0, 0.6, 0.8, 0.6] }}\n          transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nfunction SpiralPaths(): JSX.Element {\n  const spirals = Array.from({ length: 8 }, (_, i) => {\n    const centerX = 400 + ((i % 4) - 1.5) * 200;\n    const centerY = 300 + (Math.floor(i / 4 - 0.5) * 200);\n    const radius = 80 + i * 15;\n    const turns = 3 + i * 0.5;\n\n    let path = `M${centerX + radius},${centerY}`;\n    for (let angle = 0; angle <= turns * 360; angle += 5) {\n      const radian = (angle * Math.PI) / 180;\n      const currentRadius = radius * (1 - angle / (turns * 360));\n      const x = centerX + currentRadius * Math.cos(radian);\n      const y = centerY + currentRadius * Math.sin(radian);\n      path += ` L${x},${y}`;\n    }\n\n    return { id: `spiral-${i}`, d: path, delay: i * 1.2 };\n  });\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-25\" viewBox=\"0 0 800 600\" aria-hidden>\n      {spirals.map((spiral) => (\n        <motion.path\n          key={spiral.id}\n          d={spiral.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: [0, 1, 0], rotate: [0, 360] }}\n          transition={{\n            pathLength: { duration: 12, repeat: Infinity, ease: \"easeInOut\" },\n            rotate: { duration: 20, repeat: Infinity, ease: \"linear\" },\n            delay: spiral.delay,\n          }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport default function EnhancedBackgroundPaths({\n  title,\n  subtitle,\n  ctaLabel,\n  ctaHref,\n  ctaIcon,\n  patternNames,\n  currentPatternLabel,\n  backgroundImage,\n  backgroundColor,\n}: EnhancedBackgroundPathsProps): JSX.Element {\n  const [currentPattern, setCurrentPattern] = useState<number>(0);\n  const patterns = patternNames; // must correspond to the 4 internal patterns order\n  const words = title.split(\" \");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentPattern((prev) => (prev + 1) % patterns.length);\n    }, 12000);\n    return () => clearInterval(interval);\n  }, [patterns.length]);\n\n  const renderPattern = (): JSX.Element => {\n    switch (currentPattern) {\n      case 0:\n        return <NeuralPaths />;\n      case 1:\n        return <FlowPaths />;\n      case 2:\n        return <GeometricPaths />;\n      case 3:\n        return <SpiralPaths />;\n      default:\n        return <NeuralPaths />;\n    }\n  };\n\n  return (\n    <div\n      className=\"relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900\"\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {/* Optional Background Image */}\n      {backgroundImage && (\n        <div className=\"absolute inset-0 -z-10\">\n          <Image\n            {...backgroundImage}\n            className={`object-cover ${backgroundImage.className ? backgroundImage.className : \"\"}`}\n          />\n        </div>\n      )}\n\n      {/* Dynamic Background Patterns */}\n      <div className=\"absolute inset-0 text-slate-600 dark:text-slate-400\" aria-hidden>\n        <motion.div\n          key={currentPattern}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 2 }}\n        >\n          {renderPattern()}\n        </motion.div>\n      </div>\n\n      {/* Gradient Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-white/60 via-transparent to-white/60 dark:from-slate-900/60 dark:via-transparent dark:to-slate-900/60\" aria-hidden />\n\n      {/* Pattern Indicator */}\n      <div className=\"absolute top-8 right-8 flex gap-2 z-20\" aria-label=\"pattern-indicators\">\n        {patterns.map((_, i) => (\n          <motion.div\n            key={i}\n            className={`w-2 h-2 rounded-full transition-colors duration-300 ${\n              i === currentPattern ? \"bg-slate-800 dark:bg-white\" : \"bg-slate-300 dark:bg-slate-600\"\n            }`}\n            animate={{ scale: i === currentPattern ? 1.2 : 1, opacity: i === currentPattern ? 1 : 0.5 }}\n            transition={{ duration: 0.3 }}\n            aria-hidden\n          />\n        ))}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 container mx-auto px-4 md:px-6 text-center\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1.5, ease: \"easeOut\" }}\n          className=\"max-w-5xl mx-auto\"\n        >\n          {/* Main Title */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-6xl sm:text-8xl md:text-9xl font-black mb-4 tracking-tighter leading-none\">\n              {words.map((word, wordIndex) => (\n                <span key={wordIndex} className=\"inline-block mr-6 last:mr-0\">\n                  {word.split(\"\").map((letter, letterIndex) => (\n                    <motion.span\n                      key={`${wordIndex}-${letterIndex}`}\n                      initial={{ y: 100, opacity: 0, rotateX: -90 }}\n                      animate={{ y: 0, opacity: 1, rotateX: 0 }}\n                      transition={{\n                        delay: wordIndex * 0.15 + letterIndex * 0.05,\n                        type: \"spring\",\n                        stiffness: 100,\n                        damping: 20,\n                        duration: 0.8,\n                      }}\n                      className=\"inline-block text-transparent bg-clip-text \n                                          bg-gradient-to-br from-slate-900 via-slate-700 to-slate-500\n                                          dark:from-white dark:via-slate-200 dark:to-slate-400\n                                          hover:from-blue-600 hover:to-purple-600 dark:hover:from-blue-400 dark:hover:to-purple-400\n                                          transition-all duration-700 cursor-default\"\n                      whileHover={{ scale: 1.05, y: -2 }}\n                    >\n                      {letter}\n                    </motion.span>\n                  ))}\n                </span>\n              ))}\n            </h1>\n\n            {/* Subtitle */}\n            <motion.p\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1, duration: 1 }}\n              className=\"text-xl md:text-2xl text-slate-600 dark:text-slate-300 font-light tracking-wide max-w-2xl mx-auto\"\n            >\n              {subtitle}\n            </motion.p>\n          </div>\n\n          {/* CTA Button with Link asChild */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ delay: 1.5, duration: 0.8, type: \"spring\", stiffness: 100 }}\n            className=\"inline-block group\"\n          >\n            <div className=\"relative p-[2px] bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-2xl group-hover:from-blue-600 group-hover:via-purple-600 group-hover:to-pink-600 transition-all duration-300\">\n              <Button\n                asChild\n                variant=\"ghost\"\n                size=\"lg\"\n                className=\"relative rounded-[14px] px-12 py-6 text-lg font-semibold\n                            bg-white dark:bg-slate-900 hover:bg-slate-50 dark:hover:bg-slate-800\n                            text-slate-900 dark:text-white transition-all duration-300\n                            group-hover:-translate-y-1 group-hover:shadow-2xl\n                            border-0 backdrop-blur-sm\"\n              >\n                <Link href={ctaHref} className=\"flex items-center gap-3\">\n                  <motion.span whileHover={{ x: 2 }} transition={{ type: \"spring\", stiffness: 400, damping: 10 }}>\n                    <span className=\"relative\">\n                      {ctaLabel}\n                      <motion.span\n                        className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 group-hover:w-full transition-all duration-300\"\n                        initial={{ width: 0 }}\n                        whileHover={{ width: \"100%\" }}\n                      />\n                    </span>\n                  </motion.span>\n                  {ctaIcon ? (\n                    <motion.span\n                      animate={{ x: [0, 4, 0] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n                      className=\"text-xl\"\n                    >\n                      {ctaIcon}\n                    </motion.span>\n                  ) : null}\n                </Link>\n              </Button>\n            </div>\n          </motion.div>\n\n          {/* Pattern Info */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 2, duration: 1 }}\n            className=\"mt-12 text-sm text-slate-500 dark:text-slate-400 font-mono tracking-wider\"\n          >\n            {currentPatternLabel} <span className=\"text-slate-700 dark:text-slate-200 font-semibold capitalize\">{patterns[currentPattern]}</span>\n          </motion.div>\n        </motion.div>\n      </div>\n\n      {/* Floating Elements */}\n      <motion.div\n        className=\"absolute top-1/4 left-1/4 w-4 h-4 bg-blue-500/20 rounded-full blur-sm\"\n        animate={{ y: [0, -20, 0], x: [0, 10, 0], scale: [1, 1.2, 1], opacity: [0.3, 0.7, 0.3] }}\n        transition={{ duration: 6, repeat: Infinity, ease: \"easeInOut\" }}\n        aria-hidden\n      />\n      <motion.div\n        className=\"absolute top-3/4 right-1/3 w-6 h-6 bg-purple-500/20 rounded-full blur-sm\"\n        animate={{ y: [0, 15, 0], x: [0, -15, 0], scale: [1, 0.8, 1], opacity: [0.5, 0.8, 0.5] }}\n        transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\", delay: 2 }}\n        aria-hidden\n      />\n    </div>\n  );\n}\n"
    }
  ],
  "meta": {
    "component_name": "EnhancedBackgroundPaths",
    "component_path": "src/components/ui/modern-background-paths.tsx",
    "props": "EnhancedBackgroundPathsProps",
    "props_path": "src/components/ui/modern-background-paths.tsx",
    "original_file": "src/components/ui/modern-background-paths.tsx",
    "transformed_at": "2025-09-22T20:05:38.153338",
    "category": "hero",
    "tags": [
      "conversion-focused",
      "action-trigger",
      "visual-dominant",
      "animated",
      "above-fold",
      "responsive-mobile"
    ],
    "variations": [],
    "created_at": "2025-09-22T20:05:38.153352",
    "install_url": "s3://registry-marketkore/registry/Modern Background Paths.json"
  }
}