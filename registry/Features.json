{
  "name": "Features",
  "type": "registry:component",
  "description": "TypeScript component (transformed from src/components/ui/features.tsx)",
  "title": "Features",
  "files": [
    {
      "path": "src/components/ui/features.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Image from \"@/components/Image\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\n\nexport interface FeatureImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  className?: string;\n}\n\nexport interface FeatureItem {\n  id: number;\n  iconName: string; // lucide icon name\n  title: string;\n  description: string;\n  image: FeatureImageProps;\n}\n\nexport interface FeaturesProps {\n  features: FeatureItem[];\n  headerEyebrow: string;\n  headerTitle: string;\n  primaryColor?: string;\n  progressGradientLight?: string; // e.g. \"bg-gradient-to-r from-blue-500 to-cyan-500\"\n  progressGradientDark?: string; // e.g. \"bg-gradient-to-r from-blue-400 to-cyan-400\"\n  backgroundColor?: string;\n  backgroundImage?: {\n    src: string;\n    alt: string;\n    width: number;\n    height: number;\n    className?: string;\n  };\n  className?: string;\n}\n\nexport function Features({\n  features,\n  headerEyebrow,\n  headerTitle,\n  primaryColor,\n  progressGradientLight,\n  progressGradientDark,\n  backgroundColor,\n  backgroundImage,\n  className,\n}: FeaturesProps) {\n  const [currentFeature, setCurrentFeature] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const featureRefs = useRef<Array<HTMLDivElement | null>>([]);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setProgress((prev) => (prev >= 100 ? 100 : prev + 1));\n    }, 100);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    if (progress >= 100) {\n      setTimeout(() => {\n        setCurrentFeature((prev) => (prev + 1) % features.length);\n        setProgress(0);\n      }, 200);\n    }\n  }, [progress, features.length]);\n\n  useEffect(() => {\n    const activeFeatureElement = featureRefs.current[currentFeature];\n    const container = containerRef.current;\n\n    if (activeFeatureElement && container) {\n      const containerRect = container.getBoundingClientRect();\n      const elementRect = activeFeatureElement.getBoundingClientRect();\n\n      container.scrollTo({\n        left:\n          activeFeatureElement.offsetLeft -\n          (containerRect.width - elementRect.width) / 2,\n        behavior: \"smooth\",\n      });\n    }\n  }, [currentFeature]);\n\n  const handleFeatureClick = (index: number) => {\n    setCurrentFeature(index);\n    setProgress(0);\n  };\n\n  const primaryTextStyle = primaryColor ? { color: primaryColor } : undefined;\n  const primaryBgStyle = primaryColor ? { backgroundColor: primaryColor } : undefined;\n\n  return (\n    <div\n      className={`relative min-h-screen py-16 px-4 ${className ?? \"\"}`}\n      style={{ backgroundColor: backgroundColor }}\n    >\n      {backgroundImage && (\n        <div className=\"absolute inset-0 -z-10 pointer-events-none\">\n          <Image\n            src={backgroundImage.src}\n            alt={backgroundImage.alt}\n            width={backgroundImage.width}\n            height={backgroundImage.height}\n            fill\n            className={`h-full w-full object-cover ${backgroundImage.className ?? \"\"}`}\n          />\n        </div>\n      )}\n\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <span\n            className=\"font-semibold text-sm uppercase tracking-wider\"\n            style={primaryTextStyle}\n          >\n            {headerEyebrow}\n          </span>\n          <h2 className=\"text-4xl md:text-5xl font-bold text-black dark:text-white mt-4 mb-6\">\n            {headerTitle}\n          </h2>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 lg:gap-16 gap-8 items-center\">\n          <div\n            ref={containerRef}\n            className=\"lg:space-y-8 md:space-x-6 lg:space-x-0 overflow-x-auto overflow-hidden no-scrollbar lg:overflow-visible flex lg:flex lg:flex-col flex-row order-1 pb-4 scroll-smooth\"\n          >\n            {features.map((feature, index) => {\n              const isActive = currentFeature === index;\n\n              return (\n                <div\n                  key={feature.id}\n                  ref={(el) => {\n                    featureRefs.current[index] = el;\n                  }}\n                  className=\"relative cursor-pointer flex-shrink-0\"\n                  onClick={() => handleFeatureClick(index)}\n                >\n                  <div\n                    className={`\n                      flex lg:flex-row flex-col items-start space-x-4 p-3 max-w-sm md:max-w-sm lg:max-w-2xl transition-all duration-300\n                      ${\n                        isActive\n                          ? \"bg-white dark:bg-black/80 md:shadow-xl dark:drop-shadow-lg rounded-xl md:border dark:border-none border-gray-200\"\n                          : \"\"\n                      }\n                    `}\n                  >\n                    <div\n                      className={`p-3 hidden md:block rounded-full transition-all duration-300 ${\n                        isActive ? \"text-white\" : \"bg-transparent\"\n                      }`}\n                      style={isActive ? primaryBgStyle : primaryTextStyle}\n                    >\n                      <DynamicIcon name={feature.iconName} className=\"h-6 w-6\" />\n                    </div>\n\n                    <div className=\"flex-1\">\n                      <h3\n                        className={`\n                          text-lg md:mt-4 lg:mt-0 font-semibold mb-2 transition-colors duration-300\n                          ${\n                            isActive\n                              ? \"text-gray-900 dark:text-white\"\n                              : \"text-gray-700 dark:text-white/80\"\n                          }\n                        `}\n                      >\n                        {feature.title}\n                      </h3>\n                      <p\n                        className={`\n                          transition-colors duration-300 text-sm\n                          ${\n                            isActive\n                              ? \"text-gray-600 dark:text-white/60\"\n                              : \"text-gray-500 dark:text-white/40\"\n                          }\n                        `}\n                      >\n                        {feature.description}\n                      </p>\n                      <div className=\"mt-4 bg-white dark:bg-black/80 rounded-sm h-1 overflow-hidden\">\n                        {isActive && (\n                          <motion.div\n                            className={`h-full ${progressGradientLight ?? \"\"} ${\n                              progressGradientDark ? `dark:${progressGradientDark}` : \"\"\n                            }`}\n                            initial={{ width: 0 }}\n                            animate={{ width: `${progress}%` }}\n                            transition={{ duration: 0.1, ease: \"linear\" }}\n                          />\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"relative order-1 max-w-lg mx-auto lg:order-2\">\n            <motion.div\n              key={currentFeature}\n              initial={{ opacity: 0, y: 50 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -50 }}\n              transition={{ duration: 0.5, ease: \"easeOut\" }}\n              className=\"relative\"\n            >\n              <Image\n                className=\"rounded-2xl border dark:border-none border-gray-50 shadow-lg dark:drop-shadow-lg\"\n                src={features[currentFeature].image.src}\n                alt={features[currentFeature].image.alt}\n                width={features[currentFeature].image.width}\n                height={features[currentFeature].image.height}\n              />\n            </motion.div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"
    }
  ],
  "meta": {
    "component_name": "Features",
    "component_path": "src/components/ui/features.tsx",
    "props": "FeaturesProps",
    "props_path": "src/components/ui/features.tsx",
    "original_file": "src/components/ui/features.tsx",
    "transformed_at": "2025-09-21T21:18:49.160171",
    "category": "features",
    "tags": [
      "product-highlight",
      "icon-based",
      "media-display",
      "animated",
      "responsive-mobile",
      "below-fold"
    ],
    "variations": [],
    "created_at": "2025-09-21T21:18:49.160198"
  }
}