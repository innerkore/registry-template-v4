{
  "name": "pricing2",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/pricing2.tsx)",
  "title": "Pricing2",
  "files": [
    {
      "path": "/components/blocks/pricing2.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\n\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\n\n// Image interface per guidelines\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\ninterface PricingFeature {\n  text: string;\n}\n\ninterface PricingPlanButton {\n  text: string;\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  rel?: string;\n  iconName?: string; // lucide icon name for the button (e.g., \"ArrowRight\")\n}\n\ninterface PricingPlan {\n  id: string;\n  name: string;\n  description: string;\n  monthlyPrice: number; // per-month price in selected currency\n  yearlyPrice: number; // per-month price when billed yearly in selected currency\n  currencySymbol: string; // e.g., \"$\"\n  features: PricingFeature[];\n  preFeaturesText?: string; // Optional text shown above features list\n  button: PricingPlanButton;\n}\n\nexport interface Pricing2Props {\n  heading: string;\n  description: string;\n  monthlyLabel: string; // label for monthly toggle\n  yearlyLabel: string; // label for yearly toggle\n  billedPrefixText: string; // e.g., \"Billed\"\n  billedSuffixText: string; // e.g., \"annually\"\n  plans: PricingPlan[];\n  backgroundImage?: ImageProps; // optional background image\n  backgroundColorClassName?: string; // optional background color utility classes\n}\n\nconst Pricing2 = ({\n  heading,\n  description,\n  monthlyLabel,\n  yearlyLabel,\n  billedPrefixText,\n  billedSuffixText,\n  plans,\n  backgroundImage,\n  backgroundColorClassName,\n}: Pricing2Props) => {\n  const [isYearly, setIsYearly] = useState(false);\n\n  return (\n    <section className={`py-32 relative ${backgroundColorClassName ?? \"\"}`}>\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={`${backgroundImage.className ?? \"\"} absolute inset-0 -z-10 object-cover`}\n          fill={backgroundImage.fill}\n        />\n      ) : null}\n      <div className=\"container\">\n        <div className=\"mx-auto flex max-w-5xl flex-col items-center gap-6 text-center\">\n          <h2 className=\"text-pretty text-4xl font-bold lg:text-6xl\">{heading}</h2>\n          <p className=\"text-muted-foreground lg:text-xl\">{description}</p>\n          <div className=\"flex items-center gap-3 text-lg\">\n            {monthlyLabel}\n            <Switch checked={isYearly} onCheckedChange={(checked) => setIsYearly(checked)} />\n            {yearlyLabel}\n          </div>\n          <div className=\"flex flex-col items-stretch gap-6 md:flex-row\">\n            {plans.map((plan) => {\n              const perMonth = isYearly ? plan.yearlyPrice : plan.monthlyPrice;\n              const billedTotal = perMonth * 12;\n              const buttonRel =\n                plan.button.target === \"_blank\"\n                  ? plan.button.rel ?? \"noopener noreferrer\"\n                  : plan.button.rel;\n\n              return (\n                <Card key={plan.id} className=\"flex w-80 flex-col justify-between text-left\">\n                  <CardHeader>\n                    <CardTitle>\n                      <p>{plan.name}</p>\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\">{plan.description}</p>\n                    <span className=\"text-4xl font-bold\">\n                      {plan.currencySymbol}\n                      {perMonth}\n                    </span>\n                    <p className=\"text-muted-foreground\">\n                      {billedPrefixText} {plan.currencySymbol}\n                      {billedTotal} {billedSuffixText}\n                    </p>\n                  </CardHeader>\n                  <CardContent>\n                    <Separator className=\"mb-6\" />\n                    {plan.preFeaturesText ? (\n                      <p className=\"mb-3 font-semibold\">{plan.preFeaturesText}</p>\n                    ) : null}\n                    <ul className=\"space-y-4\">\n                      {plan.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center gap-2\">\n                          <DynamicIcon name=\"CircleCheck\" className=\"size-4\" />\n                          <span>{feature.text}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                  <CardFooter className=\"mt-auto\">\n                    <Button asChild className=\"w-full\">\n                      <Link href={plan.button.href} target={plan.button.target} rel={buttonRel} className=\"inline-flex items-center justify-center\">\n                        {plan.button.text}\n                        {plan.button.iconName ? (\n                          <DynamicIcon name={plan.button.iconName} className=\"ml-2 size-4\" />\n                        ) : null}\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { Pricing2 };"
    }
  ],
  "meta": {
    "component_name": "Pricing2",
    "component_path": "/components/blocks/pricing2.tsx",
    "props": "Pricing2Props",
    "props_path": "/components/blocks/pricing2.tsx",
    "original_file": "/components/blocks/pricing2.tsx",
    "transformed_at": "2025-09-22T19:56:17.710923",
    "category": "pricing",
    "tags": [
      "conversion-focused",
      "content-container",
      "interactive",
      "responsive-mobile",
      "responsive-desktop",
      "decision-stage"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:56:17.710939"
  }
}