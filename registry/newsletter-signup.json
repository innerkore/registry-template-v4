{
  "name": "newsletter-signup",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/newsletter-signup.tsx)",
  "title": "Newsletter Signup",
  "files": [
    {
      "path": "/components/ui/newsletter-signup.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport confetti from \"canvas-confetti\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image, { type ImageProps as BgImageProps } from \"@/components/Image\";\n\nexport interface NewsletterSignupProps {\n  onSubmit: (email: string) => Promise<void>;\n  className?: string;\n  // Visible content\n  titleText: string;\n  descriptionText: string;\n  emailLabel: string;\n  emailPlaceholder: string;\n  buttonText: string;\n  successTitle: string;\n  successMessage: string;\n  errorRequired: string;\n  errorInvalid: string;\n  errorGeneric: string;\n  // Optional icon (lucide icon name)\n  iconName?: string; // known lucide-react icon name\n  // Optional background\n  backgroundImage?: BgImageProps;\n  backgroundColor?: string;\n}\n\nconst NewsletterSignup: React.FC<NewsletterSignupProps> = ({\n  onSubmit,\n  className,\n  titleText,\n  descriptionText,\n  emailLabel,\n  emailPlaceholder,\n  buttonText,\n  successTitle,\n  successMessage,\n  errorRequired,\n  errorInvalid,\n  errorGeneric,\n  iconName,\n  backgroundImage,\n  backgroundColor,\n}) => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [error, setError] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [isSubmitted, setIsSubmitted] = useState<boolean>(false);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (!email) {\n      setError(errorRequired);\n      return;\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      setError(errorInvalid);\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      await onSubmit(email);\n      setIsSubmitted(true);\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 },\n      });\n    } catch {\n      setError(errorGeneric);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div\n      className={`relative bg-secondary/50 border border-primary/10 rounded-lg p-6 ${className ?? \"\"}`}\n      style={{ backgroundColor: backgroundColor }}\n    >\n      {backgroundImage ? (\n        <div className=\"absolute inset-0 -z-10 overflow-hidden rounded-lg pointer-events-none\">\n          <Image\n            {...backgroundImage}\n            className={`h-full w-full object-cover ${backgroundImage.className ?? \"\"}`}\n          />\n          <div className=\"absolute inset-0 bg-black/10\" />\n        </div>\n      ) : null}\n\n      <AnimatePresence mode=\"wait\">\n        {!isSubmitted ? (\n          <motion.form\n            key=\"form\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            onSubmit={handleSubmit}\n            className=\"flex flex-col gap-4\"\n          >\n            <div className=\"flex items-start justify-center gap-1 flex-col overflow-y-hidden\">\n              <motion.h2\n                className=\"text-2xl font-bold text-foreground\"\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.2 }}\n              >\n                {titleText}\n              </motion.h2>\n              <motion.p\n                className=\"text-muted-foreground text-sm\"\n                initial={{ opacity: 0, y: 10, filter: \"blur(3px)\" }}\n                animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n                transition={{ delay: 0.4 }}\n              >\n                {descriptionText}\n              </motion.p>\n            </div>\n            <div className=\"space-y-2\">\n              <motion.label\n                initial={{ opacity: 0, filter: \"blur(3px)\" }}\n                animate={{ opacity: 1, filter: \"blur(0px)\" }}\n                transition={{ delay: 0.6 }}\n                className=\"font-medium text-sm\"\n                htmlFor=\"newsletter-email\"\n              >\n                {emailLabel}\n              </motion.label>\n              <motion.div\n                className=\"flex gap-2\"\n                initial={{ opacity: 0, filter: \"blur(3px)\" }}\n                animate={{ opacity: 1, filter: \"blur(0px)\" }}\n                transition={{ delay: 0.7 }}\n              >\n                <input\n                  type=\"email\"\n                  id=\"newsletter-email\"\n                  placeholder={emailPlaceholder}\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full px-3 py-2 border rounded-md focus-visible:ring-0 focus-within:ring-0 focus:outline-white/10\"\n                  aria-invalid={!!error}\n                  aria-describedby={error ? \"newsletter-error\" : undefined}\n                  disabled={isSubmitting}\n                />\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"relative overflow-hidden text-sm inline-flex items-center justify-center gap-2 px-4 py-2 bg-white border border-black font-medium rounded-md disabled:opacity-60\"\n                >\n                  <motion.div\n                    key=\"default\"\n                    initial={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    className=\"flex items-center\"\n                  >\n                    {iconName ? (\n                      <DynamicIcon name={iconName} className=\"h-4 w-4\" />\n                    ) : null}\n                    <span className={iconName ? \"ml-2\" : \"\"}>{buttonText}</span>\n                  </motion.div>\n                </button>\n              </motion.div>\n            </div>\n            <AnimatePresence>\n              {error ? (\n                <motion.p\n                  id=\"newsletter-error\"\n                  className=\"text-red-500 text-sm\"\n                  initial={{ opacity: 0, y: 5 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -5 }}\n                >\n                  {error}\n                </motion.p>\n              ) : null}\n            </AnimatePresence>\n          </motion.form>\n        ) : (\n          <motion.div\n            key=\"success\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"text-center\"\n          >\n            <h2 className=\"text-2xl font-bold text-foreground mb-2\">{successTitle}</h2>\n            <p className=\"text-muted-foreground\">{successMessage}</p>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default NewsletterSignup;\n"
    },
    {
      "path": "/components/ui/newsletter-signup-variation1.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion } from \"motion/react\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Link from \"@/components/Link\";\nimport Image, { type ImageProps as BgImageProps } from \"@/components/Image\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface NewsletterSignupLinkCTAProps {\n  className?: string;\n  // Visible content\n  titleText: string;\n  descriptionText: string;\n  emailLabel: string;\n  emailPlaceholder: string;\n  buttonText: string;\n  // Link target\n  buttonHref: string;\n  buttonTarget?: \"_blank\" | \"_self\";\n  buttonRel?: string;\n  // Optional icon (lucide icon name)\n  iconName?: string; // known lucide-react icon name\n  // Optional background\n  backgroundImage?: BgImageProps;\n  backgroundColor?: string;\n}\n\nexport const NewsletterSignupLinkCTA: React.FC<NewsletterSignupLinkCTAProps> = ({\n  className,\n  titleText,\n  descriptionText,\n  emailLabel,\n  emailPlaceholder,\n  buttonText,\n  buttonHref,\n  buttonTarget,\n  buttonRel,\n  iconName,\n  backgroundImage,\n  backgroundColor,\n}) => {\n  const [email, setEmail] = useState<string>(\"\");\n\n  return (\n    <div\n      className={`relative bg-secondary/50 border border-primary/10 rounded-lg p-6 ${className ?? \"\"}`}\n      style={{ backgroundColor: backgroundColor }}\n    >\n      {backgroundImage ? (\n        <div className=\"absolute inset-0 -z-10 overflow-hidden rounded-lg pointer-events-none\">\n          <Image\n            {...backgroundImage}\n            className={`h-full w-full object-cover ${backgroundImage.className ?? \"\"}`}\n          />\n          <div className=\"absolute inset-0 bg-black/10\" />\n        </div>\n      ) : null}\n\n      <div className=\"flex flex-col gap-4\">\n        <div className=\"flex items-start justify-center gap-1 flex-col overflow-y-hidden\">\n          <motion.h2\n            className=\"text-2xl font-bold text-foreground\"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n          >\n            {titleText}\n          </motion.h2>\n          <motion.p\n            className=\"text-muted-foreground text-sm\"\n            initial={{ opacity: 0, y: 10, filter: \"blur(3px)\" }}\n            animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n            transition={{ delay: 0.4 }}\n          >\n            {descriptionText}\n          </motion.p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <motion.label\n            initial={{ opacity: 0, filter: \"blur(3px)\" }}\n            animate={{ opacity: 1, filter: \"blur(0px)\" }}\n            transition={{ delay: 0.6 }}\n            className=\"font-medium text-sm\"\n            htmlFor=\"newsletter-email-cta\"\n          >\n            {emailLabel}\n          </motion.label>\n          <motion.div\n            className=\"flex gap-2\"\n            initial={{ opacity: 0, filter: \"blur(3px)\" }}\n            animate={{ opacity: 1, filter: \"blur(0px)\" }}\n            transition={{ delay: 0.7 }}\n          >\n            <input\n              type=\"email\"\n              id=\"newsletter-email-cta\"\n              placeholder={emailPlaceholder}\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full px-3 py-2 border rounded-md focus-visible:ring-0 focus-within:ring-0 focus:outline-white/10\"\n            />\n            <Button asChild className=\"text-sm\">\n              <Link href={buttonHref} target={buttonTarget} rel={buttonRel} className=\"relative overflow-hidden inline-flex items-center justify-center gap-2 px-4 py-2 bg-white border border-black font-medium rounded-md\">\n                {iconName ? (\n                  <DynamicIcon name={iconName} className=\"h-4 w-4\" />\n                ) : null}\n                <span className={iconName ? \"ml-2\" : \"\"}>{buttonText}</span>\n              </Link>\n            </Button>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n};\n"
    }
  ],
  "meta": {
    "component_name": "NewsletterSignup",
    "component_path": "/components/ui/newsletter-signup.tsx",
    "props": "NewsletterSignupProps",
    "props_path": "/components/ui/newsletter-signup.tsx",
    "original_file": "/components/ui/newsletter-signup.tsx",
    "transformed_at": "2025-09-22T19:17:27.385714",
    "category": "newsletter",
    "tags": [
      "lead-generation",
      "form-element",
      "animated",
      "responsive-mobile",
      "accessibility-optimized",
      "minimalist"
    ],
    "variations": [
      {
        "path": "/components/ui/newsletter-signup-variation1.tsx"
      }
    ],
    "created_at": "2025-09-22T19:17:27.385734",
    "install_url": "s3://registry-marketkore/registry/newsletter-signup.json"
  }
}