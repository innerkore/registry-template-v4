{
  "name": "testimonial",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/testimonial.tsx)",
  "title": "Testimonial",
  "files": [
    {
      "path": "/components/ui/testimonial.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\";\nimport { motion, PanInfo } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"@/components/Image\";\n\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface Testimonial {\n  id: number | string;\n  name: string;\n  avatar: ImageProps;\n  description: string;\n}\n\nexport interface TestimonialCarouselProps extends React.HTMLAttributes<HTMLDivElement> {\n  testimonials: Testimonial[];\n  showArrows?: boolean;\n  showDots?: boolean;\n  prevArrowLabel?: string;\n  nextArrowLabel?: string;\n  backgroundImage?: ImageProps;\n  backgroundColor?: string;\n}\n\nconst TestimonialCarousel = React.forwardRef<HTMLDivElement, TestimonialCarouselProps>(\n  (\n    {\n      className,\n      style,\n      testimonials,\n      showArrows,\n      showDots,\n      prevArrowLabel,\n      nextArrowLabel,\n      backgroundImage,\n      backgroundColor,\n      ...props\n    },\n    ref\n  ) => {\n    const [currentIndex, setCurrentIndex] = React.useState(0);\n    const [exitX, setExitX] = React.useState<number>(0);\n\n    const count = testimonials?.length ?? 0;\n\n    const handleDragEnd = (\n      _event: MouseEvent | TouchEvent | PointerEvent,\n      info: PanInfo\n    ) => {\n      if (count === 0) return;\n      if (Math.abs(info.offset.x) > 100) {\n        setExitX(info.offset.x);\n        setTimeout(() => {\n          setCurrentIndex((prev) => (prev + 1) % count);\n          setExitX(0);\n        }, 200);\n      }\n    };\n\n    const mergedStyle: React.CSSProperties = {\n      ...style,\n      ...(backgroundColor ? { backgroundColor } : {}),\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\"relative h-72 w-full flex items-center justify-center\", className)}\n        style={mergedStyle}\n        {...props}\n      >\n        {backgroundImage ? (\n          <div className=\"absolute inset-0 -z-10 overflow-hidden\">\n            <Image\n              {...backgroundImage}\n              className={cn(\"w-full h-full object-cover\", backgroundImage.className)}\n            />\n          </div>\n        ) : null}\n\n        <div className=\"relative w-80 h-64\">\n          {count > 0 &&\n            testimonials.map((testimonial, index) => {\n              const isCurrentCard = index === currentIndex;\n              const isPrevCard = index === (currentIndex + 1) % count;\n              const isNextCard = index === (currentIndex + 2) % count;\n\n              if (!isCurrentCard && !isPrevCard && !isNextCard) return null;\n\n              return (\n                <motion.div\n                  key={testimonial.id}\n                  className={cn(\n                    \"absolute w-full h-full rounded-2xl cursor-grab active:cursor-grabbing\",\n                    \"bg-white shadow-xl\",\n                    \"dark:bg-card dark:shadow-[2px_2px_4px_rgba(0,0,0,0.4),-1px_-1px_3px_rgba(255,255,255,0.1)]\"\n                  )}\n                  style={{\n                    zIndex: isCurrentCard ? 3 : isPrevCard ? 2 : 1,\n                  }}\n                  drag={isCurrentCard ? \"x\" : false}\n                  dragConstraints={{ left: 0, right: 0 }}\n                  dragElastic={0.7}\n                  onDragEnd={isCurrentCard ? handleDragEnd : undefined}\n                  initial={{\n                    scale: 0.95,\n                    opacity: 0,\n                    y: isCurrentCard ? 0 : isPrevCard ? 8 : 16,\n                    rotate: isCurrentCard ? 0 : isPrevCard ? -2 : -4,\n                  }}\n                  animate={{\n                    scale: isCurrentCard ? 1 : 0.95,\n                    opacity: isCurrentCard ? 1 : isPrevCard ? 0.6 : 0.3,\n                    x: isCurrentCard ? exitX : 0,\n                    y: isCurrentCard ? 0 : isPrevCard ? 8 : 16,\n                    rotate: isCurrentCard ? exitX / 20 : isPrevCard ? -2 : -4,\n                  }}\n                  transition={{\n                    type: \"spring\",\n                    stiffness: 300,\n                    damping: 20,\n                  }}\n                >\n                  {showArrows && (prevArrowLabel || nextArrowLabel) ? (\n                    <div className=\"absolute inset-x-0 top-2 flex justify-between px-4\">\n                      {prevArrowLabel ? (\n                        <span className=\"text-2xl select-none cursor-pointer text-gray-300 hover:text-gray-400 dark:text-muted-foreground dark:hover:text-primary\">\n                          {prevArrowLabel}\n                        </span>\n                      ) : (\n                        <span />\n                      )}\n                      {nextArrowLabel ? (\n                        <span className=\"text-2xl select-none cursor-pointer text-gray-300 hover:text-gray-400 dark:text-muted-foreground dark:hover:text-primary\">\n                          {nextArrowLabel}\n                        </span>\n                      ) : (\n                        <span />\n                      )}\n                    </div>\n                  ) : null}\n\n                  <div className=\"p-6 flex flex-col items-center gap-4\">\n                    <Image\n                      {...testimonial.avatar}\n                      className={cn(\n                        \"w-16 h-16 rounded-full object-cover\",\n                        testimonial.avatar.className\n                      )}\n                    />\n                    <h3 className=\"text-lg font-semibold text-gray-800 dark:text-foreground\">\n                      {testimonial.name}\n                    </h3>\n                    <p className=\"text-center text-sm text-gray-600 dark:text-muted-foreground\">\n                      {testimonial.description}\n                    </p>\n                  </div>\n                </motion.div>\n              );\n            })}\n\n          {showDots && count > 0 ? (\n            <div className=\"absolute -bottom-8 left-0 right-0 flex justify-center gap-2\">\n              {testimonials.map((_, index) => (\n                <div\n                  key={index}\n                  className={cn(\n                    \"w-2 h-2 rounded-full transition-colors\",\n                    index === currentIndex\n                      ? \"bg-blue-500 dark:bg-primary\"\n                      : \"bg-gray-300 dark:bg-muted-foreground/30\"\n                  )}\n                />\n              ))}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n);\n\nTestimonialCarousel.displayName = \"TestimonialCarousel\";\n\nexport { TestimonialCarousel };"
    }
  ],
  "meta": {
    "component_name": "TestimonialCarousel",
    "component_path": "/components/ui/testimonial.tsx",
    "props": "TestimonialCarouselProps",
    "props_path": "/components/ui/testimonial.tsx",
    "original_file": "/components/ui/testimonial.tsx",
    "transformed_at": "2025-09-22T18:58:16.039176",
    "category": "testimonials",
    "tags": [
      "social-proof",
      "mixed-media",
      "interactive",
      "responsive-mobile",
      "trust-building"
    ],
    "variations": [],
    "created_at": "2025-09-22T17:48:05.830059",
    "install_url": "s3://registry-marketkore/registry/testimonial.json"
  }
}