{
  "name": "Navigation Menu 4",
  "type": "registry:component",
  "description": "TypeScript component (transformed from src/components/ui/navigation-menu-4.tsx)",
  "title": "Navigation Menu 4",
  "files": [
    {
      "path": "src/components/ui/navigation-menu-4.tsx",
      "type": "registry:component",
      "content": "import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from \"@/components/ui/navigation-menu\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\n// Icon interface (as per guidelines)\ninterface Icon {\n  package: 'lucide';\n  name: string; // known lucide react icon-name only\n  type: 'icon';\n  className: string; // tailwind classes for styling\n}\n\n// ImageProps interface (as per guidelines)\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\n// LinkProps interface (as per guidelines)\ninterface LinkProps {\n  href: string;\n  target?: '_blank' | '_self';\n  className?: string;\n  rel?: string;\n}\n\n// Navigation item types\ntype NavBaseItem = LinkProps & { label: string };\n\ntype NavSimpleItem = NavBaseItem;\n\ntype NavDescriptionItem = NavBaseItem & {\n  description: string;\n};\n\ntype NavIconItem = NavBaseItem & {\n  icon: Icon;\n};\n\ntype NavSubmenuDescription = {\n  label: string;\n  submenu: true;\n  type: 'description';\n  items: NavDescriptionItem[];\n};\n\ntype NavSubmenuSimple = {\n  label: string;\n  submenu: true;\n  type: 'simple';\n  items: NavSimpleItem[];\n};\n\ntype NavSubmenuIcon = {\n  label: string;\n  submenu: true;\n  type: 'icon';\n  items: NavIconItem[];\n};\n\ntype NavSubmenu = NavSubmenuDescription | NavSubmenuSimple | NavSubmenuIcon;\n\ntype NavLink = (NavBaseItem & { submenu?: false }) | NavSubmenu;\n\nexport interface HeaderNavigationProps {\n  logoText: string;\n  logoHref: string;\n  navigationLinks: NavLink[];\n  signInLabel: string;\n  signInHref: string;\n  primaryCtaLabel: string;\n  primaryCtaHref: string;\n  backgroundColor?: string;\n  backgroundImage?: ImageProps;\n}\n\nexport default function HeaderNavigation({\n  logoText,\n  logoHref,\n  navigationLinks,\n  signInLabel,\n  signInHref,\n  primaryCtaLabel,\n  primaryCtaHref,\n  backgroundColor,\n  backgroundImage,\n}: HeaderNavigationProps) {\n  return (\n    <header\n      className={cn(\"border-b px-4 md:px-6 relative\")}\n      style={{ backgroundColor }}\n    >\n      {backgroundImage && (\n        <div className=\"absolute inset-0 -z-10\">\n          <Image\n            {...backgroundImage}\n            className={cn(\"h-full w-full object-cover\", backgroundImage.className)}\n          />\n        </div>\n      )}\n      <div className=\"flex h-16 items-center justify-between gap-4\">\n        {/* Left side */}\n        <div className=\"flex items-center gap-2\">\n          {/* Mobile menu trigger */}\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button className=\"group size-8 md:hidden\" variant=\"ghost\" size=\"icon\">\n                <svg\n                  className=\"pointer-events-none\"\n                  width={16}\n                  height={16}\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path\n                    d=\"M4 12L20 12\"\n                    className=\"origin-center -translate-y-[7px] transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.1)] group-aria-expanded:translate-x-0 group-aria-expanded:translate-y-0 group-aria-expanded:rotate-[315deg]\"\n                  />\n                  <path\n                    d=\"M4 12H20\"\n                    className=\"origin-center transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.8)] group-aria-expanded:rotate-45\"\n                  />\n                  <path\n                    d=\"M4 12H20\"\n                    className=\"origin-center translate-y-[7px] transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.1)] group-aria-expanded:translate-y-0 group-aria-expanded:rotate-[135deg]\"\n                  />\n                </svg>\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent align=\"start\" className=\"w-64 p-1 md:hidden\">\n              <NavigationMenu className=\"max-w-none *:w-full\">\n                <NavigationMenuList className=\"flex-col items-start gap-0 md:gap-2\">\n                  {navigationLinks.map((link, index) => (\n                    <NavigationMenuItem key={index} className=\"w-full\">\n                      {\"submenu\" in link && link.submenu ? (\n                        <>\n                          <div className=\"text-muted-foreground px-2 py-1.5 text-xs font-medium\">\n                            {link.label}\n                          </div>\n                          <ul>\n                            {link.items.map((item, itemIndex) => (\n                              <li key={itemIndex}>\n                                <NavigationMenuLink asChild>\n                                  <Link\n                                    href={item.href}\n                                    target={item.target}\n                                    rel={item.rel}\n                                    className=\"py-1.5\"\n                                  >\n                                    {item.label}\n                                  </Link>\n                                </NavigationMenuLink>\n                              </li>\n                            ))}\n                          </ul>\n                        </>\n                      ) : (\n                        <NavigationMenuLink asChild>\n                          <Link\n                            href={(link as NavBaseItem).href}\n                            target={(link as NavBaseItem).target}\n                            rel={(link as NavBaseItem).rel}\n                            className=\"py-1.5\"\n                          >\n                            {(link as NavBaseItem).label}\n                          </Link>\n                        </NavigationMenuLink>\n                      )}\n                      {/* Add separator between different types of items */}\n                      {index < navigationLinks.length - 1 &&\n                        (((!(\"submenu\" in link) || !link.submenu) &&\n                          (\"submenu\" in navigationLinks[index + 1] && (navigationLinks[index + 1] as NavSubmenu).submenu)) ||\n                          ((\"submenu\" in link && link.submenu) &&\n                            (!(\"submenu\" in navigationLinks[index + 1]) || !(navigationLinks[index + 1] as any).submenu)) ||\n                          ((\"submenu\" in link && link.submenu) &&\n                            (\"submenu\" in navigationLinks[index + 1] && (navigationLinks[index + 1] as NavSubmenu).submenu) &&\n                            (link as NavSubmenu).type !== (navigationLinks[index + 1] as NavSubmenu).type)) && (\n                          <div role=\"separator\" aria-orientation=\"horizontal\" className=\"bg-border -mx-1 my-1 h-px w-full\" />\n                        )}\n                    </NavigationMenuItem>\n                  ))}\n                </NavigationMenuList>\n              </NavigationMenu>\n            </PopoverContent>\n          </Popover>\n          {/* Main nav */}\n          <div className=\"flex items-center gap-6\">\n            <Link href={logoHref} className=\"text-primary hover:text-primary/90\">\n              {logoText}\n            </Link>\n            {/* Navigation menu */}\n            <div className=\"max-md:hidden\">\n              <NavigationMenu>\n                <NavigationMenuList>\n                  {navigationLinks.map((link, index) => (\n                    <NavigationMenuItem key={index}>\n                      {\"submenu\" in link && link.submenu ? (\n                        <>\n                          <NavigationMenuTrigger className=\"text-muted-foreground hover:text-primary bg-transparent px-2 py-1.5 font-medium\">\n                            {link.label}\n                          </NavigationMenuTrigger>\n                          <NavigationMenuContent>\n                            <ul\n                              className={cn(\n                                \"grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]\",\n                                link.type === \"description\" && \"md:grid-cols-1\"\n                              )}\n                            >\n                              {link.items.map((item, itemIndex) => (\n                                <li key={itemIndex}>\n                                  <NavigationMenuLink asChild>\n                                    <Link\n                                      href={item.href}\n                                      target={item.target}\n                                      rel={item.rel}\n                                      className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n                                    >\n                                      {link.type === \"icon\" && (\n                                        <div className=\"flex items-center gap-2\">\n                                          {/* Render dynamic icon */}\n                                          {\"icon\" in (item as NavIconItem) && (\n                                            <DynamicIcon\n                                              name={(item as NavIconItem).icon.name}\n                                              className={cn(\n                                                \"text-foreground opacity-60\",\n                                                (item as NavIconItem).icon.className\n                                              )}\n                                            />\n                                          )}\n                                          <div className=\"text-sm font-medium leading-none\">\n                                            {item.label}\n                                          </div>\n                                        </div>\n                                      )}\n\n                                      {link.type === \"description\" && (\n                                        <>\n                                          <div className=\"text-sm font-medium leading-none\">\n                                            {(item as NavDescriptionItem).label}\n                                          </div>\n                                          <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground\">\n                                            {(item as NavDescriptionItem).description}\n                                          </p>\n                                        </>\n                                      )}\n\n                                      {link.type === \"simple\" && (\n                                        <div className=\"text-sm font-medium leading-none\">\n                                          {item.label}\n                                        </div>\n                                      )}\n                                    </Link>\n                                  </NavigationMenuLink>\n                                </li>\n                              ))}\n                            </ul>\n                          </NavigationMenuContent>\n                        </>\n                      ) : (\n                        <NavigationMenuLink asChild>\n                          <Link\n                            href={(link as NavBaseItem).href}\n                            target={(link as NavBaseItem).target}\n                            rel={(link as NavBaseItem).rel}\n                            className=\"text-muted-foreground hover:text-primary py-1.5 px-2 font-medium\"\n                          >\n                            {(link as NavBaseItem).label}\n                          </Link>\n                        </NavigationMenuLink>\n                      )}\n                    </NavigationMenuItem>\n                  ))}\n                </NavigationMenuList>\n                <NavigationMenuViewport />\n              </NavigationMenu>\n            </div>\n          </div>\n        </div>\n        {/* Right side */}\n        <div className=\"flex items-center gap-2\">\n          <Button asChild variant=\"ghost\" size=\"sm\" className=\"text-sm\">\n            <Link href={signInHref}>{signInLabel}</Link>\n          </Button>\n          <Button asChild size=\"sm\" className=\"text-sm\">\n            <Link href={primaryCtaHref}>{primaryCtaLabel}</Link>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n"
    }
  ],
  "meta": {
    "component_name": "HeaderNavigation",
    "component_path": "src/components/ui/navigation-menu-4.tsx",
    "props": "HeaderNavigationProps",
    "props_path": "src/components/ui/navigation-menu-4.tsx",
    "original_file": "src/components/ui/navigation-menu-4.tsx",
    "transformed_at": "2025-09-22T19:16:26.466144",
    "category": "header",
    "tags": [
      "brand-awareness",
      "navigation-element",
      "responsive-mobile",
      "responsive-desktop",
      "interactive",
      "above-fold",
      "composite"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:16:26.466160"
  }
}