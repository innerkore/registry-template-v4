{
  "name": "modern-background-path",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from src/components/ui/modern-background-paths.tsx)",
  "title": "Modern Background Path",
  "files": [
    {
      "path": "src/components/ui/modern-background-paths.tsx",
      "type": "registry:ui",
      "content": "import { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { useState, useEffect } from \"react\";\nimport Link from \"@/components/Link\";\n\ninterface EnhancedBackgroundPathsProps {\n    title: string;\n    backgroundImage?: string;\n    backgroundColor?: string;\n}\n\nfunction GeometricPaths() {\n  const gridSize = 40;\n  const paths = [];\n\n  for (let x = 0; x < 20; x++) {\n    for (let y = 0; y < 12; y++) {\n      if (Math.random() > 0.7) {\n        paths.push({\n          id: `grid-${x}-${y}`,\n          d: `M${x * gridSize},${y * gridSize} L${(x + 1) * gridSize},${y * gridSize} L${(x + 1) * gridSize},${(y + 1) * gridSize} L${x * gridSize},${(y + 1) * gridSize} Z`,\n          delay: Math.random() * 5,\n        });\n      }\n    }\n  }\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-20\" viewBox=\"0 0 800 480\">\n      {paths.map((path) => (\n        <motion.path\n          key={path.id}\n          d={path.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"1\"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{ \n            pathLength: [0, 1, 0], \n            opacity: [0, 0.6, 0],\n            scale: [1, 1.05, 1]\n          }}\n          transition={{\n            duration: 8,\n            delay: path.delay,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nfunction FlowPaths() {\n  const flowPaths = Array.from({ length: 12 }, (_, i) => {\n    const amplitude = 50 + i * 10;\n    const frequency = 0.01 + i * 0.002;\n    const offset = i * 60;\n    return {\n      id: `flow-${i}`,\n      d: `M-100,${200 + offset} Q200,${200 + offset - amplitude} 500,${200 + offset} T900,${200 + offset}`,\n      strokeWidth: 1 + i * 0.3,\n      opacity: 0.1 + i * 0.05,\n      delay: i * 0.8\n    };\n  });\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-30\" viewBox=\"0 0 800 800\">\n      {flowPaths.map((path) => (\n        <motion.path\n          key={path.id}\n          d={path.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={path.strokeWidth}\n          strokeLinecap=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ \n            pathLength: [0, 1, 0.8, 0],\n            opacity: [0, path.opacity, path.opacity * 0.7, 0]\n          }}\n          transition={{\n            duration: 15,\n            delay: path.delay,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nfunction NeuralPaths() {\n  const nodes = Array.from({ length: 50 }, (_, i) => ({\n    x: Math.random() * 800,\n    y: Math.random() * 600,\n    id: `node-${i}`\n  }));\n\n  const connections = [];\n  nodes.forEach((node, i) => {\n    const nearbyNodes = nodes.filter((other, j) => {\n      if (i === j) return false;\n      const distance = Math.sqrt(Math.pow(node.x - other.x, 2) + Math.pow(node.y - other.y, 2));\n      return distance < 120 && Math.random() > 0.6;\n    });\n    nearbyNodes.forEach(target => {\n      connections.push({\n        id: `conn-${i}-${target.id}`,\n        d: `M${node.x},${node.y} L${target.x},${target.y}`,\n        delay: Math.random() * 10\n      });\n    });\n  });\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-15\" viewBox=\"0 0 800 600\">\n      {connections.map((conn) => (\n        <motion.path\n          key={conn.id}\n          d={conn.d}\n          stroke=\"currentColor\"\n          strokeWidth=\"0.5\"\n          fill=\"none\"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{ \n            pathLength: [0, 1, 0],\n            opacity: [0, 0.8, 0]\n          }}\n          transition={{\n            duration: 6,\n            delay: conn.delay,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n      {nodes.map((node) => (\n        <motion.circle\n          key={node.id}\n          cx={node.x}\n          cy={node.y}\n          r=\"2\"\n          fill=\"currentColor\"\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ \n            scale: [0, 1, 1.2, 1],\n            opacity: [0, 0.6, 0.8, 0.6]\n          }}\n          transition={{\n            duration: 4,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nfunction SpiralPaths() {\n  const spirals = Array.from({ length: 8 }, (_, i) => {\n    const centerX = 400 + (i % 4 - 1.5) * 200;\n    const centerY = 300 + Math.floor(i / 4 - 0.5) * 200;\n    const radius = 80 + i * 15;\n    const turns = 3 + i * 0.5;\n    let path = `M${centerX + radius},${centerY}`;\n    for (let angle = 0; angle <= turns * 360; angle += 5) {\n      const radian = (angle * Math.PI) / 180;\n      const currentRadius = radius * (1 - angle / (turns * 360));\n      const x = centerX + currentRadius * Math.cos(radian);\n      const y = centerY + currentRadius * Math.sin(radian);\n      path += ` L${x},${y}`;\n    }\n    return {\n      id: `spiral-${i}`,\n      d: path,\n      delay: i * 1.2\n    };\n  });\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-25\" viewBox=\"0 0 800 600\">\n      {spirals.map((spiral) => (\n        <motion.path\n          key={spiral.id}\n          d={spiral.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ \n            pathLength: [0, 1, 0],\n            rotate: [0, 360]\n          }}\n          transition={{\n            pathLength: { duration: 12, repeat: Infinity, ease: \"easeInOut\" },\n            rotate: { duration: 20, repeat: Infinity, ease: \"linear\" },\n            delay: spiral.delay\n          }}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport default function EnhancedBackgroundPaths({\n  title,\n  backgroundImage,\n  backgroundColor\n}: EnhancedBackgroundPathsProps) {\n  const [currentPattern, setCurrentPattern] = useState(0);\n  const patterns = ['neural', 'flow', 'geometric', 'spiral'];\n  const words = title.split(\" \");\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentPattern((prev) => (prev + 1) % patterns.length);\n    }, 12000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const renderPattern = () => {\n    switch (currentPattern) {\n      case 0: return <NeuralPaths />;\n      case 1: return <FlowPaths />;\n      case 2: return <GeometricPaths />;\n      case 3: return <SpiralPaths />;\n      default: return <NeuralPaths />;\n    }\n  };\n\n  return (\n    <div className={`relative min-h-screen w-full flex items-center justify-center overflow-hidden ${backgroundColor || 'bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900'} ${backgroundImage ? `bg-[url('${backgroundImage}')]` : ''}`}>  \n      <div className=\"absolute inset-0 text-slate-600 dark:text-slate-400\">\n        <motion.div\n          key={currentPattern}\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 2 }}\n        >\n          {renderPattern()}\n        </motion.div>\n      </div>\n      <div className=\"absolute inset-0 bg-gradient-to-t from-white/60 via-transparent to-white/60 dark:from-slate-900/60 dark:via-transparent dark:to-slate-900/60\" />\n      <div className=\"absolute top-8 right-8 flex gap-2 z-20\">\n        {patterns.map((_, i) => (\n          <motion.div\n            key={i}\n            className={`w-2 h-2 rounded-full transition-colors duration-300 ${\n              i === currentPattern \n                ? 'bg-slate-800 dark:bg-white' \n                : 'bg-slate-300 dark:bg-slate-600'\n            }`}\n            animate={{ \n              scale: i === currentPattern ? 1.2 : 1,\n              opacity: i === currentPattern ? 1 : 0.5\n            }}\n            transition={{ duration: 0.3 }}\n          />\n        ))}\n      </div>\n      <div className=\"relative z-10 container mx-auto px-4 md:px-6 text-center\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1.5, ease: \"easeOut\" }}\n          className=\"max-w-5xl mx-auto\"\n        >\n          <div className=\"mb-8\">\n            <h1 className=\"text-6xl sm:text-8xl md:text-9xl font-black mb-4 tracking-tighter leading-none\">\n              {words.map((word, wordIndex) => (\n                <span key={wordIndex} className=\"inline-block mr-6 last:mr-0\">\n                  {word.split(\"\").map((letter, letterIndex) => (\n                    <motion.span\n                      key={`${wordIndex}-${letterIndex}`}\n                      initial={{ y: 100, opacity: 0, rotateX: -90 }}\n                      animate={{ y: 0, opacity: 1, rotateX: 0 }}\n                      transition={{\n                        delay: wordIndex * 0.15 + letterIndex * 0.05,\n                        type: \"spring\",\n                        stiffness: 100,\n                        damping: 20,\n                        duration: 0.8\n                      }}\n                      className=\"inline-block text-transparent bg-clip-text \n                                          bg-gradient-to-br from-slate-900 via-slate-700 to-slate-500\n                                          dark:from-white dark:via-slate-200 dark:to-slate-400\n                                          hover:from-blue-600 hover:to-purple-600 dark:hover:from-blue-400 dark:hover:to-purple-400\n                                          transition-all duration-700 cursor-default\"\n                      whileHover={{ scale: 1.05, y: -2 }}\n                    >\n                      {letter}\n                    </motion.span>\n                  ))}\n                </span>\n              ))}\n            </h1>\n            <motion.p\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1, duration: 1 }}\n              className=\"text-xl md:text-2xl text-slate-600 dark:text-slate-300 font-light tracking-wide max-w-2xl mx-auto\"\n            >\n              Experience the future of interactive design with dynamic pattern generation\n            </motion.p>\n          </div>\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ delay: 1.5, duration: 0.8, type: \"spring\", stiffness: 100 }}\n            className=\"inline-block group\"\n          >\n            <div className=\"relative p-[2px] bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-2xl group-hover:from-blue-600 group-hover:via-purple-600 group-hover:to-pink-600 transition-all duration-300\">\n              <Button asChild variant=\"ghost\" size=\"lg\" className=\"relative rounded-[14px] px-12 py-6 text-lg font-semibold\n                            bg-white dark:bg-slate-900 hover:bg-slate-50 dark:hover:bg-slate-800\n                            text-slate-900 dark:text-white transition-all duration-300\n                            group-hover:-translate-y-1 group-hover:shadow-2xl\n                            border-0 backdrop-blur-sm\">\n                <Link href=\"/patterns\">Explore Patterns</Link>\n              </Button>\n            </div>\n          </motion.div>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 2, duration: 1 }}\n            className=\"mt-12 text-sm text-slate-500 dark:text-slate-400 font-mono tracking-wider\"\n          >\n            Current Pattern: <span className=\"text-slate-700 dark:text-slate-200 font-semibold capitalize\">{patterns[currentPattern]}</span>\n          </motion.div>\n        </motion.div>\n      </div>\n      <motion.div\n        className=\"absolute top-1/4 left-1/4 w-4 h-4 bg-blue-500/20 rounded-full blur-sm\"\n        animate={{\n          y: [0, -20, 0],\n          x: [0, 10, 0],\n          scale: [1, 1.2, 1],\n          opacity: [0.3, 0.7, 0.3]\n        }}\n        transition={{ duration: 6, repeat: Infinity, ease: \"easeInOut\" }}\n      />\n      <motion.div\n        className=\"absolute top-3/4 right-1/3 w-6 h-6 bg-purple-500/20 rounded-full blur-sm\"\n        animate={{\n          y: [0, 15, 0],\n          x: [0, -15, 0],\n          scale: [1, 0.8, 1],\n          opacity: [0.5, 0.8, 0.5]\n        }}\n        transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\", delay: 2 }}\n      />\n    </div>\n  );\n}"
    }
  ],
  "meta": {
    "component_name": "EnhancedBackgroundPaths",
    "component_path": "src/components/ui/modern-background-paths.tsx",
    "props": "EnhancedBackgroundPathsProps",
    "props_path": "src/components/ui/modern-background-paths.tsx",
    "original_file": "src/components/ui/modern-background-paths.tsx",
    "transformed_at": "2025-09-18T21:47:44.600760",
    "category": "hero",
    "tags": [
      "action-trigger",
      "visual-dominant",
      "mixed-media",
      "dynamic-content",
      "above-fold",
      "branding-focused"
    ],
    "variations": [],
    "created_at": "2025-09-18T21:47:44.600785"
  }
}