{
  "name": "process-timeline",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/process-timeline.tsx)",
  "title": "Process Timeline",
  "files": [
    {
      "path": "/components/blocks/process-timeline.tsx",
      "type": "registry:block",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { useMeasure } from \"@uidotdev/usehooks\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport {\n  HTMLMotionProps,\n  MotionValue,\n  motion,\n  useScroll,\n  useTransform,\n} from \"motion/react\"\n\nimport Image from \"@/components/Image\"\nimport { cn } from \"@/lib/utils\"\n\nconst processCardVariants = cva(\"flex border backdrop-blur-lg\", {\n  variants: {\n    variant: {\n      indigo:\n        \"flex border text-slate-50 border-slate-700 backdrop-blur-lg bg-gradient-to-br from-[rgba(15,23,42,0.7)_40%] to-[#3730a3_120%]\",\n      light: \"shadow\",\n    },\n    size: {\n      sm: \"min-w-[25%] max-w-[25%]\",\n      md: \"min-w-[50%] max-w-[50%]\",\n      lg: \"min-w-[75%] max-w-[75%]\",\n      xl: \"min-w-full max-w-full\",\n    },\n  },\n})\n\ninterface ImageProps {\n  src: string\n  alt: string\n  width: number\n  height: number\n  priority?: boolean\n  quality?: number\n  sizes?: string\n  fill?: boolean\n  className?: string\n  placeholder?: string\n}\n\ninterface ContainerScrollContextValue {\n  scrollYProgress: MotionValue<number>\n}\n\nexport interface ContainerScrollProps\n  extends React.HTMLAttributes<HTMLDivElement> {\n  backgroundImage?: ImageProps\n  backgroundColor?: string\n}\n\nexport interface ContainerStickyProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport interface ProcessCardTitleProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport interface ProcessCardBodyProps\n  extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport interface ProcessCardProps\n  extends HTMLMotionProps<\"div\">,\n    VariantProps<typeof processCardVariants> {\n  itemsLength: number\n  index: number\n}\n\nconst ContainerScrollContext = React.createContext<\n  ContainerScrollContextValue | undefined\n>(undefined)\n\nfunction useContainerScrollContext() {\n  const context = React.useContext(ContainerScrollContext)\n  if (!context) {\n    throw new Error(\n      \"useContainerScrollContext must be used within a ContainerScroll Component\"\n    )\n  }\n  return context\n}\n\nexport const ContainerScroll: React.FC<ContainerScrollProps> = ({\n  children,\n  className,\n  backgroundImage,\n  backgroundColor,\n  style,\n  ...props\n}) => {\n  const scrollRef = React.useRef<HTMLDivElement>(null)\n  const { scrollYProgress } = useScroll({\n    target: scrollRef,\n  })\n\n  return (\n    <ContainerScrollContext.Provider value={{ scrollYProgress }}>\n      <div\n        ref={scrollRef}\n        className={cn(\"relative min-h-[120vh]\", className)}\n        style={{ backgroundColor, ...style }}\n        {...props}\n      >\n        {backgroundImage ? (\n          <Image\n            {...backgroundImage}\n            className={cn(\n              \"absolute inset-0 -z-10 h-full w-full object-cover\",\n              backgroundImage.className\n            )}\n          />\n        ) : null}\n        {children}\n      </div>\n    </ContainerScrollContext.Provider>\n  )\n}\n\nexport const ContainerSticky = React.forwardRef<HTMLDivElement, ContainerStickyProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\"sticky left-0 top-0 w-full overflow-hidden\", className)}\n      {...props}\n    />\n  )\n)\nContainerSticky.displayName = \"ContainerSticky\"\n\nexport const ProcessCardTitle = React.forwardRef<HTMLDivElement, ProcessCardTitleProps>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6\", className)} {...props} />\n  )\n)\nProcessCardTitle.displayName = \"ProcessCardTitle\"\n\nexport const ProcessCardBody = React.forwardRef<HTMLDivElement, ProcessCardBodyProps>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\"flex flex-col gap-8 p-6\", className)}\n      {...props}\n    />\n  )\n)\nProcessCardBody.displayName = \"ProcessCardBody\"\n\nexport const ProcessCard: React.FC<ProcessCardProps> = ({\n  className,\n  style,\n  variant,\n  size,\n  itemsLength,\n  index,\n  ...props\n}) => {\n  const { scrollYProgress } = useContainerScrollContext()\n  const start = index / itemsLength\n  const end = start + 1 / itemsLength\n  const innerWidth = typeof window !== \"undefined\" ? window.innerWidth : 0\n  const [ref, { width }] = useMeasure<HTMLDivElement>()\n\n  const x = useTransform(\n    scrollYProgress,\n    [start, end],\n    [innerWidth, -((width ?? 0) * index) + 64 * index]\n  )\n\n  return (\n    <motion.div\n      ref={ref}\n      style={{\n        x: index > 0 ? x : 0,\n        ...style,\n      }}\n      className={cn(processCardVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n}\nProcessCard.displayName = \"ProcessCard\"\n"
    }
  ],
  "meta": {
    "component_name": "ProcessScroll",
    "component_path": "/components/blocks/process-timeline.tsx",
    "props": "ContainerScrollProps, ContainerStickyProps, ProcessCardTitleProps, ProcessCardBodyProps, ProcessCardProps",
    "props_path": "/components/blocks/process-timeline.tsx",
    "original_file": "/components/blocks/process-timeline.tsx",
    "transformed_at": "2025-09-22T20:07:03.045420",
    "category": "process",
    "tags": [
      "engagement",
      "content-container",
      "animated",
      "interactive",
      "responsive-mobile"
    ],
    "variations": [],
    "created_at": "2025-09-22T20:07:03.045438",
    "install_url": "s3://registry-marketkore/registry/process-timeline.json"
  }
}