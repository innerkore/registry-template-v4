{
  "name": "typewriter-effect",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/typewriter-effect.tsx)",
  "title": "Typewriter Effect",
  "files": [
    {
      "path": "/components/ui/typewriter-effect.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport React, { useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, stagger, useAnimate, useInView } from \"framer-motion\";\n\nexport interface TypewriterWord {\n  text: string;\n  className?: string;\n}\n\nexport interface TypewriterEffectProps {\n  words: TypewriterWord[];\n  className?: string;\n  cursorClassName?: string;\n  backgroundImage?: string;\n  backgroundColor?: string;\n}\n\nexport const TypewriterEffect: React.FC<TypewriterEffectProps> = ({\n  words,\n  className,\n  cursorClassName,\n  backgroundImage,\n  backgroundColor,\n}) => {\n  const wordsArray = words.map((word) => ({\n    ...word,\n    text: word.text.split(\"\"),\n  }));\n\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n\n  useEffect(() => {\n    if (isInView) {\n      animate(\n        \"span\",\n        {\n          display: \"inline-block\",\n          opacity: 1,\n          width: \"fit-content\",\n        },\n        {\n          duration: 0.3,\n          delay: stagger(0.1),\n          ease: \"easeInOut\",\n        }\n      );\n    }\n  }, [isInView, animate]);\n\n  return (\n    <div\n      className={cn(\n        \"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\",\n        className\n      )}\n      style={{\n        backgroundImage: backgroundImage ? `url(${backgroundImage})` : undefined,\n        backgroundColor,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n      }}\n    >\n      <motion.div ref={scope} className=\"inline\">\n        {wordsArray.map((word, idx) => (\n          <div key={`word-${idx}`} className=\"inline-block\">\n            {word.text.map((char, index) => (\n              <motion.span\n                initial={{}}\n                key={`char-${index}`}\n                className={cn(\n                  \"dark:text-white text-black opacity-0 hidden\",\n                  word.className\n                )}\n              >\n                {char}\n              </motion.span>\n            ))}\n            &nbsp;\n          </div>\n        ))}\n      </motion.div>\n      <motion.span\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          duration: 0.8,\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n        className={cn(\n          \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10 bg-blue-500\",\n          cursorClassName\n        )}\n      />\n    </div>\n  );\n};\n\nexport default TypewriterEffect;\n"
    },
    {
      "path": "/components/ui/typewriter-effect-variation1.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\nexport interface TypewriterWord {\n  text: string;\n  className?: string;\n}\n\nexport interface TypewriterEffectSmoothProps {\n  words: TypewriterWord[];\n  className?: string;\n  cursorClassName?: string;\n  backgroundImage?: string;\n  backgroundColor?: string;\n}\n\nexport const TypewriterEffectSmooth: React.FC<TypewriterEffectSmoothProps> = ({\n  words,\n  className,\n  cursorClassName,\n  backgroundImage,\n  backgroundColor,\n}) => {\n  const wordsArray = words.map((word) => ({\n    ...word,\n    text: word.text.split(\"\"),\n  }));\n\n  return (\n    <div\n      className={cn(\"flex space-x-1 my-6\", className)}\n      style={{\n        backgroundImage: backgroundImage ? `url(${backgroundImage})` : undefined,\n        backgroundColor,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n      }}\n    >\n      <motion.div\n        className=\"overflow-hidden pb-2\"\n        initial={{ width: \"0%\" }}\n        whileInView={{ width: \"fit-content\" }}\n        transition={{\n          duration: 2,\n          ease: \"linear\",\n          delay: 1,\n        }}\n      >\n        <div\n          className=\"text-xs sm:text-base md:text-xl lg:text-3xl xl:text-5xl font-bold\"\n          style={{ whiteSpace: \"nowrap\" }}\n        >\n          <div>\n            {wordsArray.map((word, idx) => (\n              <div key={`word-${idx}`} className=\"inline-block\">\n                {word.text.map((char, index) => (\n                  <span\n                    key={`char-${index}`}\n                    className={cn(\"dark:text-white text-black\", word.className)}\n                  >\n                    {char}\n                  </span>\n                ))}\n                &nbsp;\n              </div>\n            ))}\n          </div>\n        </div>\n      </motion.div>\n      <motion.span\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          duration: 0.8,\n          repeat: Infinity,\n          repeatType: \"reverse\",\n        }}\n        className={cn(\n          \"block rounded-sm w-[4px] h-4 sm:h-6 xl:h-12 bg-blue-500\",\n          cursorClassName\n        )}\n      />\n    </div>\n  );\n};\n\nexport default TypewriterEffectSmooth;\n"
    }
  ],
  "meta": {
    "component_name": "TypewriterEffect",
    "component_path": "/components/ui/typewriter-effect.tsx",
    "props": "TypewriterEffectProps",
    "props_path": "/components/ui/typewriter-effect.tsx",
    "original_file": "/components/ui/typewriter-effect.tsx",
    "transformed_at": "2025-09-22T17:46:51.192072",
    "category": "hero",
    "tags": [
      "brand-awareness",
      "text-heavy",
      "animated",
      "responsive-mobile",
      "above-fold",
      "awareness-stage"
    ],
    "variations": [
      {
        "path": "/components/ui/typewriter-effect-variation1.tsx"
      }
    ],
    "created_at": "2025-09-22T17:46:51.192089"
  }
}