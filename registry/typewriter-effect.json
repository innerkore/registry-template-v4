{
  "name": "typewriter-effect",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/typewriter-effect-variation1.tsx)",
  "title": "Typewriter Effect",
  "files": [
    {
      "path": "/components/ui/typewriter-effect.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, stagger, useAnimate, useInView } from \"framer-motion\";\nimport { useEffect, useMemo } from \"react\";\nimport Image from \"@/components/Image\";\n\nexport interface Word {\n  text: string;\n  className?: string;\n}\n\nexport type BackgroundImageProps = {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n};\n\nexport interface TypewriterEffectProps {\n  words: Word[];\n  className?: string;\n  cursorClassName?: string;\n  backgroundColor?: string;\n  backgroundImage?: BackgroundImageProps;\n}\n\nexport function TypewriterEffect({\n  words,\n  className,\n  cursorClassName,\n  backgroundColor,\n  backgroundImage,\n}: TypewriterEffectProps) {\n  const wordsArray = useMemo(\n    () =>\n      words.map((word) => ({\n        ...word,\n        text: word.text.split(\"\"),\n      })),\n    [words]\n  );\n\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n\n  useEffect(() => {\n    if (isInView) {\n      animate(\n        \"span\",\n        {\n          display: \"inline-block\",\n          opacity: 1,\n          width: \"fit-content\",\n        },\n        {\n          duration: 0.3,\n          delay: stagger(0.1),\n          ease: \"easeInOut\",\n        }\n      );\n    }\n  }, [isInView, animate]);\n\n  const renderWords = () => {\n    return (\n      <motion.div ref={scope} className=\"inline\">\n        {wordsArray.map((word, idx) => (\n          <div key={`word-${idx}`} className=\"inline-block\">\n            {word.text.map((char: string, index: number) => (\n              <motion.span\n                initial={{}}\n                key={`char-${index}`}\n                className={cn(\n                  \"dark:text-white text-black opacity-0 hidden\",\n                  word.className\n                )}\n              >\n                {char}\n              </motion.span>\n            ))}\n            &nbsp;\n          </div>\n        ))}\n      </motion.div>\n    );\n  };\n\n  return (\n    <div\n      className={cn(\"relative\", className)}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage ? (\n        <div className=\"absolute inset-0 -z-10 pointer-events-none overflow-hidden\">\n          <Image {...backgroundImage} />\n        </div>\n      ) : null}\n\n      <div className={cn(\"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\")}\n      >\n        {renderWords()}\n        <motion.span\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, repeat: Infinity, repeatType: \"reverse\" }}\n          className={cn(\n            \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10 bg-blue-500\",\n            cursorClassName\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TypewriterEffect;\n"
    },
    {
      "path": "/components/ui/typewriter-effect-variation1.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\nimport { useMemo } from \"react\";\nimport Image from \"@/components/Image\";\n\nexport interface Word {\n  text: string;\n  className?: string;\n}\n\nexport type BackgroundImageProps = {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n};\n\nexport interface TypewriterEffectSmoothProps {\n  words: Word[];\n  className?: string;\n  cursorClassName?: string;\n  backgroundColor?: string;\n  backgroundImage?: BackgroundImageProps;\n}\n\nexport function TypewriterEffectSmooth({\n  words,\n  className,\n  cursorClassName,\n  backgroundColor,\n  backgroundImage,\n}: TypewriterEffectSmoothProps) {\n  const wordsArray = useMemo(\n    () =>\n      words.map((word) => ({\n        ...word,\n        text: word.text.split(\"\"),\n      })),\n    [words]\n  );\n\n  const renderWords = () => {\n    return (\n      <div>\n        {wordsArray.map((word, idx) => (\n          <div key={`word-${idx}`} className=\"inline-block\">\n            {word.text.map((char: string, index: number) => (\n              <span\n                key={`char-${index}`}\n                className={cn(\"dark:text-white text-black\", word.className)}\n              >\n                {char}\n              </span>\n            ))}\n            &nbsp;\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className={cn(\"relative\", className)}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage ? (\n        <div className=\"absolute inset-0 -z-10 pointer-events-none overflow-hidden\">\n          <Image {...backgroundImage} />\n        </div>\n      ) : null}\n\n      <div className={cn(\"flex space-x-1 my-6\")}\n      >\n        <motion.div\n          className=\"overflow-hidden pb-2\"\n          initial={{ width: \"0%\" }}\n          whileInView={{ width: \"fit-content\" }}\n          transition={{ duration: 2, ease: \"linear\", delay: 1 }}\n        >\n          <div\n            className=\"text-xs sm:text-base md:text-xl lg:text-3xl xl:text-5xl font-bold\"\n            style={{ whiteSpace: \"nowrap\" }}\n          >\n            {renderWords()}\n          </div>\n        </motion.div>\n        <motion.span\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, repeat: Infinity, repeatType: \"reverse\" }}\n          className={cn(\n            \"block rounded-sm w-[4px] h-4 sm:h-6 xl:h-12 bg-blue-500\",\n            cursorClassName\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TypewriterEffectSmooth;\n"
    }
  ],
  "meta": {
    "component_name": "TypewriterEffect",
    "component_path": "/components/ui/typewriter-effect.tsx",
    "props": "TypewriterEffectProps",
    "props_path": "/components/ui/typewriter-effect.tsx",
    "original_file": "/components/ui/typewriter-effect.tsx",
    "transformed_at": "2025-09-22T18:57:28.005169",
    "category": "hero",
    "tags": [
      "brand-awareness",
      "text-heavy",
      "animated",
      "responsive-mobile",
      "above-fold",
      "minimalist"
    ],
    "variations": [
      {
        "path": "/components/ui/typewriter-effect-variation1.tsx"
      }
    ],
    "created_at": "2025-09-22T17:46:51.192089",
    "install_url": "s3://registry-marketkore/registry/typewriter-effect.json"
  }
}