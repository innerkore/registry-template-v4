{
  "name": "pricing-section",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/pricing-section.tsx)",
  "title": "Pricing Section",
  "files": [
    {
      "path": "/components/blocks/pricing-section.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\n// Icon interface (per guidelines)\ninterface Icon {\n  package: \"lucide\";\n  name: string; // lucide-react icon name\n  type: \"icon\";\n  className: string; // tailwind classes\n}\n\n// Image interface (per guidelines)\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\n// Link interface (per guidelines)\ninterface LinkProps {\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  className?: string;\n  rel?: string;\n}\n\ninterface Feature {\n  name: string;\n  description: string;\n  included: boolean;\n  icon: Icon; // icon for the feature row\n}\n\ninterface CTALink extends LinkProps {\n  label: string;\n  icon?: Icon;\n}\n\ninterface PricingTier {\n  name: string;\n  price: {\n    monthly: number;\n    yearly: number;\n  };\n  description: string;\n  features: Feature[];\n  highlight?: boolean;\n  badge?: string;\n  icon: Icon; // top-left tier icon\n  cta: CTALink; // button link for the tier\n}\n\nexport interface PricingSectionProps {\n  heading: string; // e.g., \"Simple, transparent pricing\"\n  toggleLabels: { monthly: string; yearly: string }; // e.g., { monthly: \"Monthly\", yearly: \"Yearly\" }\n  periodSuffix: { monthly: string; yearly: string }; // e.g., { monthly: \"month\", yearly: \"year\" }\n  currencySymbol: string; // e.g., \"$\"\n  tiers: PricingTier[];\n  backgroundImage?: ImageProps; // optional background image\n  backgroundColor?: string; // optional background color (e.g., \"#fff\" or tailwind via style override)\n  className?: string;\n}\n\nfunction PricingSection({\n  heading,\n  toggleLabels,\n  periodSuffix,\n  currencySymbol,\n  tiers,\n  backgroundImage,\n  backgroundColor,\n  className,\n}: PricingSectionProps) {\n  const [isYearly, setIsYearly] = useState(false);\n\n  const buttonStyles = {\n    default: cn(\n      \"h-12 bg-white dark:bg-zinc-900\",\n      \"hover:bg-zinc-50 dark:hover:bg-zinc-800\",\n      \"text-zinc-900 dark:text-zinc-100\",\n      \"border border-zinc-200 dark:border-zinc-800\",\n      \"hover:border-zinc-300 dark:hover:border-zinc-700\",\n      \"shadow-sm hover:shadow-md\",\n      \"text-sm font-medium\"\n    ),\n    highlight: cn(\n      \"h-12 bg-zinc-900 dark:bg-zinc-100\",\n      \"hover:bg-zinc-800 dark:hover:bg-zinc-300\",\n      \"text-white dark:text-zinc-900\",\n      \"shadow-[0_1px_15px_rgba(0,0,0,0.1)]\",\n      \"hover:shadow-[0_1px_20px_rgba(0,0,0,0.15)]\",\n      \"font-semibold text-base\"\n    ),\n  } as const;\n\n  const badgeStyles = cn(\n    \"px-4 py-1.5 text-sm font-medium\",\n    \"bg-zinc-900 dark:bg-zinc-100\",\n    \"text-white dark:text-zinc-900\",\n    \"border-none shadow-lg\"\n  );\n\n  const periods: Array<\"monthly\" | \"yearly\"> = [\"monthly\", \"yearly\"];\n\n  return (\n    <section\n      className={cn(\n        \"relative bg-background text-foreground\",\n        \"py-12 px-4 md:py-24 lg:py-32\",\n        \"overflow-hidden\",\n        className\n      )}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\n            \"absolute inset-0 -z-10 object-cover\",\n            backgroundImage.className\n          )}\n        />\n      ) : null}\n\n      <div className=\"w-full max-w-5xl mx-auto\">\n        <div className=\"flex flex-col items-center gap-4 mb-12\">\n          <h2 className=\"text-3xl font-bold text-zinc-900 dark:text-zinc-50\">{heading}</h2>\n\n          <div className=\"inline-flex items-center p-1.5 bg-white dark:bg-zinc-800/50 rounded-full border border-zinc-200 dark:border-zinc-700 shadow-sm\">\n            {periods.map((period) => (\n              <button\n                key={period}\n                type=\"button\"\n                onClick={() => setIsYearly(period === \"yearly\")}\n                aria-pressed={isYearly === (period === \"yearly\")}\n                className={cn(\n                  \"px-8 py-2.5 text-sm font-medium rounded-full transition-all duration-300\",\n                  (period === \"yearly\") === isYearly\n                    ? \"bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900 shadow-lg\"\n                    : \"text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100\"\n                )}\n              >\n                {period === \"monthly\" ? toggleLabels.monthly : toggleLabels.yearly}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {tiers.map((tier) => (\n            <div\n              key={tier.name}\n              className={cn(\n                \"relative group backdrop-blur-sm\",\n                \"rounded-3xl transition-all duration-300\",\n                \"flex flex-col\",\n                tier.highlight\n                  ? \"bg-gradient-to-b from-zinc-100/80 to-transparent dark:from-zinc-400/[0.15]\"\n                  : \"bg-white dark:bg-zinc-800/50\",\n                \"border\",\n                tier.highlight\n                  ? \"border-zinc-400/50 dark:border-zinc-400/20 shadow-xl\"\n                  : \"border-zinc-200 dark:border-zinc-700 shadow-md\",\n                \"hover:translate-y-0 hover:shadow-lg\"\n              )}\n            >\n              {tier.badge && tier.highlight ? (\n                <div className=\"absolute -top-4 left-6\">\n                  <Badge className={badgeStyles}>{tier.badge}</Badge>\n                </div>\n              ) : null}\n\n              <div className=\"p-8 flex-1\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div\n                    className={cn(\n                      \"p-3 rounded-xl\",\n                      tier.highlight\n                        ? \"bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100\"\n                        : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-600 dark:text-zinc-400\"\n                    )}\n                  >\n                    <DynamicIcon name={tier.icon.name} className={tier.icon.className} />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-zinc-900 dark:text-zinc-100\">{tier.name}</h3>\n                </div>\n\n                <div className=\"mb-6\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-4xl font-bold text-zinc-900 dark:text-zinc-100\">\n                      {currencySymbol}\n                      {isYearly ? tier.price.yearly : tier.price.monthly}\n                    </span>\n                    <span className=\"text-sm text-zinc-500 dark:text-zinc-400\">\n                      /{isYearly ? periodSuffix.yearly : periodSuffix.monthly}\n                    </span>\n                  </div>\n                  <p className=\"mt-2 text-sm text-zinc-600 dark:text-zinc-400\">{tier.description}</p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {tier.features.map((feature) => (\n                    <div key={feature.name} className=\"flex gap-4\">\n                      <div\n                        className={cn(\n                          \"mt-1 p-0.5 rounded-full transition-colors duration-200\",\n                          feature.included\n                            ? \"text-emerald-600 dark:text-emerald-400\"\n                            : \"text-zinc-400 dark:text-zinc-600\"\n                        )}\n                      >\n                        <DynamicIcon\n                          name={feature.icon.name}\n                          className={cn(\"w-4 h-4\", feature.icon.className)}\n                        />\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">{feature.name}</div>\n                        <div className=\"text-sm text-zinc-500 dark:text-zinc-400\">{feature.description}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"p-8 pt-0 mt-auto\">\n                <Button\n                  asChild\n                  className={cn(\n                    \"w-full relative transition-all duration-300\",\n                    tier.highlight ? buttonStyles.highlight : buttonStyles.default\n                  )}\n                >\n                  <Link href={tier.cta.href} target={tier.cta.target} rel={tier.cta.rel} className=\"relative z-10 flex items-center justify-center gap-2\">\n                    {tier.cta.label}\n                    {tier.cta.icon ? (\n                      <DynamicIcon name={tier.cta.icon.name} className={tier.cta.icon.className} />\n                    ) : null}\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport { PricingSection };"
    }
  ],
  "meta": {
    "component_name": "PricingSection",
    "component_path": "/components/blocks/pricing-section.tsx",
    "props": "PricingSectionProps",
    "props_path": "/components/blocks/pricing-section.tsx",
    "original_file": "/components/blocks/pricing-section.tsx",
    "transformed_at": "2025-09-22T19:10:30.177471",
    "category": "pricing",
    "tags": [
      "conversion-focused",
      "content-container",
      "interactive",
      "responsive-mobile",
      "decision-stage"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:10:30.177488"
  }
}