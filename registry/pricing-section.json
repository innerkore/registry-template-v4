{
  "name": "pricing-section",
  "type": "registry:block",
  "dependencies": [
    "@radix-ui/react-icons",
    "class-variance-authority",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "https://21st.dev/r/shadcn/badge",
    "https://21st.dev/r/shadcn/button"
  ],
  "files": [
    {
      "path": "/components/blocks/pricing-section.tsx",
      "type": "registry:block",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ArrowRightIcon, CheckIcon } from \"@radix-ui/react-icons\"\nimport { cn } from \"@/lib/utils\"\n\ninterface Feature {\n  name: string\n  description: string\n  included: boolean\n}\n\ninterface PricingTier {\n  name: string\n  price: {\n    monthly: number\n    yearly: number\n  }\n  description: string\n  features: Feature[]\n  highlight?: boolean\n  badge?: string\n  icon: React.ReactNode\n}\n\ninterface PricingSectionProps {\n  tiers: PricingTier[]\n  className?: string\n}\n\nfunction PricingSection({ tiers, className }: PricingSectionProps) {\n  const [isYearly, setIsYearly] = useState(false)\n\n  const buttonStyles = {\n    default: cn(\n      \"h-12 bg-white dark:bg-zinc-900\",\n      \"hover:bg-zinc-50 dark:hover:bg-zinc-800\",\n      \"text-zinc-900 dark:text-zinc-100\",\n      \"border border-zinc-200 dark:border-zinc-800\",\n      \"hover:border-zinc-300 dark:hover:border-zinc-700\",\n      \"shadow-sm hover:shadow-md\",\n      \"text-sm font-medium\",\n    ),\n    highlight: cn(\n      \"h-12 bg-zinc-900 dark:bg-zinc-100\",\n      \"hover:bg-zinc-800 dark:hover:bg-zinc-300\",\n      \"text-white dark:text-zinc-900\",\n      \"shadow-[0_1px_15px_rgba(0,0,0,0.1)]\",\n      \"hover:shadow-[0_1px_20px_rgba(0,0,0,0.15)]\",\n      \"font-semibold text-base\",\n    ),\n  }\n\n  const badgeStyles = cn(\n    \"px-4 py-1.5 text-sm font-medium\",\n    \"bg-zinc-900 dark:bg-zinc-100\",\n    \"text-white dark:text-zinc-900\",\n    \"border-none shadow-lg\",\n  )\n\n  return (\n    <section\n      className={cn(\n        \"relative bg-background text-foreground\",\n        \"py-12 px-4 md:py-24 lg:py-32\",\n        \"overflow-hidden\",\n        className,\n      )}\n    >\n      <div className=\"w-full max-w-5xl mx-auto\">\n        <div className=\"flex flex-col items-center gap-4 mb-12\">\n          <h2 className=\"text-3xl font-bold text-zinc-900 dark:text-zinc-50\">\n            Simple, transparent pricing\n          </h2>\n          <div className=\"inline-flex items-center p-1.5 bg-white dark:bg-zinc-800/50 rounded-full border border-zinc-200 dark:border-zinc-700 shadow-sm\">\n            {[\"Monthly\", \"Yearly\"].map((period) => (\n              <button\n                key={period}\n                onClick={() => setIsYearly(period === \"Yearly\")}\n                className={cn(\n                  \"px-8 py-2.5 text-sm font-medium rounded-full transition-all duration-300\",\n                  (period === \"Yearly\") === isYearly\n                    ? \"bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900 shadow-lg\"\n                    : \"text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100\",\n                )}\n              >\n                {period}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {tiers.map((tier) => (\n            <div\n              key={tier.name}\n              className={cn(\n                \"relative group backdrop-blur-sm\",\n                \"rounded-3xl transition-all duration-300\",\n                \"flex flex-col\",\n                tier.highlight\n                  ? \"bg-gradient-to-b from-zinc-100/80 to-transparent dark:from-zinc-400/[0.15]\"\n                  : \"bg-white dark:bg-zinc-800/50\",\n                \"border\",\n                tier.highlight\n                  ? \"border-zinc-400/50 dark:border-zinc-400/20 shadow-xl\"\n                  : \"border-zinc-200 dark:border-zinc-700 shadow-md\",\n                \"hover:translate-y-0 hover:shadow-lg\",\n              )}\n            >\n              {tier.badge && tier.highlight && (\n                <div className=\"absolute -top-4 left-6\">\n                  <Badge className={badgeStyles}>{tier.badge}</Badge>\n                </div>\n              )}\n\n              <div className=\"p-8 flex-1\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div\n                    className={cn(\n                      \"p-3 rounded-xl\",\n                      tier.highlight\n                        ? \"bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-zinc-100\"\n                        : \"bg-zinc-100 dark:bg-zinc-800 text-zinc-600 dark:text-zinc-400\",\n                    )}\n                  >\n                    {tier.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-zinc-900 dark:text-zinc-100\">\n                    {tier.name}\n                  </h3>\n                </div>\n\n                <div className=\"mb-6\">\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-4xl font-bold text-zinc-900 dark:text-zinc-100\">\n                      ${isYearly ? tier.price.yearly : tier.price.monthly}\n                    </span>\n                    <span className=\"text-sm text-zinc-500 dark:text-zinc-400\">\n                      /{isYearly ? \"year\" : \"month\"}\n                    </span>\n                  </div>\n                  <p className=\"mt-2 text-sm text-zinc-600 dark:text-zinc-400\">\n                    {tier.description}\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {tier.features.map((feature) => (\n                    <div key={feature.name} className=\"flex gap-4\">\n                      <div\n                        className={cn(\n                          \"mt-1 p-0.5 rounded-full transition-colors duration-200\",\n                          feature.included\n                            ? \"text-emerald-600 dark:text-emerald-400\"\n                            : \"text-zinc-400 dark:text-zinc-600\",\n                        )}\n                      >\n                        <CheckIcon className=\"w-4 h-4\" />\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-zinc-900 dark:text-zinc-100\">\n                          {feature.name}\n                        </div>\n                        <div className=\"text-sm text-zinc-500 dark:text-zinc-400\">\n                          {feature.description}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"p-8 pt-0 mt-auto\">\n                <Button\n                  className={cn(\n                    \"w-full relative transition-all duration-300\",\n                    tier.highlight\n                      ? buttonStyles.highlight\n                      : buttonStyles.default,\n                  )}\n                >\n                  <span className=\"relative z-10 flex items-center justify-center gap-2\">\n                    {tier.highlight ? (\n                      <>\n                        Buy now\n                        <ArrowRightIcon className=\"w-4 h-4\" />\n                      </>\n                    ) : (\n                      <>\n                        Get started\n                        <ArrowRightIcon className=\"w-4 h-4\" />\n                      </>\n                    )}\n                  </span>\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport { PricingSection }"
    },
    {
      "path": "/components/ui/badge.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"
    },
    {
      "path": "/components/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/kokonutd/pricing-section"
  }
}