{
  "name": "process-timeline",
  "type": "registry:block",
  "dependencies": [
    "motion",
    "@uidotdev/usehooks",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "/components/blocks/process-timeline.tsx",
      "type": "registry:block",
      "content": "\"use client\" \n\nimport * as React from \"react\"\n\nimport { useMeasure } from \"@uidotdev/usehooks\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport {\n  HTMLMotionProps,\n  MotionValue,\n  motion,\n  useScroll,\n  useTransform,\n} from \"motion/react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst processCardVariants = cva(\"flex border backdrop-blur-lg\", {\n  variants: {\n    variant: {\n      indigo:\n        \"flex border text-slate-50 border-slate-700 backdrop-blur-lg bg-gradient-to-br from-[rgba(15,23,42,0.7)_40%] to-[#3730a3_120%]\",\n      light: \"shadow\",\n    },\n    size: {\n      sm: \"min-w-[25%] max-w-[25%]\",\n      md: \"min-w-[50%] max-w-[50%]\",\n      lg: \"min-w-[75%] max-w-[75%]\",\n      xl: \"min-w-full max-w-full\",\n    },\n  },\n  defaultVariants: {\n    variant: \"indigo\",\n    size: \"md\",\n  },\n})\ninterface ContainerScrollContextValue {\n  scrollYProgress: MotionValue<number>\n}\ninterface ProcessCardProps\n  extends HTMLMotionProps<\"div\">,\n    VariantProps<typeof processCardVariants> {\n  itemsLength: number\n  index: number\n}\n\nconst ContainerScrollContext = React.createContext<\n  ContainerScrollContextValue | undefined\n>(undefined)\nfunction useContainerScrollContext() {\n  const context = React.useContext(ContainerScrollContext)\n  if (!context) {\n    throw new Error(\n      \"useContainerScrollContext must be used within a ContainerScroll Component\"\n    )\n  }\n  return context\n}\nexport const ContainerScroll = ({\n  children,\n  className,\n  ...props\n}: React.HtmlHTMLAttributes<HTMLDivElement>) => {\n  const scrollRef = React.useRef<HTMLDivElement>(null)\n  const { scrollYProgress } = useScroll({\n    target: scrollRef,\n  })\n  return (\n    <ContainerScrollContext.Provider value={{ scrollYProgress }}>\n      <div\n        ref={scrollRef}\n        className={cn(\"relative min-h-[120vh]\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </ContainerScrollContext.Provider>\n  )\n}\nexport const ContainerSticky = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"sticky left-0 top-0 w-full overflow-hidden\", className)}\n    {...props}\n  />\n))\nContainerSticky.displayName = \"ContainerSticky\"\n\nexport const ProcessCardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6\", className)} {...props} />\n))\nProcessCardTitle.displayName = \"ProcessCardTitle\"\n\nexport const ProcessCardBody = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col gap-8 p-6\", className)}\n    {...props}\n  />\n))\nProcessCardBody.displayName = \"ProcessCardBody\"\n\nexport const ProcessCard: React.FC<ProcessCardProps> = ({\n  className,\n  style,\n  variant,\n  size,\n  itemsLength,\n  index,\n  ...props\n}) => {\n  const { scrollYProgress } = useContainerScrollContext()\n  const start = index / itemsLength\n  const end = start + 1 / itemsLength\n  const { innerWidth } = window\n  const [ref, { width }] = useMeasure()\n\n  const x = useTransform(\n    scrollYProgress,\n    [start, end],\n    [innerWidth, -((width ?? 0) * index) + 64 * index]\n  )\n  return (\n    <motion.div\n      ref={ref}\n      style={{\n        x: index > 0 ? x : 0,\n        ...style,\n      }}\n      className={cn(processCardVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n}\nProcessCard.displayName = \"ProcessCard\"\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/youcefbnm/process-timeline"
  }
}