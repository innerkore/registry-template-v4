{
  "name": "process-timeline",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/process-timeline.tsx)",
  "dependencies": [
    "motion",
    "@uidotdev/usehooks",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "/src/components/blocks/process-timeline.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { useMeasure } from \"@uidotdev/usehooks\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport {\n  HTMLMotionProps,\n  MotionValue,\n  motion,\n  useScroll,\n  useTransform,\n} from \"motion/react\";\n\nimport Image from \"@/components/Image\";\nimport { cn } from \"@/lib/utils\";\n\n// ImageProps interface per project guidelines\nexport interface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\n// Context for scroll progress sharing\ninterface ContainerScrollContextValue {\n  scrollYProgress: MotionValue<number>;\n}\n\nconst ContainerScrollContext = React.createContext<\n  ContainerScrollContextValue | undefined\n>(undefined);\n\nfunction useContainerScrollContext() {\n  const context = React.useContext(ContainerScrollContext);\n  if (!context) {\n    throw new Error(\n      \"useContainerScrollContext must be used within a ContainerScroll Component\"\n    );\n  }\n  return context;\n}\n\n// Variants without default values (no defaults per instructions)\nconst processCardVariants = cva(\"flex border backdrop-blur-lg\", {\n  variants: {\n    variant: {\n      indigo:\n        \"flex border text-slate-50 border-slate-700 backdrop-blur-lg bg-gradient-to-br from-[rgba(15,23,42,0.7)_40%] to-[#3730a3_120%]\",\n      light: \"shadow\",\n    },\n    size: {\n      sm: \"min-w-[25%] max-w-[25%]\",\n      md: \"min-w-[50%] max-w-[50%]\",\n      lg: \"min-w-[75%] max-w-[75%]\",\n      xl: \"min-w-full max-w-full\",\n    },\n  },\n});\n\n// Props\nexport type ContainerScrollProps = React.HTMLAttributes<HTMLDivElement> & {\n  backgroundColor?: string;\n  backgroundImage?: ImageProps;\n};\n\nexport type ContainerStickyProps = React.HTMLAttributes<HTMLDivElement>;\n\nexport type ProcessCardTitleProps = React.HTMLAttributes<HTMLDivElement>;\n\nexport type ProcessCardBodyProps = React.HTMLAttributes<HTMLDivElement>;\n\nexport interface ProcessCardProps\n  extends HTMLMotionProps<\"div\">,\n    VariantProps<typeof processCardVariants> {\n  itemsLength: number;\n  index: number;\n}\n\n// Components\nexport const ContainerScroll: React.FC<ContainerScrollProps> = ({\n  children,\n  className,\n  backgroundColor,\n  backgroundImage,\n  ...props\n}) => {\n  const scrollRef = React.useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({ target: scrollRef });\n\n  return (\n    <ContainerScrollContext.Provider value={{ scrollYProgress }}>\n      <div\n        ref={scrollRef}\n        className={cn(\"relative min-h-[120vh]\", className)}\n        {...props}\n      >\n        {(backgroundColor || backgroundImage) && (\n          <div className=\"pointer-events-none absolute inset-0 -z-10\">\n            {backgroundColor && (\n              <div className=\"absolute inset-0\" style={{ backgroundColor }} />\n            )}\n            {backgroundImage && (\n              <Image\n                {...backgroundImage}\n                fill={true}\n                className={cn(\"object-cover\", backgroundImage.className)}\n              />\n            )}\n          </div>\n        )}\n        {children}\n      </div>\n    </ContainerScrollContext.Provider>\n  );\n};\n\nexport const ContainerSticky = React.forwardRef<\n  HTMLDivElement,\n  ContainerStickyProps\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"sticky left-0 top-0 w-full overflow-hidden\", className)}\n    {...props}\n  />\n));\nContainerSticky.displayName = \"ContainerSticky\";\n\nexport const ProcessCardTitle = React.forwardRef<\n  HTMLDivElement,\n  ProcessCardTitleProps\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6\", className)} {...props} />\n));\nProcessCardTitle.displayName = \"ProcessCardTitle\";\n\nexport const ProcessCardBody = React.forwardRef<\n  HTMLDivElement,\n  ProcessCardBodyProps\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col gap-8 p-6\", className)} {...props} />\n));\nProcessCardBody.displayName = \"ProcessCardBody\";\n\nexport const ProcessCard: React.FC<ProcessCardProps> = ({\n  className,\n  style,\n  variant,\n  size,\n  itemsLength,\n  index,\n  ...props\n}) => {\n  const { scrollYProgress } = useContainerScrollContext();\n\n  const start = itemsLength ? index / itemsLength : 0;\n  const end = itemsLength ? start + 1 / itemsLength : 1;\n\n  const [measureRef, { width }] = useMeasure();\n  const [viewportWidth, setViewportWidth] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      setViewportWidth(window.innerWidth);\n    }\n  }, []);\n\n  const x = useTransform(\n    scrollYProgress,\n    [start, end],\n    [viewportWidth, -((width ?? 0) * index) + 64 * index]\n  );\n\n  return (\n    <motion.div\n      ref={measureRef as unknown as React.Ref<HTMLDivElement>}\n      style={{\n        x: index > 0 ? x : 0,\n        ...style,\n      }}\n      className={cn(processCardVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n};\nProcessCard.displayName = \"ProcessCard\";\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/youcefbnm/process-timeline.json",
    "imported_from": "https://21st.dev/r/youcefbnm/process-timeline",
    "component_name": "ProcessCard",
    "component_path": "/components/blocks/process-timeline.tsx",
    "props": "ContainerScrollProps, ContainerStickyProps, ProcessCardTitleProps, ProcessCardBodyProps, ProcessCardProps",
    "props_path": "/components/blocks/process-timeline.tsx",
    "original_file": "/components/blocks/process-timeline.tsx",
    "transformed_at": "2025-09-23T22:10:31.383101",
    "category": "process",
    "tags": [
      "content-container",
      "interactive",
      "animated",
      "responsive-mobile",
      "container-bound",
      "engagement",
      "composite"
    ],
    "variations": []
  }
}