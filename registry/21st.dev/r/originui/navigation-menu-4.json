{
  "name": "navigation-menu-4",
  "type": "registry:component",
  "description": "TypeScript component (transformed from src/components/ui/navigation-menu-4.tsx)",
  "title": "Navigation Menu 4",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://21st.dev/r/originui/navigation-menu",
    "https://21st.dev/r/shadcn/button",
    "https://21st.dev/r/originui/popover",
    "https://21st.dev/r/originui/input",
    "https://21st.dev/r/originui/dropdown-menu",
    "https://21st.dev/r/originui/badge",
    "https://21st.dev/r/shadcn/toggle",
    "https://21st.dev/r/originui/select",
    "https://21st.dev/r/originui/tooltip",
    "https://21st.dev/r/originui/avatar",
    "https://21st.dev/r/originui/breadcrumb",
    "https://21st.dev/r/shadcn/scroll-area"
  ],
  "files": [
    {
      "path": "src/components/ui/navigation-menu-4.tsx",
      "type": "registry:component",
      "content": "import Link from \"@/components/Link\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from \"@/components/ui/navigation-menu\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\n\n// Icon interface (as per guidelines)\ninterface Icon {\n  package: \"lucide\";\n  name: string; // known lucide react icon-name only\n  type: \"icon\";\n  className: string; // tailwind classes for styling\n}\n\n// ImageProps interface (as per guidelines)\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\n// Navigation types\ninterface SimpleLinkItem {\n  href: string;\n  label: string;\n}\n\ninterface DescriptionItem extends SimpleLinkItem {\n  description: string;\n}\n\ninterface IconItem extends SimpleLinkItem {\n  icon: Icon;\n}\n\ninterface DescriptionSubmenu {\n  label: string;\n  submenu: true;\n  type: \"description\";\n  items: DescriptionItem[];\n}\n\ninterface SimpleSubmenu {\n  label: string;\n  submenu: true;\n  type: \"simple\";\n  items: SimpleLinkItem[];\n}\n\ninterface IconSubmenu {\n  label: string;\n  submenu: true;\n  type: \"icon\";\n  items: IconItem[];\n}\n\ntype SubmenuLink = DescriptionSubmenu | SimpleSubmenu | IconSubmenu;\n\ninterface TopLevelLink extends SimpleLinkItem {\n  submenu?: false;\n}\n\nexport type NavLink = TopLevelLink | SubmenuLink;\n\nexport interface HeaderNavigationProps {\n  logoLabel: string;\n  logoHref: string;\n  navigationLinks: NavLink[];\n  signInLabel: string;\n  signInHref: string;\n  ctaLabel: string;\n  ctaHref: string;\n  backgroundImage?: ImageProps;\n  backgroundColor?: string;\n  className?: string;\n}\n\nfunction isSubmenu(link: NavLink): link is SubmenuLink {\n  return (link as SubmenuLink).submenu === true;\n}\n\nexport default function HeaderNavigation({\n  logoLabel,\n  logoHref,\n  navigationLinks,\n  signInLabel,\n  signInHref,\n  ctaLabel,\n  ctaHref,\n  backgroundImage,\n  backgroundColor,\n  className,\n}: HeaderNavigationProps) {\n  return (\n    <header className={cn(\"relative border-b px-4 md:px-6\", className)} style={{ backgroundColor }}>\n      {backgroundImage && (\n        <div aria-hidden=\"true\" className=\"pointer-events-none absolute inset-0 -z-10\">\n          <Image\n            {...backgroundImage}\n            className={cn(\"h-full w-full object-cover\", backgroundImage.className)}\n          />\n        </div>\n      )}\n      <div className=\"flex h-16 items-center justify-between gap-4\">\n        {/* Left side */}\n        <div className=\"flex items-center gap-2\">\n          {/* Mobile menu trigger */}\n          <Popover>\n            <PopoverTrigger asChild>\n              <Button className=\"group size-8 md:hidden\" variant=\"ghost\" size=\"icon\">\n                <svg\n                  className=\"pointer-events-none\"\n                  width={16}\n                  height={16}\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  aria-hidden=\"true\"\n                >\n                  <path d=\"M4 12L20 12\" className=\"origin-center -translate-y-[7px] transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.1)] group-aria-expanded:translate-x-0 group-aria-expanded:translate-y-0 group-aria-expanded:rotate-[315deg]\" />\n                  <path d=\"M4 12H20\" className=\"origin-center transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.8)] group-aria-expanded:rotate-45\" />\n                  <path d=\"M4 12H20\" className=\"origin-center translate-y-[7px] transition-all duration-300 ease-[cubic-bezier(.5,.85,.25,1.1)] group-aria-expanded:translate-y-0 group-aria-expanded:rotate-[135deg]\" />\n                </svg>\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent align=\"start\" className=\"w-64 p-1 md:hidden\">\n              <NavigationMenu className=\"max-w-none *:w-full\">\n                <NavigationMenuList className=\"flex-col items-start gap-0 md:gap-2\">\n                  {navigationLinks.map((link, index) => {\n                    const hasNext = index < navigationLinks.length - 1;\n                    const next = hasNext ? navigationLinks[index + 1] : undefined;\n                    const showSeparator =\n                      hasNext &&\n                      ((!isSubmenu(link) && next && isSubmenu(next)) ||\n                        (isSubmenu(link) && next && !isSubmenu(next)) ||\n                        (isSubmenu(link) && next && isSubmenu(next) && link.type !== next.type));\n\n                    return (\n                      <NavigationMenuItem key={index} className=\"w-full\">\n                        {isSubmenu(link) ? (\n                          <>\n                            <div className=\"text-muted-foreground px-2 py-1.5 text-xs font-medium\">{link.label}</div>\n                            <ul>\n                              {link.type === \"icon\" &&\n                                link.items.map((item, itemIndex) => (\n                                  <li key={itemIndex}>\n                                    <NavigationMenuLink asChild>\n                                      <Link href={item.href} className=\"py-1.5\">\n                                        {item.label}\n                                      </Link>\n                                    </NavigationMenuLink>\n                                  </li>\n                                ))}\n                              {link.type === \"description\" &&\n                                link.items.map((item, itemIndex) => (\n                                  <li key={itemIndex}>\n                                    <NavigationMenuLink asChild>\n                                      <Link href={item.href} className=\"py-1.5\">\n                                        {item.label}\n                                      </Link>\n                                    </NavigationMenuLink>\n                                  </li>\n                                ))}\n                              {link.type === \"simple\" &&\n                                link.items.map((item, itemIndex) => (\n                                  <li key={itemIndex}>\n                                    <NavigationMenuLink asChild>\n                                      <Link href={item.href} className=\"py-1.5\">\n                                        {item.label}\n                                      </Link>\n                                    </NavigationMenuLink>\n                                  </li>\n                                ))}\n                            </ul>\n                          </>\n                        ) : (\n                          <NavigationMenuLink asChild>\n                            <Link href={link.href} className=\"py-1.5\">\n                              {link.label}\n                            </Link>\n                          </NavigationMenuLink>\n                        )}\n                        {showSeparator && (\n                          <div role=\"separator\" aria-orientation=\"horizontal\" className=\"bg-border -mx-1 my-1 h-px w-full\" />\n                        )}\n                      </NavigationMenuItem>\n                    );\n                  })}\n                </NavigationMenuList>\n              </NavigationMenu>\n            </PopoverContent>\n          </Popover>\n          {/* Main nav */}\n          <div className=\"flex items-center gap-6\">\n            <Link href={logoHref} className=\"text-primary hover:text-primary/90\">\n              {logoLabel}\n            </Link>\n            {/* Navigation menu */}\n            <div className=\"max-md:hidden\">\n              <NavigationMenu>\n                <NavigationMenuList>\n                  {navigationLinks.map((link, index) => (\n                    <NavigationMenuItem key={index}>\n                      {isSubmenu(link) ? (\n                        <>\n                          <NavigationMenuTrigger className=\"text-muted-foreground hover:text-primary bg-transparent px-2 py-1.5 font-medium\">\n                            {link.label}\n                          </NavigationMenuTrigger>\n                          <NavigationMenuContent>\n                            <ul\n                              className={cn(\n                                \"grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]\",\n                                link.type === \"description\" && \"md:grid-cols-1\"\n                              )}\n                            >\n                              {link.type === \"icon\" &&\n                                link.items.map((item, itemIndex) => (\n                                  <li key={itemIndex}>\n                                    <NavigationMenuLink asChild>\n                                      <Link\n                                        href={item.href}\n                                        className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n                                      >\n                                        <div className=\"flex items-center gap-2\">\n                                          <DynamicIcon name={item.icon.name} className={item.icon.className} />\n                                          <div className=\"text-sm font-medium leading-none\">{item.label}</div>\n                                        </div>\n                                      </Link>\n                                    </NavigationMenuLink>\n                                  </li>\n                                ))}\n                              {link.type === \"description\" &&\n                                link.items.map((item, itemIndex) => (\n                                  <li key={itemIndex}>\n                                    <NavigationMenuLink asChild>\n                                      <Link\n                                        href={item.href}\n                                        className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n                                      >\n                                        <div className=\"text-sm font-medium leading-none\">{item.label}</div>\n                                        <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground\">{item.description}</p>\n                                      </Link>\n                                    </NavigationMenuLink>\n                                  </li>\n                                ))}\n                              {link.type === \"simple\" &&\n                                link.items.map((item, itemIndex) => (\n                                  <li key={itemIndex}>\n                                    <NavigationMenuLink asChild>\n                                      <Link\n                                        href={item.href}\n                                        className=\"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\"\n                                      >\n                                        <div className=\"text-sm font-medium leading-none\">{item.label}</div>\n                                      </Link>\n                                    </NavigationMenuLink>\n                                  </li>\n                                ))}\n                            </ul>\n                          </NavigationMenuContent>\n                        </>\n                      ) : (\n                        <NavigationMenuLink asChild>\n                          <Link href={link.href} className=\"text-muted-foreground hover:text-primary py-1.5 px-2 font-medium\">\n                            {link.label}\n                          </Link>\n                        </NavigationMenuLink>\n                      )}\n                    </NavigationMenuItem>\n                  ))}\n                </NavigationMenuList>\n                <NavigationMenuViewport />\n              </NavigationMenu>\n            </div>\n          </div>\n        </div>\n        {/* Right side */}\n        <div className=\"flex items-center gap-2\">\n          <Button asChild variant=\"ghost\" size=\"sm\" className=\"text-sm\">\n            <Link href={signInHref}>{signInLabel}</Link>\n          </Button>\n          <Button asChild size=\"sm\" className=\"text-sm\">\n            <Link href={ctaHref}>{ctaLabel}</Link>\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n"
    }
  ],
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/originui/navigation-menu-4.json",
    "imported_from": "https://21st.dev/r/originui/navigation-menu-4",
    "component_name": "HeaderNavigation",
    "component_path": "src/components/ui/navigation-menu-4.tsx",
    "props": "HeaderNavigationProps",
    "props_path": "src/components/ui/navigation-menu-4.tsx",
    "original_file": "src/components/ui/navigation-menu-4.tsx",
    "transformed_at": "2025-09-23T21:30:50.022648",
    "category": "navigation",
    "tags": [
      "brand-awareness",
      "navigation-element",
      "responsive-mobile",
      "above-fold",
      "composite"
    ],
    "variations": [],
    "schema": {
      "type": "object",
      "properties": {
        "logoLabel": {
          "type": "string"
        },
        "logoHref": {
          "type": "string"
        },
        "navigationLinks": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string"
                  },
                  "submenu": {
                    "type": "boolean",
                    "const": true
                  },
                  "type": {
                    "type": "string",
                    "const": "description"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "href": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string"
                  },
                  "submenu": {
                    "type": "boolean",
                    "const": true
                  },
                  "type": {
                    "type": "string",
                    "const": "simple"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string"
                  },
                  "submenu": {
                    "type": "boolean",
                    "const": true
                  },
                  "type": {
                    "type": "string",
                    "const": "icon"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "icon": {
                          "type": "object",
                          "properties": {
                            "package": {
                              "type": "string",
                              "const": "lucide"
                            },
                            "name": {
                              "type": "string"
                            },
                            "type": {
                              "type": "string",
                              "const": "icon"
                            },
                            "className": {
                              "type": "string"
                            }
                          }
                        },
                        "href": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "submenu": {
                    "const": false,
                    "type": "boolean"
                  },
                  "href": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "signInLabel": {
          "type": "string"
        },
        "signInHref": {
          "type": "string"
        },
        "ctaLabel": {
          "type": "string"
        },
        "ctaHref": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string"
            },
            "alt": {
              "type": "string"
            },
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "priority": {
              "type": "boolean"
            },
            "quality": {
              "type": "number"
            },
            "sizes": {
              "type": "string"
            },
            "fill": {
              "type": "boolean"
            },
            "className": {
              "type": "string"
            },
            "placeholder": {
              "type": "string"
            }
          }
        },
        "backgroundColor": {
          "type": "string"
        },
        "className": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "schema_updated_at": "2025-09-25T10:02:02.381020",
    "public_ready": true,
    "public_ready_updated_at": "2025-09-25T11:10:54.721386"
  }
}