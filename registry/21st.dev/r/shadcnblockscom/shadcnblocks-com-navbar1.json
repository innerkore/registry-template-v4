{
  "name": "shadcnblocks-com-navbar1",
  "type": "registry:block",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-accordion",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-icons",
    "@radix-ui/react-navigation-menu",
    "@radix-ui/react-dialog",
    "@radix-ui/react-label",
    "@radix-ui/react-checkbox"
  ],
  "registryDependencies": [
    "https://21st.dev/r/shadcn/accordion",
    "https://21st.dev/r/shadcn/button",
    "https://21st.dev/r/shadcn/navigation-menu",
    "https://21st.dev/r/shadcn/sheet"
  ],
  "files": [
    {
      "path": "/components/blocks/shadcnblocks-com-navbar1.tsx",
      "type": "registry:block",
      "content": "import { Book, Menu, Sunset, Trees, Zap } from \"lucide-react\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from \"@/components/ui/navigation-menu\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\ninterface MenuItem {\n  title: string;\n  url: string;\n  description?: string;\n  icon?: JSX.Element;\n  items?: MenuItem[];\n}\n\ninterface Navbar1Props {\n  logo?: {\n    url: string;\n    src: string;\n    alt: string;\n    title: string;\n  };\n  menu?: MenuItem[];\n  mobileExtraLinks?: {\n    name: string;\n    url: string;\n  }[];\n  auth?: {\n    login: {\n      text: string;\n      url: string;\n    };\n    signup: {\n      text: string;\n      url: string;\n    };\n  };\n}\n\nconst Navbar1 = ({\n  logo = {\n    url: \"https://www.shadcnblocks.com\",\n    src: \"https://www.shadcnblocks.com/images/block/block-1.svg\",\n    alt: \"logo\",\n    title: \"Shadcnblocks.com\",\n  },\n  menu = [\n    { title: \"Home\", url: \"#\" },\n    {\n      title: \"Products\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Blog\",\n          description: \"The latest industry news, updates, and info\",\n          icon: <Book className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n        {\n          title: \"Company\",\n          description: \"Our mission is to innovate and empower the world\",\n          icon: <Trees className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n        {\n          title: \"Careers\",\n          description: \"Browse job listing and discover our workspace\",\n          icon: <Sunset className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n        {\n          title: \"Support\",\n          description:\n            \"Get in touch with our support team or visit our community forums\",\n          icon: <Zap className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Resources\",\n      url: \"#\",\n      items: [\n        {\n          title: \"Help Center\",\n          description: \"Get all the answers you need right here\",\n          icon: <Zap className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n        {\n          title: \"Contact Us\",\n          description: \"We are here to help you with any questions you have\",\n          icon: <Sunset className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n        {\n          title: \"Status\",\n          description: \"Check the current status of our services and APIs\",\n          icon: <Trees className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n        {\n          title: \"Terms of Service\",\n          description: \"Our terms and conditions for using our services\",\n          icon: <Book className=\"size-5 shrink-0\" />,\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Pricing\",\n      url: \"#\",\n    },\n    {\n      title: \"Blog\",\n      url: \"#\",\n    },\n  ],\n  mobileExtraLinks = [\n    { name: \"Press\", url: \"#\" },\n    { name: \"Contact\", url: \"#\" },\n    { name: \"Imprint\", url: \"#\" },\n    { name: \"Sitemap\", url: \"#\" },\n  ],\n  auth = {\n    login: { text: \"Log in\", url: \"#\" },\n    signup: { text: \"Sign up\", url: \"#\" },\n  },\n}: Navbar1Props) => {\n  return (\n    <section className=\"py-4\">\n      <div className=\"container\">\n        <nav className=\"hidden justify-between lg:flex\">\n          <div className=\"flex items-center gap-6\">\n            <a href={logo.url} className=\"flex items-center gap-2\">\n              <img src={logo.src} className=\"w-8\" alt={logo.alt} />\n              <span className=\"text-lg font-semibold\">{logo.title}</span>\n            </a>\n            <div className=\"flex items-center\">\n              <NavigationMenu>\n                <NavigationMenuList>\n                  {menu.map((item) => renderMenuItem(item))}\n                </NavigationMenuList>\n              </NavigationMenu>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button asChild variant=\"outline\" size=\"sm\">\n              <a href={auth.login.url}>{auth.login.text}</a>\n            </Button>\n            <Button asChild size=\"sm\">\n              <a href={auth.signup.url}>{auth.signup.text}</a>\n            </Button>\n          </div>\n        </nav>\n        <div className=\"block lg:hidden\">\n          <div className=\"flex items-center justify-between\">\n            <a href={logo.url} className=\"flex items-center gap-2\">\n              <img src={logo.src} className=\"w-8\" alt={logo.alt} />\n              <span className=\"text-lg font-semibold\">{logo.title}</span>\n            </a>\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"outline\" size=\"icon\">\n                  <Menu className=\"size-4\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent className=\"overflow-y-auto\">\n                <SheetHeader>\n                  <SheetTitle>\n                    <a href={logo.url} className=\"flex items-center gap-2\">\n                      <img src={logo.src} className=\"w-8\" alt={logo.alt} />\n                      <span className=\"text-lg font-semibold\">\n                        {logo.title}\n                      </span>\n                    </a>\n                  </SheetTitle>\n                </SheetHeader>\n                <div className=\"my-6 flex flex-col gap-6\">\n                  <Accordion\n                    type=\"single\"\n                    collapsible\n                    className=\"flex w-full flex-col gap-4\"\n                  >\n                    {menu.map((item) => renderMobileMenuItem(item))}\n                  </Accordion>\n                  <div className=\"border-t py-4\">\n                    <div className=\"grid grid-cols-2 justify-start\">\n                      {mobileExtraLinks.map((link, idx) => (\n                        <a\n                          key={idx}\n                          className=\"inline-flex h-10 items-center gap-2 whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium text-muted-foreground transition-colors hover:bg-muted hover:text-accent-foreground\"\n                          href={link.url}\n                        >\n                          {link.name}\n                        </a>\n                      ))}\n                    </div>\n                  </div>\n                  <div className=\"flex flex-col gap-3\">\n                    <Button asChild variant=\"outline\">\n                      <a href={auth.login.url}>{auth.login.text}</a>\n                    </Button>\n                    <Button asChild>\n                      <a href={auth.signup.url}>{auth.signup.text}</a>\n                    </Button>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nconst renderMenuItem = (item: MenuItem) => {\n  if (item.items) {\n    return (\n      <NavigationMenuItem key={item.title} className=\"text-muted-foreground\">\n        <NavigationMenuTrigger>{item.title}</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <ul className=\"w-80 p-3\">\n            <NavigationMenuLink>\n              {item.items.map((subItem) => (\n                <li key={subItem.title}>\n                  <a\n                    className=\"flex select-none gap-4 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-muted hover:text-accent-foreground\"\n                    href={subItem.url}\n                  >\n                    {subItem.icon}\n                    <div>\n                      <div className=\"text-sm font-semibold\">\n                        {subItem.title}\n                      </div>\n                      {subItem.description && (\n                        <p className=\"text-sm leading-snug text-muted-foreground\">\n                          {subItem.description}\n                        </p>\n                      )}\n                    </div>\n                  </a>\n                </li>\n              ))}\n            </NavigationMenuLink>\n          </ul>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    );\n  }\n\n  return (\n    <a\n      key={item.title}\n      className=\"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium text-muted-foreground transition-colors hover:bg-muted hover:text-accent-foreground\"\n      href={item.url}\n    >\n      {item.title}\n    </a>\n  );\n};\n\nconst renderMobileMenuItem = (item: MenuItem) => {\n  if (item.items) {\n    return (\n      <AccordionItem key={item.title} value={item.title} className=\"border-b-0\">\n        <AccordionTrigger className=\"py-0 font-semibold hover:no-underline\">\n          {item.title}\n        </AccordionTrigger>\n        <AccordionContent className=\"mt-2\">\n          {item.items.map((subItem) => (\n            <a\n              key={subItem.title}\n              className=\"flex select-none gap-4 rounded-md p-3 leading-none outline-none transition-colors hover:bg-muted hover:text-accent-foreground\"\n              href={subItem.url}\n            >\n              {subItem.icon}\n              <div>\n                <div className=\"text-sm font-semibold\">{subItem.title}</div>\n                {subItem.description && (\n                  <p className=\"text-sm leading-snug text-muted-foreground\">\n                    {subItem.description}\n                  </p>\n                )}\n              </div>\n            </a>\n          ))}\n        </AccordionContent>\n      </AccordionItem>\n    );\n  }\n\n  return (\n    <a key={item.title} href={item.url} className=\"font-semibold\">\n      {item.title}\n    </a>\n  );\n};\n\nexport { Navbar1 };\n"
    },
    {
      "path": "/components/ui/accordion.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
    },
    {
      "path": "/components/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "path": "/components/ui/navigation-menu.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { ChevronDownIcon } from \"@radix-ui/react-icons\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDownIcon\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n"
    },
    {
      "path": "/components/ui/sheet.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  },\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
    },
    {
      "path": "/components/ui/input.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    },
    {
      "path": "/components/ui/label.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
    },
    {
      "path": "/components/ui/checkbox.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/shadcnblockscom/shadcnblocks-com-navbar1"
  }
}