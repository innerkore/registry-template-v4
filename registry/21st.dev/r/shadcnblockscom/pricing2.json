{
  "name": "pricing2",
  "type": "registry:block",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-switch",
    "@radix-ui/react-separator",
    "@radix-ui/react-label"
  ],
  "registryDependencies": [
    "https://21st.dev/r/shadcn/button",
    "https://21st.dev/r/shadcn/card",
    "https://21st.dev/r/shadcn/separator",
    "https://21st.dev/r/shadcn/switch"
  ],
  "files": [
    {
      "path": "/components/blocks/pricing2.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport { ArrowRight, CircleCheck } from \"lucide-react\";\nimport { useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\n\ninterface PricingFeature {\n  text: string;\n}\n\ninterface PricingPlan {\n  id: string;\n  name: string;\n  description: string;\n  monthlyPrice: string;\n  yearlyPrice: string;\n  features: PricingFeature[];\n  button: {\n    text: string;\n    url: string;\n  };\n}\n\ninterface Pricing2Props {\n  heading?: string;\n  description?: string;\n  plans?: PricingPlan[];\n}\n\nconst Pricing2 = ({\n  heading = \"Pricing\",\n  description = \"Check out our affordable pricing plans\",\n  plans = [\n    {\n      id: \"plus\",\n      name: \"Plus\",\n      description: \"For personal use\",\n      monthlyPrice: \"$19\",\n      yearlyPrice: \"$15\",\n      features: [\n        { text: \"Up to 5 team members\" },\n        { text: \"Basic components library\" },\n        { text: \"Community support\" },\n        { text: \"1GB storage space\" },\n      ],\n      button: {\n        text: \"Purchase\",\n        url: \"https://www.shadcnblocks.com\",\n      },\n    },\n    {\n      id: \"pro\",\n      name: \"Pro\",\n      description: \"For professionals\",\n      monthlyPrice: \"$49\",\n      yearlyPrice: \"$35\",\n      features: [\n        { text: \"Unlimited team members\" },\n        { text: \"Advanced components\" },\n        { text: \"Priority support\" },\n        { text: \"Unlimited storage\" },\n      ],\n      button: {\n        text: \"Purchase\",\n        url: \"https://www.shadcnblocks.com\",\n      },\n    },\n  ],\n}: Pricing2Props) => {\n  const [isYearly, setIsYearly] = useState(false);\n  return (\n    <section className=\"py-32\">\n      <div className=\"container\">\n        <div className=\"mx-auto flex max-w-5xl flex-col items-center gap-6 text-center\">\n          <h2 className=\"text-pretty text-4xl font-bold lg:text-6xl\">\n            {heading}\n          </h2>\n          <p className=\"text-muted-foreground lg:text-xl\">{description}</p>\n          <div className=\"flex items-center gap-3 text-lg\">\n            Monthly\n            <Switch\n              checked={isYearly}\n              onCheckedChange={() => setIsYearly(!isYearly)}\n            />\n            Yearly\n          </div>\n          <div className=\"flex flex-col items-stretch gap-6 md:flex-row\">\n            {plans.map((plan) => (\n              <Card\n                key={plan.id}\n                className=\"flex w-80 flex-col justify-between text-left\"\n              >\n                <CardHeader>\n                  <CardTitle>\n                    <p>{plan.name}</p>\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {plan.description}\n                  </p>\n                  <span className=\"text-4xl font-bold\">\n                    {isYearly ? plan.yearlyPrice : plan.monthlyPrice}\n                  </span>\n                  <p className=\"text-muted-foreground\">\n                    Billed{\" \"}\n                    {isYearly\n                      ? `$${Number(plan.yearlyPrice.slice(1)) * 12}`\n                      : `$${Number(plan.monthlyPrice.slice(1)) * 12}`}{\" \"}\n                    annually\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <Separator className=\"mb-6\" />\n                  {plan.id === \"pro\" && (\n                    <p className=\"mb-3 font-semibold\">\n                      Everything in Plus, and:\n                    </p>\n                  )}\n                  <ul className=\"space-y-4\">\n                    {plan.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center gap-2\">\n                        <CircleCheck className=\"size-4\" />\n                        <span>{feature.text}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n                <CardFooter className=\"mt-auto\">\n                  <Button asChild className=\"w-full\">\n                    <a href={plan.button.url} target=\"_blank\">\n                      {plan.button.text}\n                      <ArrowRight className=\"ml-2 size-4\" />\n                    </a>\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { Pricing2 };\n"
    },
    {
      "path": "/components/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "path": "/components/ui/switch.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
    },
    {
      "path": "/components/ui/separator.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
    },
    {
      "path": "/components/ui/card.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
    },
    {
      "path": "/components/ui/label.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/shadcnblockscom/pricing2.json",
    "imported_from": "https://21st.dev/r/shadcnblockscom/pricing2"
  }
}