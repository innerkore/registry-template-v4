{
  "name": "pricing2",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/ui/label.tsx)",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-switch",
    "@radix-ui/react-separator",
    "@radix-ui/react-label"
  ],
  "registryDependencies": [
    "https://21st.dev/r/shadcn/button",
    "https://21st.dev/r/shadcn/card",
    "https://21st.dev/r/shadcn/separator",
    "https://21st.dev/r/shadcn/switch"
  ],
  "files": [
    {
      "path": "/src/components/blocks/pricing2.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\n// Icon interface guidance used via DynamicIcon component\n// Image and Link components follow provided project interfaces\n\ninterface PricingFeature {\n  text: string;\n}\n\ninterface PricingPlanButton {\n  text: string;\n  url: string;\n  target?: \"_blank\" | \"_self\";\n  rel?: string;\n}\n\ninterface PricingPlan {\n  id: string;\n  name: string;\n  description?: string;\n  monthlyPrice: number; // price per month when billed monthly\n  yearlyPrice: number; // price per month when billed yearly\n  currency?: string; // e.g., \"$\"\n  currencyPosition?: \"prefix\" | \"suffix\"; // default behavior handled by consumer\n  features: PricingFeature[];\n  highlightNote?: string; // optional note above features (e.g., \"Everything in Plus, and:\")\n  button: PricingPlanButton;\n}\n\ninterface BillingToggleLabels {\n  monthly: string;\n  yearly: string;\n}\n\n// From guidelines\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface Pricing2Props {\n  heading?: string;\n  description?: string;\n  plans: PricingPlan[];\n  billedTextPrefix?: string; // e.g., \"Billed\"\n  billedTextSuffix?: string; // e.g., \"annually\"\n  billingToggleLabels?: BillingToggleLabels; // e.g., { monthly: \"Monthly\", yearly: \"Yearly\" }\n  featureIconName?: string; // lucide icon name for feature list items (e.g., \"CheckCircle\")\n  buttonIconName?: string; // lucide icon name for button trailing icon (e.g., \"ArrowRight\")\n  backgroundImage?: ImageProps; // optional decorative background image\n  backgroundColor?: string; // optional background color (e.g., \"#ffffff\" or \"hsl(var(--background))\")\n  className?: string; // optional extra classes for section\n  containerClassName?: string; // optional extra classes for inner container\n}\n\nconst formatPrice = (\n  value: number,\n  currency?: string,\n  position?: \"prefix\" | \"suffix\"\n) => {\n  if (!currency) return String(value);\n  return position === \"suffix\" ? `${value}${currency}` : `${currency}${value}`;\n};\n\nexport const Pricing2: React.FC<Pricing2Props> = ({\n  heading,\n  description,\n  plans,\n  billedTextPrefix,\n  billedTextSuffix,\n  billingToggleLabels,\n  featureIconName,\n  buttonIconName,\n  backgroundImage,\n  backgroundColor,\n  className,\n  containerClassName,\n}) => {\n  const [isYearly, setIsYearly] = useState(false);\n\n  return (\n    <section\n      className={`relative py-32 ${className ?? \"\"}`}\n      style={{ backgroundColor: backgroundColor || undefined }}\n    >\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={`absolute inset-0 -z-10 h-full w-full object-cover ${backgroundImage.className ?? \"\"}`}\n        />\n      ) : null}\n\n      <div className={`container ${containerClassName ?? \"\"}`}>\n        <div className=\"mx-auto flex max-w-5xl flex-col items-center gap-6 text-center\">\n          {heading ? (\n            <h2 className=\"text-pretty text-4xl font-bold lg:text-6xl\">{heading}</h2>\n          ) : null}\n\n          {description ? (\n            <p className=\"text-muted-foreground lg:text-xl\">{description}</p>\n          ) : null}\n\n          <div className=\"flex items-center gap-3 text-lg\">\n            {billingToggleLabels?.monthly}\n            <Switch\n              checked={isYearly}\n              onCheckedChange={(checked: boolean) => setIsYearly(checked)}\n            />\n            {billingToggleLabels?.yearly}\n          </div>\n\n          <div className=\"flex flex-col items-stretch gap-6 md:flex-row\">\n            {plans.map((plan) => {\n              const priceToShow = isYearly ? plan.yearlyPrice : plan.monthlyPrice;\n              const billedTotal = priceToShow * 12;\n\n              return (\n                <Card key={plan.id} className=\"flex w-80 flex-col justify-between text-left\">\n                  <CardHeader>\n                    <CardTitle>\n                      <p>{plan.name}</p>\n                    </CardTitle>\n                    {plan.description ? (\n                      <p className=\"text-sm text-muted-foreground\">{plan.description}</p>\n                    ) : null}\n                    <span className=\"text-4xl font-bold\">\n                      {formatPrice(priceToShow, plan.currency, plan.currencyPosition)}\n                    </span>\n                    <p className=\"text-muted-foreground\">\n                      {billedTextPrefix ? `${billedTextPrefix} ` : \"\"}\n                      {formatPrice(billedTotal, plan.currency, plan.currencyPosition)}\n                      {billedTextSuffix ? ` ${billedTextSuffix}` : \"\"}\n                    </p>\n                  </CardHeader>\n\n                  <CardContent>\n                    <Separator className=\"mb-6\" />\n                    {plan.highlightNote ? (\n                      <p className=\"mb-3 font-semibold\">{plan.highlightNote}</p>\n                    ) : null}\n                    <ul className=\"space-y-4\">\n                      {plan.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center gap-2\">\n                          {featureIconName ? (\n                            <DynamicIcon name={featureIconName} className=\"size-4\" />\n                          ) : null}\n                          <span>{feature.text}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n\n                  <CardFooter className=\"mt-auto\">\n                    <Button asChild className=\"w-full\">\n                      <Link\n                        href={plan.button.url}\n                        target={plan.button.target}\n                        rel={plan.button.rel}\n                        className=\"inline-flex items-center justify-center\"\n                      >\n                        {plan.button.text}\n                        {buttonIconName ? (\n                          <DynamicIcon name={buttonIconName} className=\"ml-2 size-4\" />\n                        ) : null}\n                      </Link>\n                    </Button>\n                  </CardFooter>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport { Pricing2 as default };"
    },
    {
      "path": "/src/components/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "path": "/src/components/ui/switch.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
    },
    {
      "path": "/src/components/ui/separator.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
    },
    {
      "path": "/src/components/ui/card.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className,\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
    },
    {
      "path": "/src/components/ui/label.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/shadcnblockscom/pricing2.json",
    "imported_from": "https://21st.dev/r/shadcnblockscom/pricing2",
    "component_name": "Pricing2",
    "component_path": "/src/components/blocks/pricing2.tsx",
    "props": "Pricing2Props",
    "props_path": "/src/components/blocks/pricing2.tsx",
    "original_file": "/components/blocks/pricing2.tsx",
    "transformed_at": "2025-09-23T21:57:57.891990",
    "category": "pricing",
    "tags": [
      "conversion-focused",
      "interactive",
      "responsive-mobile",
      "responsive-desktop",
      "decision-stage",
      "text-heavy"
    ],
    "variations": []
  }
}