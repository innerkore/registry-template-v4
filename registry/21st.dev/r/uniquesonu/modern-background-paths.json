{
  "name": "modern-background-paths",
  "type": "registry:component",
  "description": "TypeScript component (transformed from src/components/ui/modern-background-paths.tsx)",
  "title": "Modern Background Paths",
  "dependencies": [
    "framer-motion"
  ],
  "registryDependencies": [
    "https://21st.dev/r/originui/button"
  ],
  "files": [
    {
      "path": "src/components/ui/modern-background-paths.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"@/components/Link\";\nimport Image from \"@/components/Image\";\n\n// Guideline-compatible interfaces\ninterface LinkProps {\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  className?: string;\n  rel?: string;\n}\n\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface EnhancedBackgroundPathsProps {\n  // User-visible content\n  title: string;\n  subtitle: string;\n  ctaLabel: string;\n  ctaHref: LinkProps[\"href\"];\n  ctaTarget?: LinkProps[\"target\"];\n  ctaRel?: LinkProps[\"rel\"];\n  patternNames: string[]; // names displayed in the indicator and label\n  patternIndicatorPrefix?: string; // e.g., \"Current Pattern:\"\n\n  // Optional background controls\n  backgroundImage?: ImageProps;\n  backgroundColor?: string;\n\n  // Optional styling hooks\n  className?: string;\n  containerClassName?: string;\n}\n\n// Geometric Grid Paths\nconst GeometricPaths: React.FC = () => {\n  const gridSize = 40;\n  type GeoPath = { id: string; d: string; delay: number };\n  const paths = useMemo<GeoPath[]>(() => {\n    const list: GeoPath[] = [];\n    for (let x = 0; x < 20; x++) {\n      for (let y = 0; y < 12; y++) {\n        if (Math.random() > 0.7) {\n          list.push({\n            id: `grid-${x}-${y}`,\n            d: `M${x * gridSize},${y * gridSize} L${(x + 1) * gridSize},${y * gridSize} L${(x + 1) * gridSize},${(y + 1) * gridSize} L${x * gridSize},${(y + 1) * gridSize} Z`,\n            delay: Math.random() * 5,\n          });\n        }\n      }\n    }\n    return list;\n  }, []);\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-20\" viewBox=\"0 0 800 480\">\n      {paths.map((path) => (\n        <motion.path\n          key={path.id}\n          d={path.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"1\"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{ pathLength: [0, 1, 0], opacity: [0, 0.6, 0], scale: [1, 1.05, 1] }}\n          transition={{ duration: 8, delay: path.delay, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n    </svg>\n  );\n};\n\n// Organic Flow Paths\nconst FlowPaths: React.FC = () => {\n  type FlowPath = { id: string; d: string; strokeWidth: number; opacity: number; delay: number };\n  const flowPaths = useMemo<FlowPath[]>(() => {\n    return Array.from({ length: 12 }, (_, i) => {\n      const amplitude = 50 + i * 10;\n      const offset = i * 60;\n      return {\n        id: `flow-${i}`,\n        d: `M-100,${200 + offset} Q200,${200 + offset - amplitude} 500,${200 + offset} T900,${200 + offset}`,\n        strokeWidth: 1 + i * 0.3,\n        opacity: 0.1 + i * 0.05,\n        delay: i * 0.8,\n      };\n    });\n  }, []);\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-30\" viewBox=\"0 0 800 800\">\n      {flowPaths.map((path) => (\n        <motion.path\n          key={path.id}\n          d={path.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={path.strokeWidth}\n          strokeLinecap=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: [0, 1, 0.8, 0], opacity: [0, path.opacity, path.opacity * 0.7, 0] }}\n          transition={{ duration: 15, delay: path.delay, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n    </svg>\n  );\n};\n\n// Neural Network Paths\nconst NeuralPaths: React.FC = () => {\n  type Node = { x: number; y: number; id: string };\n  type Connection = { id: string; d: string; delay: number };\n\n  const nodes = useMemo<Node[]>(() => {\n    return Array.from({ length: 50 }, (_, i) => ({ x: Math.random() * 800, y: Math.random() * 600, id: `node-${i}` }));\n  }, []);\n\n  const connections = useMemo<Connection[]>(() => {\n    const list: Connection[] = [];\n    nodes.forEach((node, i) => {\n      const nearbyNodes = nodes.filter((other, j) => {\n        if (i === j) return false;\n        const distance = Math.hypot(node.x - other.x, node.y - other.y);\n        return distance < 120 && Math.random() > 0.6;\n      });\n      nearbyNodes.forEach((target) => {\n        list.push({ id: `conn-${i}-${target.id}`, d: `M${node.x},${node.y} L${target.x},${target.y}`, delay: Math.random() * 10 });\n      });\n    });\n    return list;\n  }, [nodes]);\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-15\" viewBox=\"0 0 800 600\">\n      {connections.map((conn) => (\n        <motion.path\n          key={conn.id}\n          d={conn.d}\n          stroke=\"currentColor\"\n          strokeWidth=\"0.5\"\n          fill=\"none\"\n          initial={{ pathLength: 0, opacity: 0 }}\n          animate={{ pathLength: [0, 1, 0], opacity: [0, 0.8, 0] }}\n          transition={{ duration: 6, delay: conn.delay, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n      {nodes.map((node) => (\n        <motion.circle\n          key={node.id}\n          cx={node.x}\n          cy={node.y}\n          r=\"2\"\n          fill=\"currentColor\"\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: [0, 1, 1.2, 1], opacity: [0, 0.6, 0.8, 0.6] }}\n          transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\" }}\n        />\n      ))}\n    </svg>\n  );\n};\n\n// Spiral Paths\nconst SpiralPaths: React.FC = () => {\n  type Spiral = { id: string; d: string; delay: number };\n  const spirals = useMemo<Spiral[]>(() => {\n    return Array.from({ length: 8 }, (_, i) => {\n      const centerX = 400 + ((i % 4) - 1.5) * 200;\n      const centerY = 300 + (Math.floor(i / 4 - 0.5)) * 200;\n      const radius = 80 + i * 15;\n      const turns = 3 + i * 0.5;\n\n      let path = `M${centerX + radius},${centerY}`;\n      for (let angle = 0; angle <= turns * 360; angle += 5) {\n        const radian = (angle * Math.PI) / 180;\n        const currentRadius = radius * (1 - angle / (turns * 360));\n        const x = centerX + currentRadius * Math.cos(radian);\n        const y = centerY + currentRadius * Math.sin(radian);\n        path += ` L${x},${y}`;\n      }\n\n      return { id: `spiral-${i}`, d: path, delay: i * 1.2 };\n    });\n  }, []);\n\n  return (\n    <svg className=\"absolute inset-0 w-full h-full opacity-25\" viewBox=\"0 0 800 600\">\n      {spirals.map((spiral) => (\n        <motion.path\n          key={spiral.id}\n          d={spiral.d}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          initial={{ pathLength: 0 }}\n          animate={{ pathLength: [0, 1, 0], rotate: [0, 360] }}\n          transition={{ pathLength: { duration: 12, repeat: Infinity, ease: \"easeInOut\" }, rotate: { duration: 20, repeat: Infinity, ease: \"linear\" }, delay: spiral.delay }}\n        />\n      ))}\n    </svg>\n  );\n};\n\nconst EnhancedBackgroundPaths: React.FC<EnhancedBackgroundPathsProps> = ({\n  title,\n  subtitle,\n  ctaLabel,\n  ctaHref,\n  ctaTarget,\n  ctaRel,\n  patternNames,\n  patternIndicatorPrefix,\n  backgroundImage,\n  backgroundColor,\n  className,\n  containerClassName,\n}) => {\n  const [tick, setTick] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTick((prev) => prev + 1);\n    }, 12000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const patternIndex = tick % 4; // selects which visual pattern to render\n  const nameCount = patternNames.length;\n  const currentNameIndex = nameCount ? tick % nameCount : 0;\n\n  const words = (title ?? \"\").split(\" \").filter(Boolean);\n\n  const renderPattern = () => {\n    switch (patternIndex) {\n      case 0:\n        return <NeuralPaths />;\n      case 1:\n        return <FlowPaths />;\n      case 2:\n        return <GeometricPaths />;\n      case 3:\n        return <SpiralPaths />;\n      default:\n        return <NeuralPaths />;\n    }\n  };\n\n  return (\n    <div\n      className={`relative min-h-screen w-full flex items-center justify-center overflow-hidden bg-gradient-to-br from-slate-50 via-white to-slate-100 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900 ${containerClassName ?? \"\"}`}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage && (\n        <Image\n          {...backgroundImage}\n          className={`absolute inset-0 w-full h-full object-cover ${backgroundImage.className ?? \"\"}`}\n        />\n      )}\n\n      {/* Dynamic Background Patterns */}\n      <div className=\"absolute inset-0 text-slate-600 dark:text-slate-400\">\n        <motion.div key={patternIndex} initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} transition={{ duration: 2 }}>\n          {renderPattern()}\n        </motion.div>\n      </div>\n\n      {/* Gradient Overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-t from-white/60 via-transparent to-white/60 dark:from-slate-900/60 dark:via-transparent dark:to-slate-900/60\" />\n\n      {/* Pattern Indicator */}\n      {nameCount > 0 && (\n        <div className=\"absolute top-8 right-8 flex gap-2 z-20\">\n          {patternNames.map((_, i) => (\n            <motion.div\n              key={i}\n              className={`w-2 h-2 rounded-full transition-colors duration-300 ${i === currentNameIndex ? \"bg-slate-800 dark:bg-white\" : \"bg-slate-300 dark:bg-slate-600\"}`}\n              animate={{ scale: i === currentNameIndex ? 1.2 : 1, opacity: i === currentNameIndex ? 1 : 0.5 }}\n              transition={{ duration: 0.3 }}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className={`relative z-10 container mx-auto px-4 md:px-6 text-center ${className ?? \"\"}`}>\n        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 1.5, ease: \"easeOut\" }} className=\"max-w-5xl mx-auto\">\n          {/* Main Title */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-6xl sm:text-8xl md:text-9xl font-black mb-4 tracking-tighter leading-none\">\n              {words.map((word, wordIndex) => (\n                <span key={wordIndex} className=\"inline-block mr-6 last:mr-0\">\n                  {word.split(\"\").map((letter, letterIndex) => (\n                    <motion.span\n                      key={`${wordIndex}-${letterIndex}`}\n                      initial={{ y: 100, opacity: 0, rotateX: -90 }}\n                      animate={{ y: 0, opacity: 1, rotateX: 0 }}\n                      transition={{\n                        delay: wordIndex * 0.15 + letterIndex * 0.05,\n                        type: \"spring\",\n                        stiffness: 100,\n                        damping: 20,\n                        duration: 0.8,\n                      }}\n                      className=\"inline-block text-transparent bg-clip-text bg-gradient-to-br from-slate-900 via-slate-700 to-slate-500 dark:from-white dark:via-slate-200 dark:to-slate-400 hover:from-blue-600 hover:to-purple-600 dark:hover:from-blue-400 dark:hover:to-purple-400 transition-all duration-700 cursor-default\"\n                      whileHover={{ scale: 1.05, y: -2 }}\n                    >\n                      {letter}\n                    </motion.span>\n                  ))}\n                </span>\n              ))}\n            </h1>\n\n            {/* Subtitle */}\n            <motion.p initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 1, duration: 1 }} className=\"text-xl md:text-2xl text-slate-600 dark:text-slate-300 font-light tracking-wide max-w-2xl mx-auto\">\n              {subtitle}\n            </motion.p>\n          </div>\n\n          {/* CTA Button */}\n          <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ delay: 1.5, duration: 0.8, type: \"spring\", stiffness: 100 }} className=\"inline-block group\">\n            <div className=\"relative p-[2px] bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-2xl group-hover:from-blue-600 group-hover:via-purple-600 group-hover:to-pink-600 transition-all duration-300\">\n              <Button variant=\"ghost\" size=\"lg\" className=\"relative rounded-[14px] px-12 py-6 text-lg font-semibold bg-white dark:bg-slate-900 hover:bg-slate-50 dark:hover:bg-slate-800 text-slate-900 dark:text-white transition-all duration-300 group-hover:-translate-y-1 group-hover:shadow-2xl border-0 backdrop-blur-sm\" asChild>\n                <Link href={ctaHref} target={ctaTarget} rel={ctaRel} className=\"block\">\n                  <motion.span className=\"flex items-center gap-3\" whileHover={{ x: 2 }} transition={{ type: \"spring\", stiffness: 400, damping: 10 }}>\n                    <span className=\"relative\">\n                      {ctaLabel}\n                      <motion.span className=\"absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 group-hover:w-full transition-all duration-300\" initial={{ width: 0 }} whileHover={{ width: \"100%\" }} />\n                    </span>\n                    <motion.span animate={{ x: [0, 4, 0] }} transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }} className=\"text-xl\">\n                      \u2192\n                    </motion.span>\n                  </motion.span>\n                </Link>\n              </Button>\n            </div>\n          </motion.div>\n\n          {/* Pattern Info */}\n          {patternIndicatorPrefix && nameCount > 0 && (\n            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 2, duration: 1 }} className=\"mt-12 text-sm text-slate-500 dark:text-slate-400 font-mono tracking-wider\">\n              {patternIndicatorPrefix} <span className=\"text-slate-700 dark:text-slate-200 font-semibold capitalize\">{patternNames[currentNameIndex]}</span>\n            </motion.div>\n          )}\n        </motion.div>\n      </div>\n\n      {/* Floating Elements */}\n      <motion.div\n        className=\"absolute top-1/4 left-1/4 w-4 h-4 bg-blue-500/20 rounded-full blur-sm\"\n        animate={{ y: [0, -20, 0], x: [0, 10, 0], scale: [1, 1.2, 1], opacity: [0.3, 0.7, 0.3] }}\n        transition={{ duration: 6, repeat: Infinity, ease: \"easeInOut\" }}\n      />\n      <motion.div\n        className=\"absolute top-3/4 right-1/3 w-6 h-6 bg-purple-500/20 rounded-full blur-sm\"\n        animate={{ y: [0, 15, 0], x: [0, -15, 0], scale: [1, 0.8, 1], opacity: [0.5, 0.8, 0.5] }}\n        transition={{ duration: 8, repeat: Infinity, ease: \"easeInOut\", delay: 2 }}\n      />\n    </div>\n  );\n};\n\nexport default EnhancedBackgroundPaths;\n"
    }
  ],
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/uniquesonu/modern-background-paths.json",
    "imported_from": "https://21st.dev/r/uniquesonu/modern-background-paths",
    "component_name": "EnhancedBackgroundPaths",
    "component_path": "src/components/ui/modern-background-paths.tsx",
    "props": "EnhancedBackgroundPathsProps",
    "props_path": "src/components/ui/modern-background-paths.tsx",
    "original_file": "src/components/ui/modern-background-paths.tsx",
    "transformed_at": "2025-09-23T22:10:29.800762",
    "category": "hero",
    "tags": [
      "conversion-focused",
      "action-trigger",
      "visual-dominant",
      "animated",
      "above-fold",
      "responsive-mobile"
    ],
    "variations": [],
    "schema": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "ctaLabel": {
          "type": "string"
        },
        "ctaHref": {
          "type": "string"
        },
        "ctaTarget": {
          "enum": [
            "_blank",
            "_self"
          ],
          "type": "string"
        },
        "ctaRel": {
          "type": "string"
        },
        "patternNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "patternIndicatorPrefix": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string"
            },
            "alt": {
              "type": "string"
            },
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "priority": {
              "type": "boolean"
            },
            "quality": {
              "type": "number"
            },
            "sizes": {
              "type": "string"
            },
            "fill": {
              "type": "boolean"
            },
            "className": {
              "type": "string"
            },
            "placeholder": {
              "type": "string"
            }
          }
        },
        "backgroundColor": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "containerClassName": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "schema_updated_at": "2025-09-25T10:08:49.235476"
  }
}