{
  "name": "stats-cards-with-links",
  "type": "registry:component",
  "description": "TypeScript component (transformed from src/components/ui/stats-cards-with-links.tsx)",
  "title": "Stats Cards With Links",
  "dependencies": [
    "clsx",
    "tailwind-merge"
  ],
  "files": [
    {
      "path": "src/components/ui/stats-cards-with-links.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport clsx from \"clsx\";\nimport { type ClassValue } from \"clsx\";\n\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\nimport { Button } from \"@/components/ui/button\";\n\nfunction cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Background Image props as per guideline\ninterface BgImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\n// Card primitives\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-slot=\"card\"\n    className={cn(\n      \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\ninterface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst CardHeader = React.forwardRef<HTMLDivElement, CardHeaderProps>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-slot=\"card-header\"\n    className={cn(\n      \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n      className\n    )}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\ninterface CardTitleProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst CardTitle = React.forwardRef<HTMLDivElement, CardTitleProps>(({ className, ...props }, ref) => (\n  <div ref={ref} data-slot=\"card-title\" className={cn(\"leading-none font-semibold\", className)} {...props} />\n));\nCardTitle.displayName = \"CardTitle\";\n\ninterface CardDescriptionProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst CardDescription = React.forwardRef<HTMLDivElement, CardDescriptionProps>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-slot=\"card-description\"\n    className={cn(\"text-muted-foreground text-sm\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\ninterface CardActionProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst CardAction = React.forwardRef<HTMLDivElement, CardActionProps>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-slot=\"card-action\"\n    className={cn(\"col-start-2 row-span-2 row-start-1 self-start justify-self-end\", className)}\n    {...props}\n  />\n));\nCardAction.displayName = \"CardAction\";\n\ninterface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst CardContent = React.forwardRef<HTMLDivElement, CardContentProps>(({ className, ...props }, ref) => (\n  <div ref={ref} data-slot=\"card-content\" className={cn(\"px-6\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\ninterface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}\nconst CardFooter = React.forwardRef<HTMLDivElement, CardFooterProps>(({ className, ...props }, ref) => (\n  <div ref={ref} data-slot=\"card-footer\" className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)} {...props} />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport type ChangeType = \"positive\" | \"negative\";\n\nexport interface StatsItem {\n  name: string;\n  value: string;\n  change: string;\n  changeType: ChangeType;\n  href: string;\n  linkText: string;\n  linkTarget?: \"_blank\" | \"_self\";\n  linkRel?: string;\n}\n\nexport interface Stats05Props {\n  items: StatsItem[];\n  backgroundColor?: string;\n  backgroundImage?: BgImageProps;\n  className?: string;\n}\n\nexport default function Stats05({ items, backgroundColor, backgroundImage, className }: Stats05Props) {\n  return (\n    <div\n      className={cn(\"relative flex items-center justify-center p-10 w-full\", className)}\n      style={{ backgroundColor }}\n    >\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\"absolute inset-0 -z-10 object-cover\", backgroundImage.className)}\n        />\n      ) : null}\n\n      <dl className=\"grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 w-full\">\n        {items.map((item) => (\n          <Card key={item.name} className=\"p-0 gap-0\">\n            <CardContent className=\"p-6\">\n              <dd className=\"flex items-start justify-between space-x-2\">\n                <span className=\"truncate text-sm text-muted-foreground\">{item.name}</span>\n                <span\n                  className={cn(\n                    \"text-sm font-medium\",\n                    item.changeType === \"positive\"\n                      ? \"text-emerald-700 dark:text-emerald-500\"\n                      : \"text-red-700 dark:text-red-500\"\n                  )}\n                >\n                  {item.change}\n                </span>\n              </dd>\n              <dd className=\"mt-1 text-3xl font-semibold text-foreground\">{item.value}</dd>\n            </CardContent>\n            <CardFooter className=\"flex justify-end border-t border-border !p-0\">\n              <Button asChild variant=\"link\" className=\"px-6 py-3 text-sm font-medium\">\n                <Link href={item.href} className=\"text-primary hover:text-primary/90\" target={item.linkTarget} rel={item.linkRel}>\n                  {item.linkText}\n                </Link>\n              </Button>\n            </CardFooter>\n          </Card>\n        ))}\n      </dl>\n    </div>\n  );\n}\n"
    }
  ],
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/ephraimduncan/stats-cards-with-links.json",
    "imported_from": "https://21st.dev/r/ephraimduncan/stats-cards-with-links",
    "component_name": "Stats05",
    "component_path": "components/ui/stats-cards-with-links.tsx",
    "props": "Stats05Props",
    "props_path": "components/ui/stats-cards-with-links.tsx",
    "original_file": "src/components/ui/stats-cards-with-links.tsx",
    "transformed_at": "2025-09-23T21:16:24.916635",
    "category": "stats",
    "tags": [
      "trust-building",
      "data-display",
      "responsive-mobile",
      "responsive-desktop",
      "container-bound"
    ],
    "variations": [],
    "schema": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "change": {
                "type": "string"
              },
              "changeType": {
                "enum": [
                  "negative",
                  "positive"
                ],
                "type": "string"
              },
              "href": {
                "type": "string"
              },
              "linkText": {
                "type": "string"
              },
              "linkTarget": {
                "enum": [
                  "_blank",
                  "_self"
                ],
                "type": "string"
              },
              "linkRel": {
                "type": "string"
              }
            }
          }
        },
        "backgroundColor": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string"
            },
            "alt": {
              "type": "string"
            },
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "priority": {
              "type": "boolean"
            },
            "quality": {
              "type": "number"
            },
            "sizes": {
              "type": "string"
            },
            "fill": {
              "type": "boolean"
            },
            "className": {
              "type": "string"
            },
            "placeholder": {
              "type": "string"
            }
          }
        },
        "className": {
          "type": "string"
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "schema_updated_at": "2025-09-25T10:00:23.291739",
    "public_ready": true,
    "public_ready_updated_at": "2025-09-25T11:06:01.104757",
    "variation_creation": true
  }
}