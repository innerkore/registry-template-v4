{
  "name": "grid-feature-cards",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/grid-feature-cards.tsx)",
  "files": [
    {
      "path": "/src/components/blocks/grid-feature-cards.tsx",
      "type": "registry:block",
      "content": "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface Icon {\n  package: \"lucide\";\n  name: string;\n  type: \"icon\";\n  className: string;\n}\n\nexport interface FeatureCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string;\n  description: string;\n  icon: Icon;\n  cta?: {\n    label: string;\n    href: string;\n    target?: \"_blank\" | \"_self\";\n    className?: string;\n    rel?: string;\n  };\n  backgroundImage?: {\n    src: string;\n    alt: string;\n    width: number;\n    height: number;\n    priority?: boolean;\n    quality?: number;\n    sizes?: string;\n    fill?: boolean;\n    className?: string;\n    placeholder?: string;\n  };\n  backgroundColor?: string;\n}\n\nexport function FeatureCard({\n  title,\n  description,\n  icon,\n  cta,\n  backgroundImage,\n  backgroundColor,\n  className,\n  ...props\n}: FeatureCardProps) {\n  const p = genRandomPattern();\n\n  return (\n    <div\n      className={cn(\"relative overflow-hidden p-6\", className)}\n      style={backgroundColor ? { backgroundColor } : undefined}\n      {...props}\n    >\n      {backgroundImage && (\n        <Image\n          {...backgroundImage}\n          className={cn(\n            \"absolute inset-0 -z-10 object-cover\",\n            backgroundImage.className\n          )}\n        />\n      )}\n\n      <div className=\"pointer-events-none absolute top-0 left-1/2 -mt-2 -ml-20 h-full w-full [mask-image:linear-gradient(white,transparent)]\">\n        <div className=\"from-foreground/5 to-foreground/1 absolute inset-0 bg-gradient-to-r [mask-image:radial-gradient(farthest-side_at_top,white,transparent)] opacity-100\">\n          <GridPattern\n            width={20}\n            height={20}\n            x=\"-12\"\n            y=\"4\"\n            squares={p}\n            className=\"fill-foreground/5 stroke-foreground/25 absolute inset-0 h-full w-full mix-blend-overlay\"\n          />\n        </div>\n      </div>\n\n      <DynamicIcon name={icon.name} className={cn(\"text-foreground/75 size-6\", icon.className)} />\n      <h3 className=\"mt-10 text-sm md:text-base\">{title}</h3>\n      <p className=\"text-muted-foreground relative z-20 mt-2 text-xs font-light\">{description}</p>\n\n      {cta && (\n        <div className=\"mt-4\">\n          <Button asChild>\n            <Link\n              href={cta.href}\n              target={cta.target}\n              rel={cta.target === \"_blank\" ? \"noopener noreferrer\" : cta.rel}\n              className={cn(\"inline-flex items-center\", cta.className)}\n            >\n              {cta.label}\n            </Link>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction GridPattern({\n  width,\n  height,\n  x,\n  y,\n  squares,\n  ...props\n}: React.SVGProps<SVGSVGElement> & {\n  width: number;\n  height: number;\n  x: string;\n  y: string;\n  squares?: number[][];\n}) {\n  const patternId = React.useId();\n\n  return (\n    <svg aria-hidden=\"true\" {...props}>\n      <defs>\n        <pattern id={patternId} width={width} height={height} patternUnits=\"userSpaceOnUse\" x={x} y={y}>\n          <path d={`M.5 ${height}V.5H${width}`} fill=\"none\" />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill={`url(#${patternId})`} />\n      {squares && (\n        <svg x={x} y={y} className=\"overflow-visible\">\n          {squares.map(([sx, sy], index) => (\n            <rect\n              strokeWidth=\"0\"\n              key={index}\n              width={width + 1}\n              height={height + 1}\n              x={sx * width}\n              y={sy * height}\n            />)\n          )}\n        </svg>\n      )}\n    </svg>\n  );\n}\n\nfunction genRandomPattern(length?: number): number[][] {\n  const len = length ?? 5;\n  return Array.from({ length: len }, () => [\n    Math.floor(Math.random() * 4) + 7,\n    Math.floor(Math.random() * 6) + 1,\n  ]);\n}\n\nexport default FeatureCard;\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/sshahaider/grid-feature-cards.json",
    "imported_from": "https://21st.dev/r/sshahaider/grid-feature-cards",
    "component_name": "FeatureCard",
    "component_path": "/components/blocks/grid-feature-cards.tsx",
    "props": "FeatureCardProps",
    "props_path": "/components/blocks/grid-feature-cards.tsx",
    "original_file": "/components/blocks/grid-feature-cards.tsx",
    "transformed_at": "2025-09-23T22:01:47.617418",
    "category": "features",
    "tags": [
      "product-highlight",
      "content-container",
      "icon-based",
      "responsive-mobile",
      "simple"
    ],
    "variations": []
  }
}