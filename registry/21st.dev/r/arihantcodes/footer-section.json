{
  "name": "footer-section",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/tooltip.tsx)",
  "title": "None",
  "author": "None",
  "docs": "None",
  "dependencies": [
    "lucide-react",
    "@radix-ui/react-slot",
    "class-variance-authority",
    "@radix-ui/react-label",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-switch",
    "@radix-ui/react-tooltip"
  ],
  "registryDependencies": [
    "https://21st.dev/r/shadcn/button",
    "https://21st.dev/r/shadcn/input",
    "https://21st.dev/r/shadcn/label",
    "https://21st.dev/r/shadcn/switch",
    "https://21st.dev/r/shadcn/textarea",
    "https://21st.dev/r/shadcn/tooltip"
  ],
  "files": [
    {
      "path": "/src/components/ui/footer-section.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\nexport interface QuickLinkItem {\n  label: string;\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  rel?: string;\n  className?: string;\n}\n\nexport interface SocialLinkItem {\n  icon: string; // lucide icon name\n  href: string;\n  label: string; // sr-only label\n  tooltip: string;\n  target?: \"_blank\" | \"_self\";\n  rel?: string;\n}\n\nexport interface FooterSectionProps {\n  // Top-level visuals\n  backgroundImage?: {\n    src: string;\n    alt: string;\n    width: number;\n    height: number;\n    priority?: boolean;\n    quality?: number;\n    sizes?: string;\n    fill?: boolean;\n    className?: string;\n  };\n  backgroundColor?: string;\n\n  // Newsletter block\n  title: string;\n  description: string;\n  emailPlaceholder: string;\n  subscribeAriaLabel: string;\n  onSubscribe?: (email: string) => void | Promise<void>;\n\n  // Quick links\n  quickLinksTitle: string;\n  quickLinks: QuickLinkItem[];\n\n  // Contact block\n  contactTitle: string;\n  addressLines: string[]; // e.g., [\"123 Innovation Street\", \"Tech City, TC 12345\", \"Phone: ...\", \"Email: ...\"]\n\n  // Social block\n  socialTitle: string;\n  socialLinks: SocialLinkItem[];\n\n  // Dark mode\n  darkModeLabel: string; // for sr-only label\n  initialDarkMode: boolean;\n\n  // Footer bottom\n  copyrightText: string;\n  bottomNavLinks: QuickLinkItem[];\n}\n\nexport function FooterSection(props: FooterSectionProps) {\n  const {\n    backgroundImage,\n    backgroundColor,\n    title,\n    description,\n    emailPlaceholder,\n    subscribeAriaLabel,\n    onSubscribe,\n    quickLinksTitle,\n    quickLinks,\n    contactTitle,\n    addressLines,\n    socialTitle,\n    socialLinks,\n    darkModeLabel,\n    initialDarkMode,\n    copyrightText,\n    bottomNavLinks,\n  } = props;\n\n  const [isDarkMode, setIsDarkMode] = React.useState<boolean>(initialDarkMode);\n\n  React.useEffect(() => {\n    if (isDarkMode) {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [isDarkMode]);\n\n  const handleSubscribe = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const email = String(formData.get(\"email\") || \"\");\n    if (onSubscribe) {\n      await onSubscribe(email);\n    }\n  };\n\n  return (\n    <footer\n      className=\"relative border-t bg-background text-foreground transition-colors duration-300\"\n      style={{ backgroundColor }}\n      data-category=\"footer\"\n    >\n      {backgroundImage ? (\n        <div className=\"pointer-events-none absolute inset-0 -z-10\">\n          <Image\n            {...backgroundImage}\n            className={`absolute inset-0 h-full w-full object-cover ${backgroundImage.className || \"\"}`}\n            fill={backgroundImage.fill}\n          />\n        </div>\n      ) : null}\n\n      <div className=\"container mx-auto px-4 py-12 md:px-6 lg:px-8\">\n        <div className=\"grid gap-12 md:grid-cols-2 lg:grid-cols-4\">\n          <div className=\"relative\">\n            <h2 className=\"mb-4 text-3xl font-bold tracking-tight\">{title}</h2>\n            <p className=\"mb-6 text-muted-foreground\">{description}</p>\n\n            <form className=\"relative\" onSubmit={handleSubscribe}>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                placeholder={emailPlaceholder}\n                className=\"pr-12 backdrop-blur-sm\"\n                aria-label={emailPlaceholder}\n                required\n              />\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                className=\"absolute right-1 top-1 h-8 w-8 rounded-full bg-primary text-primary-foreground transition-transform hover:scale-105\"\n                aria-label={subscribeAriaLabel}\n              >\n                <DynamicIcon name=\"Send\" className=\"h-4 w-4\" />\n                <span className=\"sr-only\">{subscribeAriaLabel}</span>\n              </Button>\n            </form>\n\n            <div className=\"absolute -right-4 top-0 h-24 w-24 rounded-full bg-primary/10 blur-2xl\" />\n          </div>\n\n          <div>\n            <h3 className=\"mb-4 text-lg font-semibold\">{quickLinksTitle}</h3>\n            <nav className=\"space-y-2 text-sm\">\n              {quickLinks.map((link) => (\n                <Link\n                  key={`${link.href}-${link.label}`}\n                  href={link.href}\n                  target={link.target}\n                  rel={link.rel}\n                  className={link.className || \"block transition-colors hover:text-primary\"}\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </nav>\n          </div>\n\n          <div>\n            <h3 className=\"mb-4 text-lg font-semibold\">{contactTitle}</h3>\n            <address className=\"space-y-2 text-sm not-italic\">\n              {addressLines.map((line, idx) => (\n                <p key={idx}>{line}</p>\n              ))}\n            </address>\n          </div>\n\n          <div className=\"relative\">\n            <h3 className=\"mb-4 text-lg font-semibold\">{socialTitle}</h3>\n            <TooltipProvider>\n              <div className=\"mb-6 flex space-x-4\">\n                {socialLinks.map((item) => (\n                  <Tooltip key={`${item.href}-${item.label}`}>\n                    <TooltipTrigger asChild>\n                      <Button variant=\"outline\" size=\"icon\" className=\"rounded-full\" asChild>\n                        <Link href={item.href} target={item.target} rel={item.rel} className=\"flex h-9 w-9 items-center justify-center\">\n                          <DynamicIcon name={item.icon} className=\"h-4 w-4\" />\n                          <span className=\"sr-only\">{item.label}</span>\n                        </Link>\n                      </Button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                      <p>{item.tooltip}</p>\n                    </TooltipContent>\n                  </Tooltip>\n                ))}\n              </div>\n            </TooltipProvider>\n\n            <div className=\"flex items-center space-x-2\">\n              <DynamicIcon name=\"Sun\" className=\"h-4 w-4\" />\n              <Switch id=\"dark-mode\" checked={isDarkMode} onCheckedChange={setIsDarkMode} />\n              <DynamicIcon name=\"Moon\" className=\"h-4 w-4\" />\n              <Label htmlFor=\"dark-mode\" className=\"sr-only\">\n                {darkModeLabel}\n              </Label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-12 flex flex-col items-center justify-between gap-4 border-t pt-8 text-center md:flex-row\">\n          <p className=\"text-sm text-muted-foreground\">{copyrightText}</p>\n          <nav className=\"flex gap-4 text-sm\">\n            {bottomNavLinks.map((link) => (\n              <Link\n                key={`${link.href}-${link.label}`}\n                href={link.href}\n                target={link.target}\n                rel={link.rel}\n                className={link.className || \"transition-colors hover:text-primary\"}\n              >\n                {link.label}\n              </Link>\n            ))}\n          </nav>\n        </div>\n      </div>\n    </footer>\n  );\n}\n"
    },
    {
      "path": "/src/components/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    },
    {
      "path": "/src/components/ui/input.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    },
    {
      "path": "/src/components/ui/label.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
    },
    {
      "path": "/src/components/ui/checkbox.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className,\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
    },
    {
      "path": "/src/components/ui/switch.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className,\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\",\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
    },
    {
      "path": "/src/components/ui/textarea.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n"
    },
    {
      "path": "/src/components/ui/tooltip.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
    }
  ],
  "meta": {
    "category": "footer",
    "component_name": "FooterSection",
    "component_path": "/components/ui/footer-section.tsx",
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/arihantcodes/footer-section.json",
    "original_file": "/components/ui/footer-section.tsx",
    "props": "FooterSectionProps",
    "props_path": "/components/ui/footer-section.tsx",
    "public_ready": true,
    "public_ready_updated_at": "2025-09-25T11:10:24.117731",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "properties": {
        "addressLines": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "backgroundColor": {
          "type": "string"
        },
        "backgroundImage": {
          "properties": {
            "alt": {
              "type": "string"
            },
            "className": {
              "type": "string"
            },
            "fill": {
              "type": "boolean"
            },
            "height": {
              "type": "number"
            },
            "priority": {
              "type": "boolean"
            },
            "quality": {
              "type": "number"
            },
            "sizes": {
              "type": "string"
            },
            "src": {
              "type": "string"
            },
            "width": {
              "type": "number"
            }
          },
          "type": "object"
        },
        "bottomNavLinks": {
          "items": {
            "properties": {
              "className": {
                "type": "string"
              },
              "href": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "rel": {
                "type": "string"
              },
              "target": {
                "enum": [
                  "_blank",
                  "_self"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "contactTitle": {
          "type": "string"
        },
        "copyrightText": {
          "type": "string"
        },
        "darkModeLabel": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "emailPlaceholder": {
          "type": "string"
        },
        "initialDarkMode": {
          "type": "boolean"
        },
        "onSubscribe": {
          "type": "object"
        },
        "quickLinks": {
          "items": {
            "properties": {
              "className": {
                "type": "string"
              },
              "href": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "rel": {
                "type": "string"
              },
              "target": {
                "enum": [
                  "_blank",
                  "_self"
                ],
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "quickLinksTitle": {
          "type": "string"
        },
        "socialLinks": {
          "items": {
            "properties": {
              "href": {
                "type": "string"
              },
              "icon": {
                "type": "string"
              },
              "label": {
                "type": "string"
              },
              "rel": {
                "type": "string"
              },
              "target": {
                "enum": [
                  "_blank",
                  "_self"
                ],
                "type": "string"
              },
              "tooltip": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "socialTitle": {
          "type": "string"
        },
        "subscribeAriaLabel": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "schema_updated_at": "2025-09-25T09:59:31.503756",
    "transformed_at": "2025-09-23T21:09:20.829238",
    "variation_creation": true,
    "variations": [],
    "tags": [
      "trust-building",
      "navigation-element",
      "social-proof",
      "responsive-mobile",
      "container-bound",
      "accessibility-optimized"
    ],
    "imported_from": "https://21st.dev/r/arihantcodes/footer-section"
  }
}