{
  "name": "typewriter-effect",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/typewriter-effect.tsx)",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "/src/components/ui/typewriter-effect.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { motion, stagger, useAnimate, useInView } from \"framer-motion\";\nimport { useEffect } from \"react\";\nimport Image from \"@/components/Image\";\n\nexport interface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface Word {\n  text: string;\n  className?: string;\n}\n\nexport interface TypewriterEffectProps {\n  words: Word[];\n  className?: string;\n  cursorClassName?: string;\n  backgroundColor?: string;\n  backgroundImage?: ImageProps;\n}\n\nexport function TypewriterEffect({\n  words,\n  className,\n  cursorClassName,\n  backgroundColor,\n  backgroundImage,\n}: TypewriterEffectProps) {\n  const wordsArray: { text: string[]; className?: string }[] = words.map((word) => ({\n    ...word,\n    text: word.text.split(\"\"),\n  }));\n\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n\n  useEffect(() => {\n    if (isInView) {\n      animate(\n        \"span\",\n        {\n          display: \"inline-block\",\n          opacity: 1,\n          width: \"fit-content\",\n        },\n        {\n          duration: 0.3,\n          delay: stagger(0.1),\n          ease: \"easeInOut\",\n        }\n      );\n    }\n  }, [isInView, animate]);\n\n  const renderWords = () => {\n    return (\n      <motion.div ref={scope} className=\"inline\">\n        {wordsArray.map((word, idx) => (\n          <div key={`word-${idx}`} className=\"inline-block\">\n            {word.text.map((char, index) => (\n              <motion.span\n                initial={{}}\n                key={`char-${index}`}\n                className={cn(\n                  \"dark:text-white text-black opacity-0 hidden\",\n                  word.className\n                )}\n              >\n                {char}\n              </motion.span>\n            ))}\n            &nbsp;\n          </div>\n        ))}\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className={cn(\"relative overflow-hidden\") } style={{ backgroundColor }}>\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\"absolute inset-0 -z-10 object-cover\", backgroundImage.className)}\n        />\n      ) : null}\n\n      <div className={cn(\n        \"text-base sm:text-xl md:text-3xl lg:text-5xl font-bold text-center\",\n        className\n      )}>\n        {renderWords()}\n        <motion.span\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, repeat: Infinity, repeatType: \"reverse\" }}\n          className={cn(\n            \"inline-block rounded-sm w-[4px] h-4 md:h-6 lg:h-10\",\n            cursorClassName\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport type TypewriterEffectSmoothProps = TypewriterEffectProps;\n\nexport function TypewriterEffectSmooth({\n  words,\n  className,\n  cursorClassName,\n  backgroundColor,\n  backgroundImage,\n}: TypewriterEffectSmoothProps) {\n  const wordsArray: { text: string[]; className?: string }[] = words.map((word) => ({\n    ...word,\n    text: word.text.split(\"\"),\n  }));\n\n  const renderWords = () => (\n    <div>\n      {wordsArray.map((word, idx) => (\n        <div key={`word-${idx}`} className=\"inline-block\">\n          {word.text.map((char, index) => (\n            <span key={`char-${index}`} className={cn(\"dark:text-white text-black\", word.className)}>\n              {char}\n            </span>\n          ))}\n          &nbsp;\n        </div>\n      ))}\n    </div>\n  );\n\n  return (\n    <div className={cn(\"relative overflow-hidden\")} style={{ backgroundColor }}>\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\"absolute inset-0 -z-10 object-cover\", backgroundImage.className)}\n        />\n      ) : null}\n\n      <div className={cn(\"flex space-x-1 my-6\", className)}>\n        <motion.div\n          className=\"overflow-hidden pb-2\"\n          initial={{ width: \"0%\" }}\n          whileInView={{ width: \"fit-content\" }}\n          transition={{ duration: 2, ease: \"linear\", delay: 1 }}\n        >\n          <div\n            className=\"text-xs sm:text-base md:text-xl lg:text:3xl xl:text-5xl font-bold\"\n            style={{ whiteSpace: \"nowrap\" }}\n          >\n            {renderWords()}\n          </div>\n        </motion.div>\n        <motion.span\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 0.8, repeat: Infinity, repeatType: \"reverse\" }}\n          className={cn(\"block rounded-sm w-[4px] h-4 sm:h-6 xl:h-12\", cursorClassName)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TypewriterEffect;\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/aceternity/typewriter-effect.json",
    "imported_from": "https://21st.dev/r/aceternity/typewriter-effect",
    "component_name": "TypewriterEffect",
    "component_path": "/components/ui/typewriter-effect.tsx",
    "props": "TypewriterEffectProps",
    "props_path": "/components/ui/typewriter-effect.tsx",
    "original_file": "/components/ui/typewriter-effect.tsx",
    "transformed_at": "2025-09-23T21:05:36.734838",
    "category": "hero",
    "tags": [
      "brand-awareness",
      "animated",
      "visual-dominant",
      "above-fold",
      "responsive-mobile"
    ],
    "variations": []
  }
}