{
  "name": "navbar-menu",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/navbar-menu.tsx)",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "/src/components/ui/navbar-menu.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\nimport React, { ReactNode } from \"react\";\nimport { motion } from \"framer-motion\";\nimport Link from \"@/components/Link\";\nimport Image from \"@/components/Image\";\n\nconst transition = {\n  type: \"spring\",\n  mass: 0.5,\n  damping: 11.5,\n  stiffness: 100,\n  restDelta: 0.001,\n  restSpeed: 0.001,\n};\n\n// Mirror of the ImageProps contract from the shared Image component\ninterface LocalImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface MenuProps {\n  setActive: (item: string | null) => void;\n  children: ReactNode;\n  className?: string;\n  backgroundColor?: string; // Optional background color\n  backgroundImage?: LocalImageProps; // Optional background image\n}\n\nexport const Menu: React.FC<MenuProps> = ({\n  setActive,\n  children,\n  className,\n  backgroundColor,\n  backgroundImage,\n}) => {\n  return (\n    <nav\n      onMouseLeave={() => setActive(null)}\n      className={[\n        \"relative rounded-full border border-transparent shadow-input flex justify-center space-x-4 px-8 py-6\",\n        className,\n      ]\n        .filter(Boolean)\n        .join(\" \")}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage && (\n        <div className=\"absolute inset-0 -z-10 overflow-hidden rounded-full\">\n          <Image\n            {...backgroundImage}\n            className={[\n              \"h-full w-full object-cover\",\n              backgroundImage.className,\n            ]\n              .filter(Boolean)\n              .join(\" \")}\n            fill={backgroundImage.fill}\n          />\n        </div>\n      )}\n      {children}\n    </nav>\n  );\n};\n\nexport interface MenuItemProps {\n  setActive: (item: string) => void;\n  active: string | null;\n  item: string;\n  children?: ReactNode;\n  className?: string;\n}\n\nexport const MenuItem: React.FC<MenuItemProps> = ({\n  setActive,\n  active,\n  item,\n  children,\n  className,\n}) => {\n  return (\n    <div onMouseEnter={() => setActive(item)} className={[\"relative\", className].filter(Boolean).join(\" \")}>      \n      <motion.p\n        transition={{ duration: 0.3 }}\n        className=\"cursor-pointer hover:opacity-[0.9]\"\n      >\n        {item}\n      </motion.p>\n      {active !== null && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.85, y: 10 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          transition={transition}\n        >\n          {active === item && (\n            <div className=\"absolute top-[calc(100%_+_1.2rem)] left-1/2 transform -translate-x-1/2 pt-4\">\n              <motion.div\n                transition={transition}\n                layoutId=\"active\"\n                className=\"backdrop-blur-sm rounded-2xl overflow-hidden border border-black/[0.2] dark:border-white/[0.2] shadow-xl bg-transparent\"\n              >\n                <motion.div layout className=\"w-max h-full p-4\">\n                  {children}\n                </motion.div>\n              </motion.div>\n            </div>\n          )}\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\nexport interface ProductItemProps {\n  title: string;\n  description: string;\n  href: string;\n  image: LocalImageProps;\n  linkTarget?: \"_blank\" | \"_self\";\n  linkRel?: string;\n  className?: string;\n}\n\nexport const ProductItem: React.FC<ProductItemProps> = ({\n  title,\n  description,\n  href,\n  image,\n  linkTarget,\n  linkRel,\n  className,\n}) => {\n  return (\n    <Link href={href} target={linkTarget} rel={linkRel} className={[\"flex space-x-2\", className].filter(Boolean).join(\" \")}>\n      <Image\n        src={image.src}\n        width={image.width}\n        height={image.height}\n        alt={image.alt}\n        className={[\"flex-shrink-0 rounded-md shadow-2xl\", image.className].filter(Boolean).join(\" \")}\n        priority={image.priority}\n        quality={image.quality}\n        sizes={image.sizes}\n        fill={image.fill}\n        placeholder={image.placeholder}\n      />\n      <div>\n        <h4 className=\"text-xl font-bold mb-1\">{title}</h4>\n        <p className=\"text-neutral-700 text-sm max-w-[10rem] dark:text-neutral-300\">{description}</p>\n      </div>\n    </Link>\n  );\n};\n\nexport interface HoveredLinkProps {\n  href: string;\n  children: ReactNode;\n  target?: \"_blank\" | \"_self\";\n  rel?: string;\n  className?: string;\n}\n\nexport const HoveredLink: React.FC<HoveredLinkProps> = ({ children, href, target, rel, className }) => {\n  return (\n    <Link\n      href={href}\n      target={target}\n      rel={rel}\n      className={[\"text-neutral-700 dark:text-neutral-200 hover:text-black\", className].filter(Boolean).join(\" \")}\n    >\n      {children}\n    </Link>\n  );\n};\n\nexport default Menu;\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/aceternity/navbar-menu.json",
    "imported_from": "https://21st.dev/r/aceternity/navbar-menu",
    "component_name": "Menu",
    "component_path": "/components/ui/navbar-menu.tsx",
    "props": "MenuProps",
    "props_path": "/components/ui/navbar-menu.tsx",
    "original_file": "/components/ui/navbar-menu.tsx",
    "transformed_at": "2025-09-23T21:04:18.726957",
    "category": "navigation",
    "tags": [
      "engagement",
      "navigation-element",
      "interactive",
      "responsive-desktop",
      "rounded",
      "header"
    ],
    "variations": [],
    "schema": {
      "type": "object",
      "properties": {
        "setActive": {
          "type": "object"
        },
        "children": {
          "description": "Represents all of the things React can render.\n\nWhere {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered."
        },
        "className": {
          "type": "string"
        },
        "backgroundColor": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "object",
          "properties": {
            "src": {
              "type": "string"
            },
            "alt": {
              "type": "string"
            },
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "priority": {
              "type": "boolean"
            },
            "quality": {
              "type": "number"
            },
            "sizes": {
              "type": "string"
            },
            "fill": {
              "type": "boolean"
            },
            "className": {
              "type": "string"
            },
            "placeholder": {
              "type": "string"
            }
          }
        }
      },
      "$schema": "http://json-schema.org/draft-07/schema#"
    },
    "schema_updated_at": "2025-09-25T09:54:56.561203",
    "public_ready": true,
    "public_ready_updated_at": "2025-09-25T11:05:53.385269"
  }
}