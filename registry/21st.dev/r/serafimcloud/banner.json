{
  "name": "banner",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/banner.tsx)",
  "dependencies": [
    "lucide-react",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "/src/components/ui/banner.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\nconst bannerVariants = cva(\"relative w-full\", {\n  variants: {\n    variant: {\n      default: \"bg-background border border-border\",\n      muted: \"dark bg-muted\",\n      border: \"border-b border-border\",\n    },\n    size: {\n      sm: \"px-4 py-2\",\n      default: \"px-4 py-3\",\n      lg: \"px-4 py-3 md:py-2\",\n    },\n    rounded: {\n      none: \"\",\n      default: \"rounded-lg\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n    size: \"default\",\n    rounded: \"none\",\n  },\n});\n\n// Icon interface as per guidelines\ninterface Icon {\n  package: 'lucide';\n  name: string; // known lucide react icon-name only\n  type: 'icon';\n  className: string; // tailwind classes for styling\n}\n\n// ImageProps interface as per guidelines\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface BannerProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof bannerVariants> {\n  // Optional decorative/content icon on the left\n  icon?: Icon;\n\n  // CTA rendered as Button with embedded Link using asChild\n  actionHref?: string;\n  actionLabel?: string;\n  actionTarget?: '_blank' | '_self';\n  actionRel?: string;\n  actionClassName?: string;\n\n  // Allow custom action slot override (e.g., custom link/button)\n  actionSlot?: React.ReactNode;\n\n  // Close control\n  onClose?: () => void;\n  isClosable?: boolean;\n  closeAriaLabel?: string;\n  closeIcon?: Icon; // Optional custom close icon\n\n  // Layout variants for inner content\n  layout?: 'row' | 'center' | 'complex';\n\n  // Optional background styling\n  backgroundImage?: ImageProps;\n  backgroundColor?: string;\n}\n\nexport const Banner = React.forwardRef<HTMLDivElement, BannerProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      rounded,\n      icon,\n      actionHref,\n      actionLabel,\n      actionTarget,\n      actionRel,\n      actionClassName,\n      actionSlot,\n      onClose,\n      isClosable,\n      closeAriaLabel,\n      closeIcon,\n      layout,\n      backgroundImage,\n      backgroundColor,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const renderIcon = () => {\n      if (!icon) return null;\n      return (\n        <div className=\"flex shrink-0 items-center gap-3\">\n          <DynamicIcon name={icon.name} className={icon.className} />\n        </div>\n      );\n    };\n\n    const renderActions = () => {\n      const hasAction = !!actionSlot || (!!actionHref && !!actionLabel);\n      if (!hasAction && !isClosable) return null;\n\n      return (\n        <div className=\"flex items-center gap-3\">\n          {actionSlot || (\n            actionHref && actionLabel && (\n              <Button asChild className={actionClassName}>\n                <Link href={actionHref} target={actionTarget} rel={actionRel} className=\"inline-flex items-center\">\n                  {actionLabel}\n                </Link>\n              </Button>\n            )\n          )}\n\n          {isClosable && (\n            <Button\n              variant=\"ghost\"\n              className=\"group -my-1.5 -me-2 size-8 shrink-0 p-0 hover:bg-transparent\"\n              onClick={onClose}\n              aria-label={closeAriaLabel}\n            >\n              {closeIcon ? (\n                <DynamicIcon\n                  name={closeIcon.name}\n                  className={cn(\"opacity-60 transition-opacity group-hover:opacity-100\", closeIcon.className)}\n                />\n              ) : (\n                <DynamicIcon name=\"X\" className=\"opacity-60 transition-opacity group-hover:opacity-100\" />\n              )}\n            </Button>\n          )}\n        </div>\n      );\n    };\n\n    const innerContent = (\n      <div\n        className={cn(\n          \"flex gap-2\",\n          layout === \"center\" && \"justify-center\",\n          layout === \"complex\" && \"md:items-center\"\n        )}\n      >\n        {layout === \"complex\" ? (\n          <div className=\"flex grow gap-3 md:items-center\">\n            {icon && (\n              <div className=\"flex shrink-0 items-center gap-3 max-md:mt-0.5\">\n                <DynamicIcon name={icon.name} className={icon.className} />\n              </div>\n            )}\n            <div\n              className={cn(\n                \"flex grow\",\n                layout === \"complex\" && \"flex-col justify-between gap-3 md:flex-row md:items-center\"\n              )}\n            >\n              {children}\n            </div>\n          </div>\n        ) : (\n          <>\n            {renderIcon()}\n            <div className=\"flex grow items-center justify-between gap-3\">{children}</div>\n          </>\n        )}\n        {renderActions()}\n      </div>\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(bannerVariants({ variant, size, rounded }), className)}\n        style={{ backgroundColor: backgroundColor }}\n        {...props}\n      >\n        {backgroundImage && (\n          <Image\n            {...backgroundImage}\n            className={cn(\"absolute inset-0 -z-10 h-full w-full object-cover\", backgroundImage.className)}\n          />\n        )}\n        {innerContent}\n      </div>\n    );\n  }\n);\n\nBanner.displayName = \"Banner\";\n\nexport { bannerVariants };"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "install_url": "s3://registry-marketkore/registry/21st.dev/r/serafimcloud/banner.json",
    "imported_from": "https://21st.dev/r/serafimcloud/banner",
    "component_name": "Banner",
    "component_path": "/components/ui/banner.tsx",
    "props": "BannerProps",
    "props_path": "/components/ui/banner.tsx",
    "original_file": "/components/ui/banner.tsx",
    "transformed_at": "2025-09-23T21:38:13.447318",
    "category": "banner",
    "tags": [
      "conversion-focused",
      "action-trigger",
      "mixed-media",
      "responsive-mobile",
      "full-width",
      "accessibility-optimized"
    ],
    "variations": []
  }
}