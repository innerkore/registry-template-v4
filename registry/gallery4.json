{
  "name": "gallery4",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/gallery4.tsx)",
  "title": "Gallery4",
  "files": [
    {
      "path": "/components/blocks/gallery4.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport React, { useEffect, useState } from \"react\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Carousel,\n  CarouselApi,\n  CarouselContent,\n  CarouselItem,\n} from \"@/components/ui/carousel\";\n\n// Local Image props shape aligned with the designated Image component interface\nexport interface GalleryImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface Gallery4Item {\n  id: string;\n  title: string;\n  description: string;\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  rel?: string;\n  imageSrc: string;\n  imageAlt: string;\n  imageWidth: number;\n  imageHeight: number;\n  imagePriority?: boolean;\n  imageQuality?: number;\n  imageSizes?: string;\n  imageClassName?: string;\n  imagePlaceholder?: string;\n}\n\nexport interface Gallery4Props {\n  title: string;\n  description: string;\n  items: Gallery4Item[];\n  readMoreText: string;\n  goToSlideAriaLabel: string;\n  backgroundColor?: string;\n  backgroundImage?: GalleryImageProps;\n}\n\nconst Gallery4: React.FC<Gallery4Props> = ({\n  title,\n  description,\n  items,\n  readMoreText,\n  goToSlideAriaLabel,\n  backgroundColor,\n  backgroundImage,\n}) => {\n  const [carouselApi, setCarouselApi] = useState<CarouselApi | undefined>(\n    undefined\n  );\n  const [canScrollPrev, setCanScrollPrev] = useState(false);\n  const [canScrollNext, setCanScrollNext] = useState(false);\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  useEffect(() => {\n    if (!carouselApi) return;\n\n    const updateSelection = () => {\n      setCanScrollPrev(carouselApi.canScrollPrev());\n      setCanScrollNext(carouselApi.canScrollNext());\n      setCurrentSlide(carouselApi.selectedScrollSnap());\n    };\n\n    updateSelection();\n    carouselApi.on(\"select\", updateSelection);\n\n    return () => {\n      carouselApi.off(\"select\", updateSelection);\n    };\n  }, [carouselApi]);\n\n  return (\n    <section\n      className=\"relative py-32\"\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage && (\n        <Image\n          src={backgroundImage.src}\n          alt={backgroundImage.alt}\n          width={backgroundImage.width}\n          height={backgroundImage.height}\n          priority={backgroundImage.priority}\n          quality={backgroundImage.quality}\n          sizes={backgroundImage.sizes}\n          fill\n          className={`absolute inset-0 -z-10 object-cover ${\n            backgroundImage.className ? backgroundImage.className : \"\"\n          }`}\n          placeholder={backgroundImage.placeholder}\n        />\n      )}\n\n      <div className=\"container mx-auto\">\n        <div className=\"mb-8 flex items-end justify-between md:mb-14 lg:mb-16\">\n          <div className=\"flex flex-col gap-4\">\n            {title && (\n              <h2 className=\"text-3xl font-medium md:text-4xl lg:text-5xl\">\n                {title}\n              </h2>\n            )}\n            {description && (\n              <p className=\"max-w-lg text-muted-foreground\">{description}</p>\n            )}\n          </div>\n          <div className=\"hidden shrink-0 gap-2 md:flex\">\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={() => {\n                carouselApi?.scrollPrev();\n              }}\n              disabled={!canScrollPrev}\n              className=\"disabled:pointer-events-auto\"\n            >\n              <DynamicIcon name=\"ArrowLeft\" className=\"size-5\" />\n            </Button>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={() => {\n                carouselApi?.scrollNext();\n              }}\n              disabled={!canScrollNext}\n              className=\"disabled:pointer-events-auto\"\n            >\n              <DynamicIcon name=\"ArrowRight\" className=\"size-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"w-full\">\n        <Carousel\n          setApi={setCarouselApi}\n          opts={{\n            breakpoints: {\n              \"(max-width: 768px)\": {\n                dragFree: true,\n              },\n            },\n          }}\n        >\n          <CarouselContent className=\"ml-0 2xl:ml-[max(8rem,calc(50vw-700px))] 2xl:mr-[max(0rem,calc(50vw-700px))]\">\n            {items.map((item) => (\n              <CarouselItem\n                key={item.id}\n                className=\"max-w-[320px] pl-[20px] lg:max-w-[360px]\"\n              >\n                <Button asChild variant=\"ghost\" className=\"group h-auto rounded-xl p-0\">\n                  <Link\n                    href={item.href}\n                    className=\"block rounded-xl\"\n                    target={item.target}\n                    rel={item.rel}\n                  >\n                    <div className=\"group relative h-full min-h-[27rem] max-w-full overflow-hidden rounded-xl md:aspect-[5/4] lg:aspect-[16/9]\">\n                      <Image\n                        src={item.imageSrc}\n                        alt={item.imageAlt}\n                        width={item.imageWidth}\n                        height={item.imageHeight}\n                        priority={item.imagePriority}\n                        quality={item.imageQuality}\n                        sizes={item.imageSizes}\n                        className={`absolute h-full w-full object-cover object-center transition-transform duration-300 group-hover:scale-105 ${\n                          item.imageClassName ? item.imageClassName : \"\"\n                        }`}\n                        placeholder={item.imagePlaceholder}\n                        fill\n                      />\n                      <div className=\"absolute inset-0 h-full bg-[linear-gradient(hsl(var(--primary)/0),hsl(var(--primary)/0.4),hsl(var(--primary)/0.8)_100%)] mix-blend-multiply\" />\n                      <div className=\"absolute inset-x-0 bottom-0 flex flex-col items-start p-6 text-primary-foreground md:p-8\">\n                        <div className=\"mb-2 pt-4 text-xl font-semibold md:mb-3 md:pt-4 lg:pt-4\">\n                          {item.title}\n                        </div>\n                        <div className=\"mb-8 line-clamp-2 md:mb-12 lg:mb-9\">\n                          {item.description}\n                        </div>\n                        <div className=\"flex items-center text-sm\">\n                          {readMoreText}{\" \"}\n                          <DynamicIcon\n                            name=\"ArrowRight\"\n                            className=\"ml-2 size-5 transition-transform group-hover:translate-x-1\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </Link>\n                </Button>\n              </CarouselItem>\n            ))}\n          </CarouselContent>\n        </Carousel>\n        <div className=\"mt-8 flex justify-center gap-2\">\n          {items.map((_, index) => (\n            <button\n              key={index}\n              className={`h-2 w-2 rounded-full transition-colors ${\n                currentSlide === index ? \"bg-primary\" : \"bg-primary/20\"\n              }`}\n              onClick={() => carouselApi?.scrollTo(index)}\n              aria-label={`${goToSlideAriaLabel} ${index + 1}`}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Gallery4;\n"
    }
  ],
  "meta": {
    "component_name": "Gallery4",
    "component_path": "/components/blocks/gallery4.tsx",
    "props": "Gallery4Props",
    "props_path": "/components/blocks/gallery4.tsx",
    "original_file": "/components/blocks/gallery4.tsx",
    "transformed_at": "2025-09-22T19:51:02.218315",
    "category": "gallery",
    "tags": [
      "engagement",
      "media-display",
      "mixed-media",
      "animated",
      "responsive-mobile",
      "consideration-stage"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:51:02.218339",
    "install_url": "s3://registry-marketkore/registry/gallery4.json"
  }
}