{
  "name": "header",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/header.tsx)",
  "title": "Header",
  "files": [
    {
      "path": "/components/ui/header.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n} from \"@/components/ui/navigation-menu\";\nimport Link from \"@/components/Link\";\nimport Image from \"@/components/Image\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\n\n// Image props interface as per guidelines\nexport interface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\nexport interface NavLinkItem {\n  title: string;\n  href: string;\n}\n\nexport interface NavGroupItem {\n  title: string;\n  description: string;\n  items: NavLinkItem[];\n}\n\nexport type NavItem = NavLinkItem | NavGroupItem;\n\nexport interface Header1Props {\n  navigationItems: NavItem[];\n  brandName: string;\n  brandHref: string;\n  // Dropdown CTA inside menu content\n  menuCtaLabel: string;\n  menuCtaHref: string;\n  // Right-side header CTAs\n  rightCtas: {\n    bookDemo: { label: string; href: string };\n    signIn: { label: string; href: string };\n    getStarted: { label: string; href: string };\n  };\n  // Optional background visuals\n  backgroundColor?: string;\n  backgroundImage?: ImageProps;\n  className?: string;\n}\n\nexport function Header1({\n  navigationItems,\n  brandName,\n  brandHref,\n  menuCtaLabel,\n  menuCtaHref,\n  rightCtas,\n  backgroundColor,\n  backgroundImage,\n  className,\n}: Header1Props) {\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <header\n      className={`w-full z-40 fixed top-0 left-0 bg-background ${className ?? \"\"}`}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage ? (\n        <div className=\"absolute inset-0 -z-10\">\n          <Image\n            src={backgroundImage.src}\n            alt={backgroundImage.alt}\n            width={backgroundImage.width}\n            height={backgroundImage.height}\n            priority={backgroundImage.priority}\n            quality={backgroundImage.quality}\n            sizes={backgroundImage.sizes}\n            fill={backgroundImage.fill}\n            className={`object-cover ${backgroundImage.className ?? \"\"}`}\n            placeholder={backgroundImage.placeholder}\n          />\n        </div>\n      ) : null}\n\n      <div className=\"container relative mx-auto min-h-20 flex gap-4 flex-row lg:grid lg:grid-cols-3 items-center\">\n        {/* Left navigation (desktop) */}\n        <div className=\"justify-start items-center gap-4 lg:flex hidden flex-row\">\n          <NavigationMenu className=\"flex justify-start items-start\">\n            <NavigationMenuList className=\"flex justify-start gap-4 flex-row\">\n              {navigationItems.map((item) => (\n                <NavigationMenuItem key={item.title}>\n                  {\"href\" in item ? (\n                    <NavigationMenuLink asChild>\n                      <Link href={item.href} className=\"px-3 py-2 rounded-md text-sm font-medium hover:bg-muted\">\n                        {item.title}\n                      </Link>\n                    </NavigationMenuLink>\n                  ) : (\n                    <>\n                      <NavigationMenuTrigger className=\"font-medium text-sm\">\n                        {item.title}\n                      </NavigationMenuTrigger>\n                      <NavigationMenuContent className=\"!w-[450px] p-4\">\n                        <div className=\"flex flex-col lg:grid grid-cols-2 gap-4\">\n                          <div className=\"flex flex-col h-full justify-between\">\n                            <div className=\"flex flex-col\">\n                              <p className=\"text-base\">{item.title}</p>\n                              <p className=\"text-muted-foreground text-sm\">{item.description}</p>\n                            </div>\n                            <Button size=\"sm\" className=\"mt-10\" asChild>\n                              <Link href={menuCtaHref}>{menuCtaLabel}</Link>\n                            </Button>\n                          </div>\n                          <div className=\"flex flex-col text-sm h-full justify-end\">\n                            {item.items?.map((subItem) => (\n                              <NavigationMenuLink asChild key={subItem.title}>\n                                <Link\n                                  href={subItem.href}\n                                  className=\"flex flex-row justify-between items-center hover:bg-muted py-2 px-4 rounded\"\n                                >\n                                  <span>{subItem.title}</span>\n                                  <DynamicIcon name=\"MoveRight\" className=\"w-4 h-4 text-muted-foreground\" />\n                                </Link>\n                              </NavigationMenuLink>\n                            ))}\n                          </div>\n                        </div>\n                      </NavigationMenuContent>\n                    </>\n                  )}\n                </NavigationMenuItem>\n              ))}\n            </NavigationMenuList>\n          </NavigationMenu>\n        </div>\n\n        {/* Brand */}\n        <div className=\"flex lg:justify-center\">\n          <Link href={brandHref} className=\"font-semibold\">\n            {brandName}\n          </Link>\n        </div>\n\n        {/* Right CTAs (desktop) */}\n        <div className=\"flex justify-end w-full gap-4\">\n          <Button variant=\"ghost\" className=\"hidden md:inline\" asChild>\n            <Link href={rightCtas.bookDemo.href}>{rightCtas.bookDemo.label}</Link>\n          </Button>\n          <div className=\"border-r hidden md:inline\" />\n          <Button variant=\"outline\" asChild>\n            <Link href={rightCtas.signIn.href}>{rightCtas.signIn.label}</Link>\n          </Button>\n          <Button asChild>\n            <Link href={rightCtas.getStarted.href}>{rightCtas.getStarted.label}</Link>\n          </Button>\n        </div>\n\n        {/* Mobile menu toggle */}\n        <div className=\"flex w-12 shrink lg:hidden items-end justify-end\">\n          <Button variant=\"ghost\" onClick={() => setOpen(!isOpen)} aria-label=\"Toggle menu\">\n            {isOpen ? (\n              <DynamicIcon name=\"X\" className=\"w-5 h-5\" />\n            ) : (\n              <DynamicIcon name=\"Menu\" className=\"w-5 h-5\" />\n            )}\n          </Button>\n          {isOpen && (\n            <div className=\"absolute top-20 border-t flex flex-col w-full right-0 bg-background shadow-lg py-4 container gap-8\">\n              {navigationItems.map((item) => (\n                <div key={item.title}>\n                  <div className=\"flex flex-col gap-2\">\n                    {\"href\" in item ? (\n                      <Link href={item.href} className=\"flex justify-between items-center\">\n                        <span className=\"text-lg\">{item.title}</span>\n                        <DynamicIcon name=\"MoveRight\" className=\"w-4 h-4 text-muted-foreground\" />\n                      </Link>\n                    ) : (\n                      <p className=\"text-lg\">{item.title}</p>\n                    )}\n                    {\"items\" in item &&\n                      item.items?.map((subItem) => (\n                        <Link key={subItem.title} href={subItem.href} className=\"flex justify-between items-center\">\n                          <span className=\"text-muted-foreground\">{subItem.title}</span>\n                          <DynamicIcon name=\"MoveRight\" className=\"w-4 h-4\" />\n                        </Link>\n                      ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n}\n"
    }
  ],
  "meta": {
    "component_name": "Header1",
    "component_path": "/components/ui/header.tsx",
    "props": "Header1Props",
    "props_path": "/components/ui/header.tsx",
    "original_file": "/components/ui/header.tsx",
    "transformed_at": "2025-09-22T20:02:05.601054",
    "category": "header",
    "tags": [
      "navigation-element",
      "responsive-mobile",
      "responsive-desktop",
      "fixed-position",
      "above-fold",
      "brand-awareness",
      "composite"
    ],
    "variations": [],
    "created_at": "2025-09-22T20:02:05.601068",
    "install_url": "s3://registry-marketkore/registry/header.json"
  }
}