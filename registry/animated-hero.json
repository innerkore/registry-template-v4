{
  "name": "animated-hero",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/button.tsx)",
  "dependencies": [
    "lucide-react",
    "framer-motion",
    "@radix-ui/react-slot",
    "class-variance-authority"
  ],
  "registryDependencies": [
    "https://21st.dev/r/shadcn/button"
  ],
  "files": [
    {
      "path": "/components/ui/animated-hero.tsx",
      "type": "registry:ui",
      "content": "import { useEffect, useMemo, useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { MoveRight, PhoneCall } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"@/components/Link\";\n\ninterface HeroProps {\n  backgroundColor?: string;\n  backgroundImage?: string;\n  titleText: string;\n  description: string;\n  callToActionUrl: string;\n  callToActionText: string;\n  callToActionPhoneUrl: string;\n  callToActionPhoneText: string;\n}\n\nfunction Hero({\n  backgroundColor,\n  backgroundImage,\n  titleText,\n  description,\n  callToActionUrl,\n  callToActionText,\n  callToActionPhoneUrl,\n  callToActionPhoneText,\n}: HeroProps) {\n  const [titleNumber, setTitleNumber] = useState(0);\n  const titles = useMemo(() => [\"amazing\", \"new\", \"wonderful\", \"beautiful\", \"smart\"], []);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (titleNumber === titles.length - 1) {\n        setTitleNumber(0);\n      } else {\n        setTitleNumber(titleNumber + 1);\n      }\n    }, 2000);\n    return () => clearTimeout(timeoutId);\n  }, [titleNumber, titles]);\n\n  return (\n    <div className=\"w-full\" style={{ backgroundColor, backgroundImage: `url(${backgroundImage})` }}>\n      <div className=\"container mx-auto\">\n        <div className=\"flex gap-8 py-20 lg:py-40 items-center justify-center flex-col\">\n          <div>\n            <Button variant=\"secondary\" size=\"sm\" className=\"gap-4\" asChild>\n              <Link href={callToActionUrl}>{callToActionText} <MoveRight className=\"w-4 h-4\" /></Link>\n            </Button>\n          </div>\n          <div className=\"flex gap-4 flex-col\">\n            <h1 className=\"text-5xl md:text-7xl max-w-2xl tracking-tighter text-center font-regular\">\n              <span className=\"text-spektr-cyan-50\">{titleText}</span>\n              <span className=\"relative flex w-full justify-center overflow-hidden text-center md:pb-4 md:pt-1\">\n                &nbsp;\n                {titles.map((title, index) => (\n                  <motion.span\n                    key={index}\n                    className=\"absolute font-semibold\"\n                    initial={{ opacity: 0, y: \"-100\" }}\n                    transition={{ type: \"spring\", stiffness: 50 }}\n                    animate={\n                      titleNumber === index\n                        ? { y: 0, opacity: 1 }\n                        : { y: titleNumber > index ? -150 : 150, opacity: 0 }\n                    }\n                  >\n                    {title}\n                  </motion.span>\n                ))}\n              </span>\n            </h1>\n\n            <p className=\"text-lg md:text-xl leading-relaxed tracking-tight text-muted-foreground max-w-2xl text-center\">\n              {description}\n            </p>\n          </div>\n          <div className=\"flex flex-row gap-3\">\n            <Button size=\"lg\" className=\"gap-4\" variant=\"outline\" asChild>\n              <Link href={callToActionPhoneUrl}>{callToActionPhoneText} <PhoneCall className=\"w-4 h-4\" /></Link>\n            </Button>\n            <Button size=\"lg\" className=\"gap-4\" asChild>\n              <Link href={callToActionUrl}>{callToActionText} <MoveRight className=\"w-4 h-4\" /></Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { Hero };"
    },
    {
      "path": "/components/ui/button.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/tommyjepsen/animated-hero",
    "component_name": "Hero",
    "component_path": "/components/ui/animated-hero.tsx",
    "props": "HeroProps",
    "props_path": "/components/ui/animated-hero.tsx",
    "original_file": "/components/ui/animated-hero.tsx",
    "transformed_at": "2025-09-18T21:25:26.248474",
    "category": "hero",
    "tags": [
      "action-trigger",
      "visual-dominant",
      "text-heavy",
      "above-fold",
      "conversion-focused",
      "awareness-stage"
    ],
    "variations": []
  }
}