{
  "name": "retro-testimonial",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/retro-testimonial.tsx)",
  "title": "Retro Testimonial",
  "files": [
    {
      "path": "/components/blocks/retro-testimonial.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport Image from \"@/components/Image\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport { cn } from \"@/lib/utils\";\n\n// Types\nexport interface Testimonial {\n  name: string;\n  designation: string;\n  description: string;\n  profileImageSrc: string;\n  profileImageAlt: string;\n}\n\nexport interface TestimonialsCarouselProps {\n  testimonials: Testimonial[];\n  initialScroll?: number;\n  layout?: boolean;\n  backgroundImage?: { src: string; alt: string };\n  backgroundColor?: string;\n}\n\n// Hook\nconst useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement | null>,\n  onOutsideClick: () => void\n) => {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (!ref.current || ref.current.contains(event.target as Node)) return;\n      onOutsideClick();\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"touchstart\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"touchstart\", handleClickOutside);\n    };\n  }, [ref, onOutsideClick]);\n};\n\n// Sub-components\ninterface TestimonialCardProps {\n  testimonial: Testimonial;\n  index: number;\n  layout?: boolean;\n  onCardClose?: () => void;\n  backgroundImage?: { src: string; alt: string };\n  backgroundColor?: string;\n}\n\nconst TestimonialCard: React.FC<TestimonialCardProps> = ({\n  testimonial,\n  index,\n  layout,\n  onCardClose,\n  backgroundImage,\n  backgroundColor,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleExpand = () => setIsExpanded(true);\n  const handleCollapse = () => {\n    setIsExpanded(false);\n    if (onCardClose) onCardClose();\n  };\n\n  useEffect(() => {\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") handleCollapse();\n    };\n\n    if (isExpanded) {\n      const scrollY = typeof window !== \"undefined\" ? window.scrollY : 0;\n      document.body.style.position = \"fixed\";\n      document.body.style.top = `-${scrollY}px`;\n      document.body.style.width = \"100%\";\n      document.body.style.overflow = \"hidden\";\n      (document.body as HTMLBodyElement & { dataset: { scrollY?: string } }).dataset.scrollY = String(scrollY);\n    } else {\n      const stored = (document.body as HTMLBodyElement & { dataset: { scrollY?: string } }).dataset.scrollY;\n      const scrollY = stored ? parseInt(stored, 10) : 0;\n      document.body.style.position = \"\";\n      document.body.style.top = \"\";\n      document.body.style.width = \"\";\n      document.body.style.overflow = \"\";\n      if (typeof window !== \"undefined\") window.scrollTo({ top: scrollY, behavior: \"auto\" });\n    }\n\n    window.addEventListener(\"keydown\", handleEscapeKey);\n    return () => window.removeEventListener(\"keydown\", handleEscapeKey);\n  }, [isExpanded]);\n\n  useOutsideClick(containerRef, handleCollapse);\n\n  return (\n    <>\n      <AnimatePresence>\n        {isExpanded && (\n          <div className=\"fixed inset-0 h-screen overflow-hidden z-50\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"bg-black/40 backdrop-blur-lg h-full w-full fixed inset-0\"\n            />\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              ref={containerRef}\n              layoutId={layout ? `card-${testimonial.name}` : undefined}\n              className=\"max-w-5xl mx-auto h-full z-[60] p-4 md:p-10 rounded-3xl relative md:mt-10\"\n              style={{ backgroundColor: backgroundColor || undefined }}\n            >\n              <button\n                aria-label=\"Close testimonial\"\n                className=\"sticky top-4 h-8 w-8 right-0 ml-auto rounded-full flex items-center justify-center bg-[#4b3f33]\"\n                onClick={handleCollapse}\n                type=\"button\"\n              >\n                <DynamicIcon name=\"X\" className=\"h-6 w-6 text-white absolute\" />\n              </button>\n              <motion.p\n                layoutId={layout ? `category-${testimonial.name}` : undefined}\n                className=\"px-0 md:px-20 text-[rgba(31,27,29,0.7)] text-lg font-thin underline underline-offset-8\"\n              >\n                {testimonial.designation}\n              </motion.p>\n              <motion.p\n                layoutId={layout ? `title-${testimonial.name}` : undefined}\n                className=\"px-0 md:px-20 text-2xl md:text-4xl font-normal italic text-[rgba(31,27,29,0.7)] mt-4\"\n              >\n                {testimonial.name}\n              </motion.p>\n              <div className=\"py-8 text-[rgba(31,27,29,0.7)] px-0 md:px-20 text-3xl lowercase font-thin leading-snug tracking-wide\">\n                <DynamicIcon name=\"Quote\" className=\"h-6 w-6 text-[rgba(31,27,29,0.7)]\" />\n                {testimonial.description}\n              </div>\n            </motion.div>\n          </div>\n        )}\n      </AnimatePresence>\n      <motion.button\n        layoutId={layout ? `card-${testimonial.name}` : undefined}\n        onClick={handleExpand}\n        className=\"\"\n        type=\"button\"\n        whileHover={{ rotateX: 2, rotateY: 2, rotate: 3, scale: 1.02, transition: { duration: 0.3, ease: \"easeOut\" } }}\n      >\n        <div\n          className={cn(\n            `${index % 2 === 0 ? \"rotate-0\" : \"-rotate-0\"} rounded-3xl h-[500px] md:h-[550px] w-80 md:w-96 overflow-hidden flex flex-col items-center justify-center relative z-10 shadow-md`)\n          }\n          style={{ backgroundColor: backgroundColor || undefined }}\n        >\n          {backgroundImage && (\n            <div className=\"absolute opacity-30 inset-0\">\n              <div className=\"absolute inset-0\">\n                <Image\n                  src={backgroundImage.src}\n                  alt={backgroundImage.alt}\n                  fill={true}\n                  width={1}\n                  height={1}\n                  className=\"block w-full h-full object-center object-cover\"\n                />\n              </div>\n            </div>\n          )}\n          <ProfileImage src={testimonial.profileImageSrc} alt={testimonial.profileImageAlt} width={150} height={150} />\n          <motion.p\n            layoutId={layout ? `title-${testimonial.name}` : undefined}\n            className=\"text-[rgba(31,27,29,0.7)] text-2xl md:text-2xl font-normal text-center [text-wrap:balance] mt-4 lowercase px-3\"\n          >\n            {testimonial.description.length > 100\n              ? `${testimonial.description.slice(0, 100)}...`\n              : testimonial.description}\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `category-${testimonial.name}` : undefined}\n            className=\"text-[rgba(31,27,29,0.7)] text-xl md:text-2xl font-thin italic text-center mt-5 lowercase\"\n          >\n            {testimonial.name}.\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `category-${testimonial.name}` : undefined}\n            className=\"text-[rgba(31,27,29,0.7)] text-base md:text-base font-thin italic text-center mt-1 lowercase underline underline-offset-8 decoration-1\"\n          >\n            {testimonial.designation.length > 25\n              ? `${testimonial.designation.slice(0, 25)}...`\n              : testimonial.designation}\n          </motion.p>\n        </div>\n      </motion.button>\n    </>\n  );\n};\n\ninterface ProfileImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  className?: string;\n}\n\nconst ProfileImage: React.FC<ProfileImageProps> = ({ src, alt, width, height, className }) => {\n  return (\n    <div className=\"w-[90px] h-[90px] md:w-[150px] md:h-[150px] opacity-80 overflow-hidden rounded-[1000px] border-[3px] border-solid border-[rgba(59,59,59,0.6)] aspect-[1/1] flex-none saturate-[0.2] sepia-[0.46] relative\">\n      <Image\n        className={cn(\"absolute inset-0 rounded-[1000px] object-cover z-50\", className)}\n        src={src}\n        width={width}\n        height={height}\n        alt={alt}\n      />\n    </div>\n  );\n};\n\n// Main Component\nconst TestimonialsCarousel: React.FC<TestimonialsCarouselProps> = ({\n  testimonials,\n  initialScroll,\n  layout,\n  backgroundImage,\n  backgroundColor,\n}) => {\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(true);\n\n  const checkScrollability = () => {\n    if (carouselRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n    }\n  };\n\n  const handleScrollLeft = () => {\n    if (carouselRef.current) carouselRef.current.scrollBy({ left: -300, behavior: \"smooth\" });\n  };\n\n  const handleScrollRight = () => {\n    if (carouselRef.current) carouselRef.current.scrollBy({ left: 300, behavior: \"smooth\" });\n  };\n\n  const handleCardClose = (index: number) => {\n    if (carouselRef.current) {\n      const isMobile = typeof window !== \"undefined\" ? window.innerWidth < 768 : false;\n      const cardWidth = isMobile ? 230 : 384;\n      const gap = isMobile ? 4 : 8;\n      const scrollPosition = (cardWidth + gap) * (index + 1);\n      carouselRef.current.scrollTo({ left: scrollPosition, behavior: \"smooth\" });\n    }\n  };\n\n  useEffect(() => {\n    if (carouselRef.current && typeof initialScroll === \"number\") {\n      carouselRef.current.scrollLeft = initialScroll;\n      checkScrollability();\n    }\n  }, [initialScroll]);\n\n  return (\n    <div className=\"relative w-full mt-10\">\n      <div\n        className=\"flex w-full overflow-x-scroll overscroll-x-auto scroll-smooth [scrollbar-width:none] py-5\"\n        ref={carouselRef}\n        onScroll={checkScrollability}\n      >\n        <div className={cn(\"absolute right-0 z-[1000] h-auto w-[5%] overflow-hidden bg-gradient-to-l\")} />\n        <div className={cn(\"flex flex-row justify-start gap-4 pl-3\", \"max-w-5xl mx-auto\")}>\n          {testimonials.map((t, index) => (\n            <motion.div\n              key={`card-${index}`}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{\n                opacity: 1,\n                y: 0,\n                transition: { duration: 0.5, delay: 0.2 * index, ease: \"easeOut\" },\n              }}\n              className=\"last:pr-[5%] md:last:pr-[33%] rounded-3xl\"\n            >\n              <TestimonialCard\n                testimonial={t}\n                index={index}\n                layout={layout}\n                onCardClose={() => handleCardClose(index)}\n                backgroundImage={backgroundImage}\n                backgroundColor={backgroundColor}\n              />\n            </motion.div>\n          ))}\n        </div>\n      </div>\n      <div className=\"flex justify-end gap-2 mt-4\">\n        <button\n          aria-label=\"Scroll testimonials left\"\n          className=\"relative z-40 h-10 w-10 rounded-full bg-[#4b3f33] flex items-center justify-center disabled:opacity-50 hover:bg-[#4b3f33]/80 transition-colors duration-200\"\n          onClick={handleScrollLeft}\n          disabled={!canScrollLeft}\n          type=\"button\"\n        >\n          <DynamicIcon name=\"ArrowLeft\" className=\"h-6 w-6 text-[#f2f0eb]\" />\n        </button>\n        <button\n          aria-label=\"Scroll testimonials right\"\n          className=\"relative z-40 h-10 w-10 rounded-full bg-[#4b3f33] flex items-center justify-center disabled:opacity-50 hover:bg-[#4b3f33]/80 transition-colors duration-200\"\n          onClick={handleScrollRight}\n          disabled={!canScrollRight}\n          type=\"button\"\n        >\n          <DynamicIcon name=\"ArrowRight\" className=\"h-6 w-6 text-[#f2f0eb]\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TestimonialsCarousel;\n"
    }
  ],
  "meta": {
    "component_name": "TestimonialsCarousel",
    "component_path": "/components/blocks/retro-testimonial.tsx",
    "props": "TestimonialsCarouselProps",
    "props_path": "/components/blocks/retro-testimonial.tsx",
    "original_file": "/components/blocks/retro-testimonial.tsx",
    "transformed_at": "2025-09-22T19:07:47.506828",
    "category": "testimonials",
    "tags": [
      "trust-building",
      "social-proof",
      "mixed-media",
      "responsive-mobile",
      "interactive",
      "animated"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:07:47.506845"
  }
}