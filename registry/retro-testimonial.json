{
  "name": "retro-testimonial",
  "type": "registry:block",
  "description": "TypeScript component (transformed from /components/blocks/retro-testimonial.tsx)",
  "dependencies": [
    "next",
    "lucide-react",
    "framer-motion"
  ],
  "files": [
    {
      "path": "/components/blocks/retro-testimonial.tsx",
      "type": "registry:ui",
      "content": "import React, { useEffect, useRef, useState } from \"react\";\nimport Image from \"next/image\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { ImageProps } from \"next/image\";\nimport { ArrowLeft, ArrowRight, Quote, X } from \"lucide-react\";\nimport Link from \"@/components/Link\";\nimport { cn } from \"@/lib/utils\";\n\n// ===== Types and Interfaces =====\nexport interface iTestimonial {\n  name: string;\n  designation: string;\n  description: string;\n  profileImage: string;\n}\n\nexport interface CarouselProps {\n  items: React.ReactElement<{\n    testimonial: iTestimonial;\n    index: number;\n    layout?: boolean;\n    onCardClose: () => void;\n  }>[];\n  initialScroll?: number;\n  backgroundImage?: string;\n  backgroundColor?: string;\n}\n\n// ===== Custom Hooks =====\nconst useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement | null>,\n  onOutsideClick: () => void\n) => {\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent | TouchEvent) => {\n      if (!ref.current || ref.current.contains(event.target as Node)) {\n        return;\n      }\n      onOutsideClick();\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"touchstart\", handleClickOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"touchstart\", handleClickOutside);\n    };\n  }, [ref, onOutsideClick]);\n};\n\n// ===== Components =====\nconst Carousel = ({ items, initialScroll = 0, backgroundImage, backgroundColor }: CarouselProps) => {\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(true);\n\n  const checkScrollability = () => {\n    if (carouselRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n    }\n  };\n\n  const handleScrollLeft = () => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({ left: -300, behavior: \"smooth\" });\n    }\n  };\n\n  const handleScrollRight = () => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({ left: 300, behavior: \"smooth\" });\n    }\n  };\n\n  const handleCardClose = (index: number) => {\n    if (carouselRef.current) {\n      const cardWidth = isMobile() ? 230 : 384;\n      const gap = isMobile() ? 4 : 8;\n      const scrollPosition = (cardWidth + gap) * (index + 1);\n      carouselRef.current.scrollTo({\n        left: scrollPosition,\n        behavior: \"smooth\",\n      });\n    }\n  };\n\n  const isMobile = () => {\n    return window && window.innerWidth < 768;\n  };\n\n  useEffect(() => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollLeft = initialScroll;\n      checkScrollability();\n    }\n  }, [initialScroll]);\n\n  return (\n    <div className=\"relative w-full mt-10\" style={{ backgroundImage: `url(${backgroundImage})`, backgroundColor }}>\n      <div\n        className=\"flex w-full overflow-x-scroll overscroll-x-auto scroll-smooth [scrollbar-width:none] py-5\"\n        ref={carouselRef}\n        onScroll={checkScrollability}\n      >\n        <div className={cn(\n          \"absolute right-0 z-[1000] h-auto w-[5%] overflow-hidden bg-gradient-to-l\",\n        )} />\n        <div className={cn(\n          \"flex flex-row justify-start gap-4 pl-3\",\n          \"max-w-5xl mx-auto\",\n        )}>\n          {items.map((item, index) => {\n            return (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  transition: {\n                    duration: 0.5,\n                    delay: 0.2 * index,\n                    ease: \"easeOut\",\n                    once: true,\n                  },\n                }}\n                key={`card-${index}`}\n                className=\"last:pr-[5%] md:last:pr-[33%] rounded-3xl\"\n              >\n                {React.cloneElement(item, {\n                  onCardClose: () => {\n                    return handleCardClose(index);\n                  },\n                })}\n              </motion.div>\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"flex justify-end gap-2 mt-4\">\n        <button\n          className=\"relative z-40 h-10 w-10 rounded-full bg-[#4b3f33] flex items-center justify-center disabled:opacity-50 hover:bg-[#4b3f33]/80 transition-colors duration-200\"\n          onClick={handleScrollLeft}\n          disabled={!canScrollLeft}\n        >\n          <ArrowLeft className=\"h-6 w-6 text-[#f2f0eb]\" />\n        </button>\n        <button\n          className=\"relative z-40 h-10 w-10 rounded-full bg-[#4b3f33] flex items-center justify-center disabled:opacity-50 hover:bg-[#4b3f33]/80 transition-colors duration-200\"\n          onClick={handleScrollRight}\n          disabled={!canScrollRight}\n        >\n          <ArrowRight className=\"h-6 w-6 text-[#f2f0eb]\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst TestimonialCard = ({\n  testimonial,\n  index,\n  layout = false,\n  onCardClose = () => {},\n  backgroundImage,\n}: {\n  testimonial: iTestimonial;\n  index: number;\n  layout?: boolean;\n  onCardClose?: () => void;\n  backgroundImage?: string;\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleExpand = () => {\n    return setIsExpanded(true);\n  };\n  const handleCollapse = () => {\n    setIsExpanded(false);\n    onCardClose();\n  };\n\n  useEffect(() => {\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        handleCollapse();\n      }\n    };\n\n    if (isExpanded) {\n      const scrollY = window.scrollY;\n      document.body.style.position = \"fixed\";\n      document.body.style.top = `-${scrollY}px`;\n      document.body.style.width = \"100%\";\n      document.body.style.overflow = \"hidden\";\n      document.body.dataset.scrollY = scrollY.toString();\n    } else {\n      const scrollY = parseInt(document.body.dataset.scrollY || \"0\", 10);\n      document.body.style.position = \"\";\n      document.body.style.top = \"\";\n      document.body.style.width = \"\";\n      document.body.style.overflow = \"\";\n      window.scrollTo({ top: scrollY, behavior: \"instant\" });\n    }\n\n    window.addEventListener(\"keydown\", handleEscapeKey);\n    return () => {\n      return window.removeEventListener(\"keydown\", handleEscapeKey);\n    };\n  }, [isExpanded]);\n\n  useOutsideClick(containerRef, handleCollapse);\n\n  return (\n    <>\n      <AnimatePresence>\n        {isExpanded && (\n          <div className=\"fixed inset-0 h-screen overflow-hidden z-50\">\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"bg-red backdrop-blur-lg h-full w-full fixed inset-0\"\n            />\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              ref={containerRef}\n              layoutId={layout ? `card-${testimonial.name}` : undefined}\n              className=\"max-w-5xl mx-auto bg-gradient-to-b from-[#f2f0eb] to-[#fff9eb] h-full z-[60] p-4 md:p-10 rounded-3xl relative md:mt-10\"\n            >\n              <button\n                className=\"sticky top-4 h-8 w-8 right-0 ml-auto rounded-full flex items-center justify-center bg-[#4b3f33]\"\n                onClick={handleCollapse}\n              >\n                <X className=\"h-6 w-6 text-white dark:text-neutral-900 absolute\" />\n              </button>\n              <motion.p\n                layoutId={layout ? `category-${testimonial.name}` : undefined}\n                className=\"px-0 md:px-20 text-[rgba(31, 27, 29, 0.7)] text-lg dark:text-white font-thin font-tiemposHeadline underline underline-offset-8\"\n              >\n                {testimonial.designation}\n              </motion.p>\n              <motion.p\n                layoutId={layout ? `title-${testimonial.name}` : undefined}\n                className=\"px-0 md:px-20 text-2xl md:text-4xl font-normal italic text-[rgba(31, 27, 29, 0.7)] mt-4 dark:text-white font-tiemposHeadline lowercase\"\n              >\n                {testimonial.name}\n              </motion.p>\n              <div className=\"py-8 text-[rgba(31, 27, 29, 0.7)] px-0 md:px-20 text-3xl lowercase font-thin font-tiemposHeadline leading-snug tracking-wide\">\n                <Quote className=\"h-6 w-6 text-[rgba(31, 27, 29, 0.7)] dark:text-neutral-900\" />\n                {testimonial.description}\n              </div>\n            </motion.div>\n          </div>\n        )}\n      </AnimatePresence>\n      <motion.button\n        layoutId={layout ? `card-${testimonial.name}` : undefined}\n        onClick={handleExpand}\n        className=\"\"\n        whileHover={{\n          rotateX: 2,\n          rotateY: 2,\n          rotate: 3,\n          scale: 1.02,\n          transition: { duration: 0.3, ease: \"easeOut\" },\n        }}\n      >\n        <div\n          className={`${index % 2 === 0 ? \"rotate-0\" : \"-rotate-0\"} rounded-3xl bg-gradient-to-b from-[#f2f0eb] to-[#fff9eb] h-[500px] md:h-[550px] w-80 md:w-96 overflow-hidden flex flex-col items-center justify-center relative z-10 shadow-md`}\n        >\n          <ProfileImage src={testimonial.profileImage} alt={testimonial.name} />\n          <motion.p\n            layoutId={layout ? `title-${testimonial.name}` : undefined}\n            className=\"text-[rgba(31, 27, 29, 0.7)] text-2xl md:text-2xl font-normal text-center [text-wrap:balance] font-tiemposHeadline mt-4 lowercase px-3\"\n          >\n            {testimonial.description.length > 100\n              ? `${testimonial.description.slice(0, 100)}...`\n              : testimonial.description}\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `category-${testimonial.name}` : undefined}\n            className=\"text-[rgba(31, 27, 29, 0.7)] text-xl md:text-2xl font-thin font-tiemposHeadline italic text-center mt-5 lowercase\"\n          >\n            {testimonial.name}.\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `category-${testimonial.name}` : undefined}\n            className=\"text-[rgba(31, 27, 29, 0.7)] text-base md:text-base font-thin font-tiemposHeadline italic text-center mt-1 lowercase underline underline-offset-8 decoration-1\"\n          >\n            {testimonial.designation.length > 25\n              ? `${testimonial.designation.slice(0, 25)}...`\n              : testimonial.designation}\n          </motion.p>\n        </div>\n      </motion.button>\n    </>\n  );\n};\n\nconst ProfileImage = ({ src, alt, ...rest }: ImageProps) => {\n  const [isLoading, setLoading] = useState(true);\n\n  return (\n    <div className=\"w-[90px] h-[90px] md:w-[150px] md:h-[150px] opacity-80 overflow-hidden rounded-[1000px] border-[3px] border-solid border-[rgba(59,59,59,0.6)] aspect-[1/1] flex-none saturate-[0.2] sepia-[0.46] relative\">\n      <Image\n        className={cn(\n          \"transition duration-300 absolute top-0 inset-0 rounded-inherit object-cover z-50\",\n          isLoading ? \"blur-sm\" : \"blur-0\"\n        )}\n        onLoad={() => {\n          return setLoading(false);\n        }}\n        src={src}\n        width={150}\n        height={150}\n        loading=\"lazy\"\n        decoding=\"async\"\n        blurDataURL={typeof src === \"string\" ? src : undefined}\n        alt={alt || \"Profile image\"}\n        {...rest}\n      />\n    </div>\n  );\n};\n\n// Export the components\nexport { Carousel, TestimonialCard, ProfileImage };"
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/ishamsu/retro-testimonial",
    "component_name": "Carousel",
    "component_path": "/components/blocks/retro-testimonial.tsx",
    "props": "CarouselProps",
    "props_path": "/components/blocks/retro-testimonial.tsx",
    "original_file": "/components/blocks/retro-testimonial.tsx",
    "transformed_at": "2025-09-19T06:14:58.527884",
    "category": "carousel",
    "tags": [
      "content-container",
      "mixed-media",
      "interactive-element",
      "responsive-desktop",
      "lead-generation"
    ],
    "variations": []
  }
}