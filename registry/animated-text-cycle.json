{
  "name": "animated-text-cycle",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "path": "/components/ui/animated-text-cycle.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\ninterface AnimatedTextCycleProps {\n  words: string[];\n  interval?: number;\n  className?: string;\n}\n\nexport default function AnimatedTextCycle({\n  words,\n  interval = 5000,\n  className = \"\",\n}: AnimatedTextCycleProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [width, setWidth] = useState(\"auto\");\n  const measureRef = useRef<HTMLDivElement>(null);\n\n  // Get the width of the current word\n  useEffect(() => {\n    if (measureRef.current) {\n      const elements = measureRef.current.children;\n      if (elements.length > currentIndex) {\n        // Add a small buffer (10px) to prevent text wrapping\n        const newWidth = elements[currentIndex].getBoundingClientRect().width;\n        setWidth(`${newWidth}px`);\n      }\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % words.length);\n    }, interval);\n\n    return () => clearInterval(timer);\n  }, [interval, words.length]);\n\n  // Container animation for the whole word\n  const containerVariants = {\n    hidden: { \n      y: -20,\n      opacity: 0,\n      filter: \"blur(8px)\"\n    },\n    visible: {\n      y: 0,\n      opacity: 1,\n      filter: \"blur(0px)\",\n      transition: {\n        duration: 0.4,\n        ease: \"easeOut\"\n      }\n    },\n    exit: { \n      y: 20,\n      opacity: 0,\n      filter: \"blur(8px)\",\n      transition: { \n        duration: 0.3, \n        ease: \"easeIn\"\n      }\n    },\n  };\n\n  return (\n    <>\n      {/* Hidden measurement div with all words rendered */}\n      <div \n        ref={measureRef} \n        aria-hidden=\"true\"\n        className=\"absolute opacity-0 pointer-events-none\"\n        style={{ visibility: \"hidden\" }}\n      >\n        {words.map((word, i) => (\n          <span key={i} className={`font-bold ${className}`}>\n            {word}\n          </span>\n        ))}\n      </div>\n\n      {/* Visible animated word */}\n      <motion.span \n        className=\"relative inline-block\"\n        animate={{ \n          width,\n          transition: { \n            type: \"spring\",\n            stiffness: 150,\n            damping: 15,\n            mass: 1.2,\n          }\n        }}\n      >\n        <AnimatePresence mode=\"wait\" initial={false}>\n          <motion.span\n            key={currentIndex}\n            className={`inline-block font-bold ${className}`}\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            style={{ whiteSpace: \"nowrap\" }}\n          >\n            {words[currentIndex]}\n          </motion.span>\n        </AnimatePresence>\n      </motion.span>\n    </>\n  );\n} "
    }
  ],
  "tailwind": {
    "config": {}
  },
  "meta": {
    "imported_from": "https://21st.dev/r/thimows/animated-text-cycle"
  }
}