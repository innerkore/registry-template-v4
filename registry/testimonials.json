{
  "name": "testimonials",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/testimonials.tsx)",
  "title": "Testimonials",
  "files": [
    {
      "path": "/components/ui/testimonials.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport Image from \"@/components/Image\";\nimport Link from \"@/components/Link\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\n\ninterface TestimonialImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\ninterface TestimonialItem {\n  image: TestimonialImageProps;\n  name: string;\n  username: string;\n  text: string;\n  socialHref: string;\n  socialIconName: string; // lucide-react icon name (e.g., \"Twitter\")\n  socialAriaLabel?: string;\n}\n\nexport interface TestimonialsProps {\n  testimonials: TestimonialItem[];\n  className?: string;\n  title?: string;\n  description?: string;\n  maxDisplayed?: number;\n  loadMoreLabel?: string;\n  backgroundImage?: TestimonialImageProps;\n  backgroundColor?: string;\n}\n\nexport function Testimonials({\n  testimonials,\n  className,\n  title,\n  description,\n  maxDisplayed,\n  loadMoreLabel,\n  backgroundImage,\n  backgroundColor,\n}: TestimonialsProps) {\n  const [showAll, setShowAll] = useState(false);\n\n  const limit = !showAll && typeof maxDisplayed === \"number\" ? maxDisplayed : testimonials.length;\n  const displayedTestimonials = testimonials.slice(0, limit);\n  const showLoadMore = typeof maxDisplayed === \"number\" && testimonials.length > maxDisplayed && !showAll;\n\n  return (\n    <div className={cn(\"relative\", className)} style={{ backgroundColor }}>\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\"absolute inset-0 -z-10 object-cover\", backgroundImage.className)}\n        />\n      ) : null}\n\n      {(title || description) && (\n        <div className=\"flex flex-col items-center justify-center pt-5\">\n          <div className=\"flex flex-col gap-5 mb-8\">\n            {title ? <h2 className=\"text-center text-4xl font-medium\">{title}</h2> : null}\n            {description ? (\n              <p className=\"text-center text-muted-foreground\">\n                {description.split(\"<br />\").map((line, i, arr) => (\n                  <span key={i}>\n                    {line}\n                    {i !== arr.length - 1 && <br />}\n                  </span>\n                ))}\n              </p>\n            ) : null}\n          </div>\n        </div>\n      )}\n\n      <div className=\"relative\">\n        <div\n          className={cn(\n            \"flex justify-center items-center gap-5 flex-wrap\",\n            showLoadMore && \"max-h-[720px] overflow-hidden\"\n          )}\n        >\n          {displayedTestimonials.map((testimonial, index) => (\n            <Card key={index} className=\"w-80 h-auto p-5 relative bg-card border-border\">\n              <div className=\"flex items-center\">\n                <Image\n                  src={testimonial.image.src}\n                  alt={testimonial.image.alt}\n                  width={testimonial.image.width}\n                  height={testimonial.image.height}\n                  priority={testimonial.image.priority}\n                  quality={testimonial.image.quality}\n                  sizes={testimonial.image.sizes}\n                  fill={testimonial.image.fill}\n                  className={cn(\"rounded-full\", testimonial.image.className)}\n                  placeholder={testimonial.image.placeholder}\n                />\n                <div className=\"flex flex-col pl-4\">\n                  <span className=\"font-semibold text-base\">{testimonial.name}</span>\n                  <span className=\"text-sm text-muted-foreground\">{testimonial.username}</span>\n                </div>\n              </div>\n              <div className=\"mt-5 mb-5\">\n                <p className=\"text-foreground font-medium\">{testimonial.text}</p>\n              </div>\n\n              <Button variant=\"ghost\" size=\"icon\" asChild>\n                <Link\n                  href={testimonial.socialHref}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"absolute top-4 right-4 hover:opacity-80 transition-opacity inline-flex items-center justify-center\"\n                >\n                  <DynamicIcon name={testimonial.socialIconName} className=\"h-4 w-4\" />\n                  {testimonial.socialAriaLabel ? (\n                    <span className=\"sr-only\">{testimonial.socialAriaLabel}</span>\n                  ) : null}\n                </Link>\n              </Button>\n            </Card>\n          ))}\n        </div>\n\n        {showLoadMore ? (\n          <>\n            <div className=\"absolute bottom-0 left-0 w-full h-20 bg-gradient-to-t from-background to-transparent\" />\n            <div className=\"absolute bottom-10 left-1/2 transform -translate-x-1/2 z-20\">\n              <Button variant=\"secondary\" onClick={() => setShowAll(true)}>\n                {loadMoreLabel}\n              </Button>\n            </div>\n          </>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n"
    }
  ],
  "meta": {
    "component_name": "Testimonials",
    "component_path": "/components/ui/testimonials.tsx",
    "props": "TestimonialsProps",
    "props_path": "/components/ui/testimonials.tsx",
    "original_file": "/components/ui/testimonials.tsx",
    "transformed_at": "2025-09-22T19:01:17.509080",
    "category": "testimonials",
    "tags": [
      "trust-building",
      "social-proof",
      "mixed-media",
      "responsive-mobile",
      "container-bound",
      "interactive"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:01:17.509112"
  }
}