{
  "name": "testimonials",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/testimonials.tsx)",
  "title": "Testimonials",
  "files": [
    {
      "path": "/components/ui/testimonials.tsx",
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card } from \"@/components/ui/card\"\nimport Image from \"@/components/Image\"\nimport Link from \"@/components/Link\"\nimport DynamicIcon from \"@/components/DynamicIcon\"\n\n// Image interface per project guidelines\nexport interface ImageProps {\n  src: string\n  alt: string\n  width: number\n  height: number\n  priority?: boolean\n  quality?: number\n  sizes?: string\n  fill?: boolean\n  className?: string\n  placeholder?: string\n}\n\nexport interface Testimonial {\n  avatar: ImageProps\n  name: string\n  username: string\n  text: string\n  socialUrl: string\n  socialIconName: string // lucide icon name, e.g., \"Twitter\"\n}\n\nexport interface TestimonialsProps {\n  testimonials: Testimonial[]\n  className?: string\n  title: string\n  description: string\n  maxDisplayed: number\n  // CTA beneath the grid (uses Button asChild with Link)\n  ctaLabel?: string\n  ctaHref?: string\n  ctaTarget?: \"_blank\" | \"_self\"\n  ctaRel?: string\n  // Optional background customization\n  backgroundImage?: ImageProps\n  backgroundColor?: string\n}\n\nexport function Testimonials({\n  testimonials,\n  className,\n  title,\n  description,\n  maxDisplayed,\n  ctaLabel,\n  ctaHref,\n  ctaTarget,\n  ctaRel,\n  backgroundImage,\n  backgroundColor,\n}: TestimonialsProps) {\n  const descParts = description.split(\"<br />\")\n  const showCta = Boolean(\n    testimonials.length > maxDisplayed && ctaLabel && ctaHref\n  )\n\n  return (\n    <div\n      className={cn(\"relative\", className)}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\n            \"absolute inset-0 -z-10 object-cover\",\n            backgroundImage.className\n          )}\n          fill={backgroundImage.fill}\n        />\n      ) : null}\n\n      <div className=\"flex flex-col items-center justify-center pt-5\">\n        <div className=\"flex flex-col gap-5 mb-8\">\n          <h2 className=\"text-center text-4xl font-medium\">{title}</h2>\n          <p className=\"text-center text-muted-foreground\">\n            {descParts.map((line, i) => (\n              <span key={i}>\n                {line}\n                {i !== descParts.length - 1 && <br />}\n              </span>\n            ))}\n          </p>\n        </div>\n      </div>\n\n      <div className=\"relative\">\n        <div\n          className={cn(\n            \"flex justify-center items-center gap-5 flex-wrap\",\n            testimonials.length > maxDisplayed && \"max-h-[720px] overflow-hidden\"\n          )}\n        >\n          {testimonials.slice(0, maxDisplayed).map((testimonial, index) => (\n            <Card key={index} className=\"w-80 h-auto p-5 relative bg-card border-border\">\n              <div className=\"flex items-center\">\n                <Image\n                  {...testimonial.avatar}\n                  className={cn(\"rounded-full\", testimonial.avatar.className)}\n                />\n                <div className=\"flex flex-col pl-4\">\n                  <span className=\"font-semibold text-base\">{testimonial.name}</span>\n                  <span className=\"text-sm text-muted-foreground\">{testimonial.username}</span>\n                </div>\n              </div>\n\n              <div className=\"mt-5 mb-5\">\n                <p className=\"text-foreground font-medium\">{testimonial.text}</p>\n              </div>\n\n              <Button variant=\"ghost\" size=\"icon\" className=\"absolute top-4 right-4 hover:opacity-80 transition-opacity\" asChild>\n                <Link href={testimonial.socialUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  <DynamicIcon name={testimonial.socialIconName} className=\"h-4 w-4\" />\n                </Link>\n              </Button>\n            </Card>\n          ))}\n        </div>\n\n        {showCta && (\n          <>\n            <div className=\"absolute bottom-0 left-0 w-full h-20 bg-gradient-to-t from-background to-transparent\" />\n            <div className=\"absolute bottom-10 left-1/2 transform -translate-x-1/2 z-20\">\n              <Button variant=\"secondary\" asChild>\n                <Link href={ctaHref as string} target={ctaTarget} rel={ctaRel}>\n                  {ctaLabel}\n                </Link>\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  )\n}\n"
    }
  ],
  "meta": {
    "component_name": "Testimonials",
    "component_path": "/components/ui/testimonials.tsx",
    "props": "TestimonialsProps",
    "props_path": "/components/ui/testimonials.tsx",
    "original_file": "/components/ui/testimonials.tsx",
    "transformed_at": "2025-09-23T17:35:26.470080",
    "category": "testimonials",
    "tags": [
      "trust-building",
      "social-proof",
      "mixed-media",
      "responsive-mobile",
      "responsive-desktop",
      "container-bound"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:01:17.509112",
    "install_url": "s3://registry-marketkore/registry/testimonials.json"
  }
}