{
  "name": "gallery",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/gallery.tsx)",
  "title": "Gallery",
  "files": [
    {
      "path": "/components/ui/gallery.tsx",
      "type": "registry:ui",
      "content": "\"use client\";\n\nimport { useState, useEffect, forwardRef } from \"react\";\nimport { motion, useMotionValue } from \"framer-motion\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport Image, { type ImageProps as AppImageProps } from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\nexport type Direction = \"left\" | \"right\";\n\nexport interface PhotoItem {\n  id: string | number;\n  order: number;\n  x: string; // positional offset (e.g., \"-160px\")\n  y: string; // positional offset (e.g., \"32px\")\n  zIndex: number;\n  direction: Direction;\n  src: string;\n  alt: string;\n}\n\nexport interface PhotoGalleryProps {\n  animationDelay?: number;\n  subtitle: string;\n  titlePrefix: string;\n  titleHighlight: string;\n  photos: PhotoItem[];\n  photoWidth: number;\n  photoHeight: number;\n  ctaText: string;\n  ctaHref: string;\n  ctaTarget?: \"_blank\" | \"_self\";\n  ctaRel?: string;\n  className?: string;\n  backgroundImage?: AppImageProps; // Optional background image behind the gallery\n  backgroundColor?: string; // Optional background color applied to the root container\n}\n\nfunction getRandomNumberInRange(min: number, max: number): number {\n  if (min >= max) {\n    throw new Error(\"Min value should be less than max value\");\n  }\n  return Math.random() * (max - min) + min;\n}\n\nconst MotionImage = motion(\n  forwardRef<HTMLImageElement, AppImageProps>(function MotionImage(props, ref) {\n    return <Image ref={ref} {...props} />;\n  })\n);\n\nexport function PhotoGallery(props: PhotoGalleryProps) {\n  const {\n    animationDelay,\n    subtitle,\n    titlePrefix,\n    titleHighlight,\n    photos,\n    photoWidth,\n    photoHeight,\n    ctaText,\n    ctaHref,\n    ctaTarget,\n    ctaRel,\n    className,\n    backgroundImage,\n    backgroundColor,\n  } = props;\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  useEffect(() => {\n    const fadeDelay = Math.max(0, (animationDelay ?? 0) * 1000);\n    const visibilityTimer: ReturnType<typeof setTimeout> = setTimeout(() => {\n      setIsVisible(true);\n    }, fadeDelay);\n\n    const startDelay = Math.max(0, (animationDelay ?? 0) * 1000 + 400);\n    const animationTimer: ReturnType<typeof setTimeout> = setTimeout(() => {\n      setIsLoaded(true);\n    }, startDelay);\n\n    return () => {\n      clearTimeout(visibilityTimer);\n      clearTimeout(animationTimer);\n    };\n  }, [animationDelay]);\n\n  const containerVariants = {\n    hidden: { opacity: 1 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.15,\n        delayChildren: 0.1,\n      },\n    },\n  } as const;\n\n  const photoVariants = {\n    hidden: () => ({\n      x: 0,\n      y: 0,\n      rotate: 0,\n      scale: 1,\n    }),\n    visible: (custom: { x: string; y: string; order: number }) => ({\n      x: custom.x,\n      y: custom.y,\n      rotate: 0,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 70,\n        damping: 12,\n        mass: 1,\n        delay: custom.order * 0.15,\n      },\n    }),\n  } as const;\n\n  return (\n    <div className={cn(\"mt-40 relative\", className)} style={{ backgroundColor }}>\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          className={cn(\"absolute inset-0 -z-10 object-cover\", backgroundImage.className)}\n        />\n      ) : null}\n\n      <div className=\"absolute inset-0 max-md:hidden top-[200px] -z-10 h-[300px] w-full bg-transparent bg-[linear-gradient(to_right,#57534e_1px,transparent_1px),linear-gradient(to_bottom,#57534e_1px,transparent_1px)] bg-[size:3rem_3rem] opacity-20 [mask-image:radial-gradient(ellipse_80%_50%_at_50%_0%,#000_70%,transparent_110%)] dark:bg-[linear-gradient(to_right,#a8a29e_1px,transparent_1px),linear-gradient(to_bottom,#a8a29e_1px,transparent_1px)]\"></div>\n\n      <p className=\"lg:text-md my-2 text-center text-xs font-light uppercase tracking-widest text-slate-600 dark:text-slate-400\">\n        {subtitle}\n      </p>\n\n      <h3 className=\"z-20 mx-auto max-w-2xl justify-center bg-gradient-to-r from-slate-900 via-slate-800 to-slate-900 bg-clip-text py-3 text-center text-4xl text-transparent dark:bg-gradient-to-r dark:from-slate-100 dark:via-slate-200 dark:to-slate-100 dark:bg-clip-text md:text-7xl\">\n        {titlePrefix} <span className=\"text-rose-500\">{titleHighlight}</span>\n      </h3>\n\n      <div className=\"relative mb-8 h-[350px] w-full items-center justify-center lg:flex\">\n        <motion.div\n          className=\"relative mx-auto flex w-full max-w-7xl justify-center\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: isVisible ? 1 : 0 }}\n          transition={{ duration: 0.4, ease: \"easeOut\" }}\n        >\n          <motion.div\n            className=\"relative flex w-full justify-center\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={isLoaded ? \"visible\" : \"hidden\"}\n          >\n            <div className=\"relative h-[220px] w-[220px]\">\n              {[...photos]\n                .sort((a, b) => a.zIndex - b.zIndex) // ensure lower zIndex renders first\n                .map((photo) => (\n                  <motion.div\n                    key={photo.id}\n                    className=\"absolute left-0 top-0\"\n                    style={{ zIndex: photo.zIndex }}\n                    variants={photoVariants}\n                    custom={{ x: photo.x, y: photo.y, order: photo.order }}\n                  >\n                    <Photo\n                      width={photoWidth}\n                      height={photoHeight}\n                      src={photo.src}\n                      alt={photo.alt}\n                      direction={photo.direction}\n                    />\n                  </motion.div>\n                ))}\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n\n      <div className=\"flex w-full justify-center\">\n        <Button asChild>\n          <Link href={ctaHref} target={ctaTarget} rel={ctaRel} className=\"px-6\">\n            {ctaText}\n          </Link>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport type PhotoProps = {\n  src: string;\n  alt: string;\n  className?: string;\n  direction?: Direction;\n  width: number;\n  height: number;\n} & Omit<Partial<AppImageProps>, \"src\" | \"alt\" | \"width\" | \"height\">;\n\nexport function Photo({ src, alt, className, direction, width, height, ...props }: PhotoProps) {\n  const x = useMotionValue(200);\n  const y = useMotionValue(200);\n  const [rotation, setRotation] = useState<number>(0);\n\n  useEffect(() => {\n    const randomRotation = getRandomNumberInRange(1, 4) * (direction === \"left\" ? -1 : 1);\n    setRotation(randomRotation);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function handleMouse(event: { currentTarget: { getBoundingClientRect: () => DOMRect }; clientX: number; clientY: number }) {\n    const rect = event.currentTarget.getBoundingClientRect();\n    x.set(event.clientX - rect.left);\n    y.set(event.clientY - rect.top);\n  }\n\n  const resetMouse = () => {\n    x.set(200);\n    y.set(200);\n  };\n\n  return (\n    <motion.div\n      drag\n      dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}\n      whileTap={{ scale: 1.2, zIndex: 9999 }}\n      whileHover={{ scale: 1.1, rotateZ: 2 * (direction === \"left\" ? -1 : 1), zIndex: 9999 }}\n      whileDrag={{ scale: 1.1, zIndex: 9999 }}\n      initial={{ rotate: 0 }}\n      animate={{ rotate: rotation }}\n      style={{ width, height, perspective: 400, transform: `rotate(0deg) rotateX(0deg) rotateY(0deg)`, zIndex: 1, WebkitTouchCallout: \"none\", WebkitUserSelect: \"none\", userSelect: \"none\", touchAction: \"none\" }}\n      className={cn(className, \"relative mx-auto shrink-0 cursor-grab active:cursor-grabbing\")}\n      onMouseMove={handleMouse}\n      onMouseLeave={resetMouse}\n      draggable={false}\n      tabIndex={0}\n    >\n      <div className=\"relative h-full w-full overflow-hidden rounded-3xl shadow-sm\">\n        <MotionImage className={cn(\"rounded-3xl object-cover\")} fill src={src} alt={alt} {...props} draggable={false} />\n      </div>\n    </motion.div>\n  );\n}\n\nexport default PhotoGallery;\n"
    }
  ],
  "meta": {
    "component_name": "PhotoGallery",
    "component_path": "/components/ui/gallery.tsx",
    "props": "PhotoGalleryProps",
    "props_path": "/components/ui/gallery.tsx",
    "original_file": "/components/ui/gallery.tsx",
    "transformed_at": "2025-09-23T17:39:24.216883",
    "category": "gallery",
    "tags": [
      "engagement",
      "media-display",
      "visual-dominant",
      "interactive",
      "responsive-mobile"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:04:53.778834",
    "install_url": "s3://registry-marketkore/registry/gallery.json"
  }
}