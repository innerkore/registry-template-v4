{
  "name": "banner",
  "type": "registry:ui",
  "description": "TypeScript component (transformed from /components/ui/banner.tsx)",
  "title": "Banner",
  "files": [
    {
      "path": "/components/ui/banner.tsx",
      "type": "registry:ui",
      "content": "import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"@/components/Link\";\nimport Image from \"@/components/Image\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\n\n// Icon interface (as per guidelines)\ninterface Icon {\n  package: \"lucide\";\n  name: string; // lucide icon name\n  type: \"icon\";\n  className: string; // tailwind classes\n}\n\n// Image interface (as per guidelines)\ninterface ImageProps {\n  src: string;\n  alt: string;\n  width: number;\n  height: number;\n  priority?: boolean;\n  quality?: number;\n  sizes?: string;\n  fill?: boolean;\n  className?: string;\n  placeholder?: string;\n}\n\n// Link interface (as per guidelines)\ninterface LinkProps {\n  href: string;\n  target?: \"_blank\" | \"_self\";\n  className?: string;\n  rel?: string;\n}\n\n// CTA link with label\ntype BannerActionLink = LinkProps & { label: string };\n\nconst bannerVariants = cva(\"relative w-full\", {\n  variants: {\n    variant: {\n      default: \"bg-background border border-border\",\n      muted: \"dark bg-muted\",\n      border: \"border-b border-border\",\n    },\n    size: {\n      sm: \"px-4 py-2\",\n      default: \"px-4 py-3\",\n      lg: \"px-4 py-3 md:py-2\",\n    },\n    rounded: {\n      none: \"\",\n      default: \"rounded-lg\",\n    },\n  },\n});\n\nexport interface BannerProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof bannerVariants> {\n  // Content\n  title?: string;\n  description?: string;\n  children?: React.ReactNode;\n\n  // Optional leading icon\n  icon?: Icon;\n\n  // Optional CTA as Button with Link using asChild\n  actionLink?: BannerActionLink;\n\n  // Close behavior\n  onClose?: () => void;\n  isClosable?: boolean;\n  closeButtonAriaLabel?: string;\n\n  // Layout\n  layout?: \"row\" | \"center\" | \"complex\";\n\n  // Optional background\n  backgroundImage?: ImageProps;\n  backgroundColor?: string;\n}\n\nconst Banner = React.forwardRef<HTMLDivElement, BannerProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      rounded,\n      icon,\n      actionLink,\n      onClose,\n      isClosable,\n      closeButtonAriaLabel,\n      layout,\n      title,\n      description,\n      backgroundImage,\n      backgroundColor,\n      children,\n      style,\n      ...props\n    },\n    ref\n  ) => {\n    const mergedStyle: React.CSSProperties | undefined =\n      backgroundColor || style\n        ? { ...(backgroundColor ? { backgroundColor } : {}), ...(style || {}) }\n        : style;\n\n    const textContent = (\n      <div className={cn(\"flex grow\", layout === \"complex\" && \"flex-col justify-between gap-3 md:flex-row md:items-center\")}\n      >\n        {(title || description) && (\n          <div className=\"flex flex-col gap-1\">\n            {title && <div className=\"font-medium leading-none\">{title}</div>}\n            {description && <div className=\"text-sm opacity-80\">{description}</div>}\n          </div>\n        )}\n        {children}\n      </div>\n    );\n\n    const innerContent = (\n      <div\n        className={cn(\n          \"flex gap-2\",\n          layout === \"center\" && \"justify-center\",\n          layout === \"complex\" && \"md:items-center\"\n        )}\n      >\n        {layout === \"complex\" ? (\n          <div className=\"flex grow gap-3 md:items-center\">\n            {icon && (\n              <div className=\"flex shrink-0 items-center gap-3 max-md:mt-0.5\">\n                <DynamicIcon name={icon.name} className={icon.className} />\n              </div>\n            )}\n            {textContent}\n          </div>\n        ) : (\n          <>\n            {icon && (\n              <div className=\"flex shrink-0 items-center gap-3\">\n                <DynamicIcon name={icon.name} className={icon.className} />\n              </div>\n            )}\n            <div className=\"flex grow items-center justify-between gap-3\">\n              {textContent}\n            </div>\n          </>\n        )}\n        {(actionLink || isClosable) && (\n          <div className=\"flex items-center gap-3\">\n            {actionLink && actionLink.href && actionLink.label && (\n              <Button asChild>\n                <Link\n                  href={actionLink.href}\n                  target={actionLink.target}\n                  rel={actionLink.rel}\n                  className={actionLink.className}\n                >\n                  {actionLink.label}\n                </Link>\n              </Button>\n            )}\n            {isClosable && (\n              <Button\n                variant=\"ghost\"\n                className=\"group -my-1.5 -me-2 size-8 shrink-0 p-0 hover:bg-transparent\"\n                onClick={onClose}\n                aria-label={closeButtonAriaLabel}\n              >\n                <DynamicIcon\n                  name=\"X\"\n                  className=\"h-4 w-4 opacity-60 transition-opacity group-hover:opacity-100\"\n                />\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    );\n\n    return (\n      <div\n        ref={ref}\n        className={cn(bannerVariants({ variant, size, rounded }), className)}\n        style={mergedStyle}\n        {...props}\n      >\n        {backgroundImage && (\n          <div className=\"absolute inset-0 -z-10\">\n            <Image\n              {...backgroundImage}\n              className={cn(\"h-full w-full object-cover\", backgroundImage.className)}\n            />\n          </div>\n        )}\n        {innerContent}\n      </div>\n    );\n  }\n);\n\nBanner.displayName = \"Banner\";\n\nexport { Banner, type BannerProps };"
    },
    {
      "path": "/components/blocks/banner.tsx",
      "type": "registry:block",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport DynamicIcon from \"@/components/DynamicIcon\";\nimport Image, { type ImageProps as BackgroundImageProps } from \"@/components/Image\";\nimport Link from \"@/components/Link\";\n\nexport interface Banner1Props {\n  title: string;\n  description: string;\n  linkText: string;\n  linkUrl: string;\n  linkTarget?: \"_blank\" | \"_self\";\n  linkRel?: string;\n  initialVisible: boolean;\n  backgroundColor?: string;\n  backgroundImage?: BackgroundImageProps;\n  closeIconName: string; // lucide icon name (e.g., \"X\")\n  closeAriaLabel: string;\n  className?: string;\n}\n\nconst Banner1: React.FC<Banner1Props> = ({\n  title,\n  description,\n  linkText,\n  linkUrl,\n  linkTarget,\n  linkRel,\n  initialVisible,\n  backgroundColor,\n  backgroundImage,\n  closeIconName,\n  closeAriaLabel,\n  className,\n}) => {\n  const [isVisible, setIsVisible] = useState<boolean>(initialVisible);\n\n  if (!isVisible) return null;\n\n  return (\n    <section\n      className={`relative w-full border-b px-4 py-3 overflow-hidden ${className ?? \"\"}`}\n      style={backgroundColor ? { backgroundColor } : undefined}\n    >\n      {backgroundImage ? (\n        <Image\n          {...backgroundImage}\n          fill\n          className={`absolute inset-0 -z-10 object-cover ${backgroundImage.className ?? \"\"}`}\n        />\n      ) : null}\n\n      <div className=\"flex items-center justify-between gap-2\">\n        <div className=\"flex-1 text-center\">\n          <span className=\"text-sm\">\n            <span className=\"font-medium\">{title}</span>{\" \"}\n            <span className=\"text-muted-foreground\">\n              {description}{\" \"}\n              <Link\n                href={linkUrl}\n                className=\"hover:text-foreground underline underline-offset-2\"\n                target={linkTarget}\n                rel={linkRel}\n              >\n                {linkText}\n              </Link>\n            </span>\n          </span>\n        </div>\n\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"-mr-2 h-8 w-8 flex-none\"\n          onClick={() => setIsVisible(false)}\n          aria-label={closeAriaLabel}\n        >\n          <DynamicIcon name={closeIconName} className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </section>\n  );\n};\n\nexport { Banner1 };"
    }
  ],
  "meta": {
    "component_name": "Banner1",
    "component_path": "/components/blocks/banner.tsx",
    "props": "Banner1Props",
    "props_path": "/components/blocks/banner.tsx",
    "original_file": "/components/blocks/banner.tsx",
    "transformed_at": "2025-09-22T19:39:46.536088",
    "category": "banner",
    "tags": [
      "engagement",
      "interactive",
      "minimalist",
      "text-heavy",
      "responsive-mobile"
    ],
    "variations": [],
    "created_at": "2025-09-22T19:22:57.670792",
    "install_url": "s3://registry-marketkore/registry/banner.json"
  }
}